/// <reference types="node" />
import http = require("http");
import { Configuration } from "./internal/configuration";
import * as model from "./model/model";
export * from "./model/model";
/**
 * Library for communicating with the Aspose.Words Cloud API
 */
export declare class WordsApi {
    /**
     * API configuration
     */
    configuration: Configuration;
    /**
     * @param appSID App SID.
     * @param appKey App key.
     * @param baseUrl Base api Url.
     * @param debugMode A value indicating whether debug mode. In debug mode all requests and responses are logged to console.
     */
    constructor(appSID: string, appKey: string, baseUrl?: string, debugMode?: boolean);
    /**
     * Accepts all revisions in document.
     * @param requestObj contains request parameters
     */
    acceptAllRevisions(requestObj: model.AcceptAllRevisionsRequest): Promise<model.WordsIncomingMessage<model.RevisionsModificationResponse>>;
    /**
     * Appends documents to original document.
     * @param requestObj contains request parameters
     */
    appendDocument(requestObj: model.AppendDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Classifies raw text.
     * @param requestObj contains request parameters
     */
    classify(requestObj: model.ClassifyRequest): Promise<model.WordsIncomingMessage<model.ClassificationResponse>>;
    /**
     * Classifies document.
     * @param requestObj contains request parameters
     */
    classifyDocument(requestObj: model.ClassifyDocumentRequest): Promise<model.WordsIncomingMessage<model.ClassificationResponse>>;
    /**
     * Compares document with original document.
     * @param requestObj contains request parameters
     */
    compareDocument(requestObj: model.CompareDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Converts document from the request's content to the specified format .
     * @param requestObj contains request parameters
     */
    convertDocument(requestObj: model.ConvertDocumentRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Copy file
     * @param requestObj contains request parameters
     */
    copyFile(requestObj: model.CopyFileRequest): Promise<http.IncomingMessage>;
    /**
     * Copy folder
     * @param requestObj contains request parameters
     */
    copyFolder(requestObj: model.CopyFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Creates new document. Document is created with format which is recognized from file extensions. Supported extensions: \".doc\", \".docx\", \".docm\", \".dot\", \".dotm\", \".dotx\", \".flatopc\", \".fopc\", \".flatopc_macro\", \".fopc_macro\", \".flatopc_template\", \".fopc_template\", \".flatopc_template_macro\", \".fopc_template_macro\", \".wordml\", \".wml\", \".rtf\".
     * @param requestObj contains request parameters
     */
    createDocument(requestObj: model.CreateDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Create the folder
     * @param requestObj contains request parameters
     */
    createFolder(requestObj: model.CreateFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Adds new or update existing document property.
     * @param requestObj contains request parameters
     */
    createOrUpdateDocumentProperty(requestObj: model.CreateOrUpdateDocumentPropertyRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertyResponse>>;
    /**
     * Resets border properties to default values.              'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    deleteBorder(requestObj: model.DeleteBorderRequest): Promise<model.WordsIncomingMessage<model.BorderResponse>>;
    /**
     * Resets borders properties to default values.              'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    deleteBorders(requestObj: model.DeleteBordersRequest): Promise<model.WordsIncomingMessage<model.BordersResponse>>;
    /**
     * Removes comment from document.
     * @param requestObj contains request parameters
     */
    deleteComment(requestObj: model.DeleteCommentRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes document property.
     * @param requestObj contains request parameters
     */
    deleteDocumentProperty(requestObj: model.DeleteDocumentPropertyRequest): Promise<http.IncomingMessage>;
    /**
     * Removes drawing object from document.
     * @param requestObj contains request parameters
     */
    deleteDrawingObject(requestObj: model.DeleteDrawingObjectRequest): Promise<http.IncomingMessage>;
    /**
     * Removes drawing object from document.
     * @param requestObj contains request parameters
     */
    deleteDrawingObjectWithoutNodePath(requestObj: model.DeleteDrawingObjectWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes field from document.
     * @param requestObj contains request parameters
     */
    deleteField(requestObj: model.DeleteFieldRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes field from document.
     * @param requestObj contains request parameters
     */
    deleteFieldWithoutNodePath(requestObj: model.DeleteFieldWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Removes fields from section paragraph.
     * @param requestObj contains request parameters
     */
    deleteFields(requestObj: model.DeleteFieldsRequest): Promise<http.IncomingMessage>;
    /**
     * Removes fields from section paragraph.
     * @param requestObj contains request parameters
     */
    deleteFieldsWithoutNodePath(requestObj: model.DeleteFieldsWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Delete file
     * @param requestObj contains request parameters
     */
    deleteFile(requestObj: model.DeleteFileRequest): Promise<http.IncomingMessage>;
    /**
     * Delete folder
     * @param requestObj contains request parameters
     */
    deleteFolder(requestObj: model.DeleteFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Removes footnote from document.
     * @param requestObj contains request parameters
     */
    deleteFootnote(requestObj: model.DeleteFootnoteRequest): Promise<http.IncomingMessage>;
    /**
     * Removes footnote from document.
     * @param requestObj contains request parameters
     */
    deleteFootnoteWithoutNodePath(requestObj: model.DeleteFootnoteWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Removes form field from document.
     * @param requestObj contains request parameters
     */
    deleteFormField(requestObj: model.DeleteFormFieldRequest): Promise<http.IncomingMessage>;
    /**
     * Removes form field from document.
     * @param requestObj contains request parameters
     */
    deleteFormFieldWithoutNodePath(requestObj: model.DeleteFormFieldWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes header/footer from document.
     * @param requestObj contains request parameters
     */
    deleteHeaderFooter(requestObj: model.DeleteHeaderFooterRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes document headers and footers.
     * @param requestObj contains request parameters
     */
    deleteHeadersFooters(requestObj: model.DeleteHeadersFootersRequest): Promise<http.IncomingMessage>;
    /**
     * Removes macros from document.
     * @param requestObj contains request parameters
     */
    deleteMacros(requestObj: model.DeleteMacrosRequest): Promise<http.IncomingMessage>;
    /**
     * Removes OfficeMath object from document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObject(requestObj: model.DeleteOfficeMathObjectRequest): Promise<http.IncomingMessage>;
    /**
     * Removes OfficeMath object from document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjectWithoutNodePath(requestObj: model.DeleteOfficeMathObjectWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Removes paragraph from section.
     * @param requestObj contains request parameters
     */
    deleteParagraph(requestObj: model.DeleteParagraphRequest): Promise<http.IncomingMessage>;
    /**
     * Removes paragraph from section.
     * @param requestObj contains request parameters
     */
    deleteParagraphWithoutNodePath(requestObj: model.DeleteParagraphWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Removes run from document.
     * @param requestObj contains request parameters
     */
    deleteRun(requestObj: model.DeleteRunRequest): Promise<http.IncomingMessage>;
    /**
     * Removes section from document.
     * @param requestObj contains request parameters
     */
    deleteSection(requestObj: model.DeleteSectionRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes a table.
     * @param requestObj contains request parameters
     */
    deleteTable(requestObj: model.DeleteTableRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes a table cell.
     * @param requestObj contains request parameters
     */
    deleteTableCell(requestObj: model.DeleteTableCellRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes a table row.
     * @param requestObj contains request parameters
     */
    deleteTableRow(requestObj: model.DeleteTableRowRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes a table.
     * @param requestObj contains request parameters
     */
    deleteTableWithoutNodePath(requestObj: model.DeleteTableWithoutNodePathRequest): Promise<http.IncomingMessage>;
    /**
     * Deletes watermark (for deleting last watermark from the document).
     * @param requestObj contains request parameters
     */
    deleteWatermark(requestObj: model.DeleteWatermarkRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Download file
     * @param requestObj contains request parameters
     */
    downloadFile(requestObj: model.DownloadFileRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Executes document mail merge operation.
     * @param requestObj contains request parameters
     */
    executeMailMerge(requestObj: model.ExecuteMailMergeRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Executes document mail merge online.
     * @param requestObj contains request parameters
     */
    executeMailMergeOnline(requestObj: model.ExecuteMailMergeOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Gets the list of fonts, available for document processing.
     * @param requestObj contains request parameters
     */
    getAvailableFonts(requestObj: model.GetAvailableFontsRequest): Promise<model.WordsIncomingMessage<model.AvailableFontsResponse>>;
    /**
     * Reads document bookmark data by its name.
     * @param requestObj contains request parameters
     */
    getBookmarkByName(requestObj: model.GetBookmarkByNameRequest): Promise<model.WordsIncomingMessage<model.BookmarkResponse>>;
    /**
     * Reads document bookmarks common info.
     * @param requestObj contains request parameters
     */
    getBookmarks(requestObj: model.GetBookmarksRequest): Promise<model.WordsIncomingMessage<model.BookmarksResponse>>;
    /**
     * Returns a border. 'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    getBorder(requestObj: model.GetBorderRequest): Promise<model.WordsIncomingMessage<model.BorderResponse>>;
    /**
     * Returns a collection of borders. 'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    getBorders(requestObj: model.GetBordersRequest): Promise<model.WordsIncomingMessage<model.BordersResponse>>;
    /**
     * Gets comment from document.
     * @param requestObj contains request parameters
     */
    getComment(requestObj: model.GetCommentRequest): Promise<model.WordsIncomingMessage<model.CommentResponse>>;
    /**
     * Gets comments from document.
     * @param requestObj contains request parameters
     */
    getComments(requestObj: model.GetCommentsRequest): Promise<model.WordsIncomingMessage<model.CommentsResponse>>;
    /**
     * Reads document common info.
     * @param requestObj contains request parameters
     */
    getDocument(requestObj: model.GetDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Reads document drawing object common info by its index or convert to format specified.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndex(requestObj: model.GetDocumentDrawingObjectByIndexRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Reads document drawing object common info by its index or convert to format specified.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndexWithoutNodePath(requestObj: model.GetDocumentDrawingObjectByIndexWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Reads drawing object image data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageData(requestObj: model.GetDocumentDrawingObjectImageDataRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Reads drawing object image data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageDataWithoutNodePath(requestObj: model.GetDocumentDrawingObjectImageDataWithoutNodePathRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Gets drawing object OLE data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleData(requestObj: model.GetDocumentDrawingObjectOleDataRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Gets drawing object OLE data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleDataWithoutNodePath(requestObj: model.GetDocumentDrawingObjectOleDataWithoutNodePathRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Reads document drawing objects common info.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjects(requestObj: model.GetDocumentDrawingObjectsRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectsResponse>>;
    /**
     * Reads document drawing objects common info.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectsWithoutNodePath(requestObj: model.GetDocumentDrawingObjectsWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectsResponse>>;
    /**
     * Reads document field names.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNames(requestObj: model.GetDocumentFieldNamesRequest): Promise<model.WordsIncomingMessage<model.FieldNamesResponse>>;
    /**
     * Reads document field names.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNamesOnline(requestObj: model.GetDocumentFieldNamesOnlineRequest): Promise<model.WordsIncomingMessage<model.FieldNamesResponse>>;
    /**
     * Reads document hyperlink by its index.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinkByIndex(requestObj: model.GetDocumentHyperlinkByIndexRequest): Promise<model.WordsIncomingMessage<model.HyperlinkResponse>>;
    /**
     * Reads document hyperlinks common info.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinks(requestObj: model.GetDocumentHyperlinksRequest): Promise<model.WordsIncomingMessage<model.HyperlinksResponse>>;
    /**
     * Reads document properties info.
     * @param requestObj contains request parameters
     */
    getDocumentProperties(requestObj: model.GetDocumentPropertiesRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertiesResponse>>;
    /**
     * Reads document property info by the property name.
     * @param requestObj contains request parameters
     */
    getDocumentProperty(requestObj: model.GetDocumentPropertyRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertyResponse>>;
    /**
     * Reads document protection common info.
     * @param requestObj contains request parameters
     */
    getDocumentProtection(requestObj: model.GetDocumentProtectionRequest): Promise<model.WordsIncomingMessage<model.ProtectionDataResponse>>;
    /**
     * Reads document statistics.
     * @param requestObj contains request parameters
     */
    getDocumentStatistics(requestObj: model.GetDocumentStatisticsRequest): Promise<model.WordsIncomingMessage<model.StatDataResponse>>;
    /**
     * Exports the document into the specified format.
     * @param requestObj contains request parameters
     */
    getDocumentWithFormat(requestObj: model.GetDocumentWithFormatRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Gets field from document.
     * @param requestObj contains request parameters
     */
    getField(requestObj: model.GetFieldRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Gets field from document.
     * @param requestObj contains request parameters
     */
    getFieldWithoutNodePath(requestObj: model.GetFieldWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Get fields from document.
     * @param requestObj contains request parameters
     */
    getFields(requestObj: model.GetFieldsRequest): Promise<model.WordsIncomingMessage<model.FieldsResponse>>;
    /**
     * Get fields from document.
     * @param requestObj contains request parameters
     */
    getFieldsWithoutNodePath(requestObj: model.GetFieldsWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FieldsResponse>>;
    /**
     * Get all files and folders within a folder
     * @param requestObj contains request parameters
     */
    getFilesList(requestObj: model.GetFilesListRequest): Promise<model.WordsIncomingMessage<model.FilesList>>;
    /**
     * Reads footnote by index.
     * @param requestObj contains request parameters
     */
    getFootnote(requestObj: model.GetFootnoteRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Reads footnote by index.
     * @param requestObj contains request parameters
     */
    getFootnoteWithoutNodePath(requestObj: model.GetFootnoteWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Gets footnotes from document.
     * @param requestObj contains request parameters
     */
    getFootnotes(requestObj: model.GetFootnotesRequest): Promise<model.WordsIncomingMessage<model.FootnotesResponse>>;
    /**
     * Gets footnotes from document.
     * @param requestObj contains request parameters
     */
    getFootnotesWithoutNodePath(requestObj: model.GetFootnotesWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FootnotesResponse>>;
    /**
     * Returns representation of an one of the form field.
     * @param requestObj contains request parameters
     */
    getFormField(requestObj: model.GetFormFieldRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Returns representation of an one of the form field.
     * @param requestObj contains request parameters
     */
    getFormFieldWithoutNodePath(requestObj: model.GetFormFieldWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Gets form fields from document.
     * @param requestObj contains request parameters
     */
    getFormFields(requestObj: model.GetFormFieldsRequest): Promise<model.WordsIncomingMessage<model.FormFieldsResponse>>;
    /**
     * Gets form fields from document.
     * @param requestObj contains request parameters
     */
    getFormFieldsWithoutNodePath(requestObj: model.GetFormFieldsWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FormFieldsResponse>>;
    /**
     * Returns a header/footer from the document by index.
     * @param requestObj contains request parameters
     */
    getHeaderFooter(requestObj: model.GetHeaderFooterRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Returns a header/footer from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOfSection(requestObj: model.GetHeaderFooterOfSectionRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Returns a list of header/footers from the document.
     * @param requestObj contains request parameters
     */
    getHeaderFooters(requestObj: model.GetHeaderFootersRequest): Promise<model.WordsIncomingMessage<model.HeaderFootersResponse>>;
    /**
     * Reads OfficeMath object by index.
     * @param requestObj contains request parameters
     */
    getOfficeMathObject(requestObj: model.GetOfficeMathObjectRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectResponse>>;
    /**
     * Reads OfficeMath object by index.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectWithoutNodePath(requestObj: model.GetOfficeMathObjectWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectResponse>>;
    /**
     * Gets OfficeMath objects from document.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjects(requestObj: model.GetOfficeMathObjectsRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectsResponse>>;
    /**
     * Gets OfficeMath objects from document.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectsWithoutNodePath(requestObj: model.GetOfficeMathObjectsWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectsResponse>>;
    /**
     * This resource represents one of the paragraphs contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraph(requestObj: model.GetParagraphRequest): Promise<model.WordsIncomingMessage<model.ParagraphResponse>>;
    /**
     * Represents all the formatting for a paragraph.
     * @param requestObj contains request parameters
     */
    getParagraphFormat(requestObj: model.GetParagraphFormatRequest): Promise<model.WordsIncomingMessage<model.ParagraphFormatResponse>>;
    /**
     * Represents all the formatting for a paragraph.
     * @param requestObj contains request parameters
     */
    getParagraphFormatWithoutNodePath(requestObj: model.GetParagraphFormatWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.ParagraphFormatResponse>>;
    /**
     * This resource represents one of the paragraphs contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraphWithoutNodePath(requestObj: model.GetParagraphWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.ParagraphResponse>>;
    /**
     * Returns a list of paragraphs that are contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraphs(requestObj: model.GetParagraphsRequest): Promise<model.WordsIncomingMessage<model.ParagraphLinkCollectionResponse>>;
    /**
     * Returns a list of paragraphs that are contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraphsWithoutNodePath(requestObj: model.GetParagraphsWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.ParagraphLinkCollectionResponse>>;
    /**
     * Gets the text from the range.
     * @param requestObj contains request parameters
     */
    getRangeText(requestObj: model.GetRangeTextRequest): Promise<model.WordsIncomingMessage<model.RangeTextResponse>>;
    /**
     * This resource represents run of text contained in the document.
     * @param requestObj contains request parameters
     */
    getRun(requestObj: model.GetRunRequest): Promise<model.WordsIncomingMessage<model.RunResponse>>;
    /**
     * This resource represents font of run.
     * @param requestObj contains request parameters
     */
    getRunFont(requestObj: model.GetRunFontRequest): Promise<model.WordsIncomingMessage<model.FontResponse>>;
    /**
     * This resource represents collection of runs in the paragraph.
     * @param requestObj contains request parameters
     */
    getRuns(requestObj: model.GetRunsRequest): Promise<model.WordsIncomingMessage<model.RunsResponse>>;
    /**
     * Gets document section by index.
     * @param requestObj contains request parameters
     */
    getSection(requestObj: model.GetSectionRequest): Promise<model.WordsIncomingMessage<model.SectionResponse>>;
    /**
     * Gets page setup of section.
     * @param requestObj contains request parameters
     */
    getSectionPageSetup(requestObj: model.GetSectionPageSetupRequest): Promise<model.WordsIncomingMessage<model.SectionPageSetupResponse>>;
    /**
     * Returns a list of sections that are contained in the document.
     * @param requestObj contains request parameters
     */
    getSections(requestObj: model.GetSectionsRequest): Promise<model.WordsIncomingMessage<model.SectionLinkCollectionResponse>>;
    /**
     * Returns a table.
     * @param requestObj contains request parameters
     */
    getTable(requestObj: model.GetTableRequest): Promise<model.WordsIncomingMessage<model.TableResponse>>;
    /**
     * Returns a table cell.
     * @param requestObj contains request parameters
     */
    getTableCell(requestObj: model.GetTableCellRequest): Promise<model.WordsIncomingMessage<model.TableCellResponse>>;
    /**
     * Returns a table cell format.
     * @param requestObj contains request parameters
     */
    getTableCellFormat(requestObj: model.GetTableCellFormatRequest): Promise<model.WordsIncomingMessage<model.TableCellFormatResponse>>;
    /**
     * Returns a table properties.
     * @param requestObj contains request parameters
     */
    getTableProperties(requestObj: model.GetTablePropertiesRequest): Promise<model.WordsIncomingMessage<model.TablePropertiesResponse>>;
    /**
     * Returns a table properties.
     * @param requestObj contains request parameters
     */
    getTablePropertiesWithoutNodePath(requestObj: model.GetTablePropertiesWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.TablePropertiesResponse>>;
    /**
     * Returns a table row.
     * @param requestObj contains request parameters
     */
    getTableRow(requestObj: model.GetTableRowRequest): Promise<model.WordsIncomingMessage<model.TableRowResponse>>;
    /**
     * Returns a table row format.
     * @param requestObj contains request parameters
     */
    getTableRowFormat(requestObj: model.GetTableRowFormatRequest): Promise<model.WordsIncomingMessage<model.TableRowFormatResponse>>;
    /**
     * Returns a table.
     * @param requestObj contains request parameters
     */
    getTableWithoutNodePath(requestObj: model.GetTableWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.TableResponse>>;
    /**
     * Returns a list of tables that are contained in the document.
     * @param requestObj contains request parameters
     */
    getTables(requestObj: model.GetTablesRequest): Promise<model.WordsIncomingMessage<model.TableLinkCollectionResponse>>;
    /**
     * Returns a list of tables that are contained in the document.
     * @param requestObj contains request parameters
     */
    getTablesWithoutNodePath(requestObj: model.GetTablesWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.TableLinkCollectionResponse>>;
    /**
     * Adds comment to document, returns inserted comment data.
     * @param requestObj contains request parameters
     */
    insertComment(requestObj: model.InsertCommentRequest): Promise<model.WordsIncomingMessage<model.CommentResponse>>;
    /**
     * Adds drawing object to document, returns added  drawing object's data.
     * @param requestObj contains request parameters
     */
    insertDrawingObject(requestObj: model.InsertDrawingObjectRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Adds drawing object to document, returns added  drawing object's data.
     * @param requestObj contains request parameters
     */
    insertDrawingObjectWithoutNodePath(requestObj: model.InsertDrawingObjectWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Adds field to document, returns inserted field's data.
     * @param requestObj contains request parameters
     */
    insertField(requestObj: model.InsertFieldRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Adds field to document, returns inserted field's data.
     * @param requestObj contains request parameters
     */
    insertFieldWithoutNodePath(requestObj: model.InsertFieldWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Adds footnote to document, returns added footnote's data.
     * @param requestObj contains request parameters
     */
    insertFootnote(requestObj: model.InsertFootnoteRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Adds footnote to document, returns added footnote's data.
     * @param requestObj contains request parameters
     */
    insertFootnoteWithoutNodePath(requestObj: model.InsertFootnoteWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Adds form field to paragraph, returns added form field's data.
     * @param requestObj contains request parameters
     */
    insertFormField(requestObj: model.InsertFormFieldRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Adds form field to paragraph, returns added form field's data.
     * @param requestObj contains request parameters
     */
    insertFormFieldWithoutNodePath(requestObj: model.InsertFormFieldWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Inserts to document header or footer.
     * @param requestObj contains request parameters
     */
    insertHeaderFooter(requestObj: model.InsertHeaderFooterRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Inserts document page numbers.
     * @param requestObj contains request parameters
     */
    insertPageNumbers(requestObj: model.InsertPageNumbersRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Adds paragraph to document, returns added paragraph's data.
     * @param requestObj contains request parameters
     */
    insertParagraph(requestObj: model.InsertParagraphRequest): Promise<model.WordsIncomingMessage<model.ParagraphResponse>>;
    /**
     * Adds run to document, returns added paragraph's data.
     * @param requestObj contains request parameters
     */
    insertRun(requestObj: model.InsertRunRequest): Promise<model.WordsIncomingMessage<model.RunResponse>>;
    /**
     * Adds table to document, returns added table's data.
     * @param requestObj contains request parameters
     */
    insertTable(requestObj: model.InsertTableRequest): Promise<model.WordsIncomingMessage<model.TableResponse>>;
    /**
     * Adds table cell to table, returns added cell's data.
     * @param requestObj contains request parameters
     */
    insertTableCell(requestObj: model.InsertTableCellRequest): Promise<model.WordsIncomingMessage<model.TableCellResponse>>;
    /**
     * Adds table row to table, returns added row's data.
     * @param requestObj contains request parameters
     */
    insertTableRow(requestObj: model.InsertTableRowRequest): Promise<model.WordsIncomingMessage<model.TableRowResponse>>;
    /**
     * Adds table to document, returns added table's data.
     * @param requestObj contains request parameters
     */
    insertTableWithoutNodePath(requestObj: model.InsertTableWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.TableResponse>>;
    /**
     * Inserts document watermark image.
     * @param requestObj contains request parameters
     */
    insertWatermarkImage(requestObj: model.InsertWatermarkImageRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Inserts document watermark text.
     * @param requestObj contains request parameters
     */
    insertWatermarkText(requestObj: model.InsertWatermarkTextRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Loads new document from web into the file with any supported format of data.
     * @param requestObj contains request parameters
     */
    loadWebDocument(requestObj: model.LoadWebDocumentRequest): Promise<model.WordsIncomingMessage<model.SaveResponse>>;
    /**
     * Move file
     * @param requestObj contains request parameters
     */
    moveFile(requestObj: model.MoveFileRequest): Promise<http.IncomingMessage>;
    /**
     * Move folder
     * @param requestObj contains request parameters
     */
    moveFolder(requestObj: model.MoveFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Protects document.
     * @param requestObj contains request parameters
     */
    protectDocument(requestObj: model.ProtectDocumentRequest): Promise<model.WordsIncomingMessage<model.ProtectionDataResponse>>;
    /**
     * Rejects all revisions in document.
     * @param requestObj contains request parameters
     */
    rejectAllRevisions(requestObj: model.RejectAllRevisionsRequest): Promise<model.WordsIncomingMessage<model.RevisionsModificationResponse>>;
    /**
     * Removes the range from the document.
     * @param requestObj contains request parameters
     */
    removeRange(requestObj: model.RemoveRangeRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Renders drawing object to specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObject(requestObj: model.RenderDrawingObjectRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders drawing object to specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObjectWithoutNodePath(requestObj: model.RenderDrawingObjectWithoutNodePathRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders math object to specified format.
     * @param requestObj contains request parameters
     */
    renderMathObject(requestObj: model.RenderMathObjectRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders math object to specified format.
     * @param requestObj contains request parameters
     */
    renderMathObjectWithoutNodePath(requestObj: model.RenderMathObjectWithoutNodePathRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders page to specified format.
     * @param requestObj contains request parameters
     */
    renderPage(requestObj: model.RenderPageRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders paragraph to specified format.
     * @param requestObj contains request parameters
     */
    renderParagraph(requestObj: model.RenderParagraphRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders paragraph to specified format.
     * @param requestObj contains request parameters
     */
    renderParagraphWithoutNodePath(requestObj: model.RenderParagraphWithoutNodePathRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders table to specified format.
     * @param requestObj contains request parameters
     */
    renderTable(requestObj: model.RenderTableRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders table to specified format.
     * @param requestObj contains request parameters
     */
    renderTableWithoutNodePath(requestObj: model.RenderTableWithoutNodePathRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Replaces document text.
     * @param requestObj contains request parameters
     */
    replaceText(requestObj: model.ReplaceTextRequest): Promise<model.WordsIncomingMessage<model.ReplaceTextResponse>>;
    /**
     * Replaces the content in the range.
     * @param requestObj contains request parameters
     */
    replaceWithText(requestObj: model.ReplaceWithTextRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Resets font's cache.
     * @param requestObj contains request parameters
     */
    resetCache(requestObj: model.ResetCacheRequest): Promise<http.IncomingMessage>;
    /**
     * Converts document to destination format with detailed settings and saves result to storage.
     * @param requestObj contains request parameters
     */
    saveAs(requestObj: model.SaveAsRequest): Promise<model.WordsIncomingMessage<model.SaveResponse>>;
    /**
     * Saves the selected range as a new document.
     * @param requestObj contains request parameters
     */
    saveAsRange(requestObj: model.SaveAsRangeRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Converts document to tiff with detailed settings and saves result to storage.
     * @param requestObj contains request parameters
     */
    saveAsTiff(requestObj: model.SaveAsTiffRequest): Promise<model.WordsIncomingMessage<model.SaveResponse>>;
    /**
     * Searches text in document.
     * @param requestObj contains request parameters
     */
    search(requestObj: model.SearchRequest): Promise<model.WordsIncomingMessage<model.SearchResponse>>;
    /**
     * Splits document.
     * @param requestObj contains request parameters
     */
    splitDocument(requestObj: model.SplitDocumentRequest): Promise<model.WordsIncomingMessage<model.SplitDocumentResponse>>;
    /**
     * Unprotects document.
     * @param requestObj contains request parameters
     */
    unprotectDocument(requestObj: model.UnprotectDocumentRequest): Promise<model.WordsIncomingMessage<model.ProtectionDataResponse>>;
    /**
     * Updates document bookmark.
     * @param requestObj contains request parameters
     */
    updateBookmark(requestObj: model.UpdateBookmarkRequest): Promise<model.WordsIncomingMessage<model.BookmarkResponse>>;
    /**
     * Updates border properties.              'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    updateBorder(requestObj: model.UpdateBorderRequest): Promise<model.WordsIncomingMessage<model.BorderResponse>>;
    /**
     * Updates the comment, returns updated comment data.
     * @param requestObj contains request parameters
     */
    updateComment(requestObj: model.UpdateCommentRequest): Promise<model.WordsIncomingMessage<model.CommentResponse>>;
    /**
     * Updates drawing object, returns updated  drawing object's data.
     * @param requestObj contains request parameters
     */
    updateDrawingObject(requestObj: model.UpdateDrawingObjectRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Updates drawing object, returns updated  drawing object's data.
     * @param requestObj contains request parameters
     */
    updateDrawingObjectWithoutNodePath(requestObj: model.UpdateDrawingObjectWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Updates field's properties, returns updated field's data.
     * @param requestObj contains request parameters
     */
    updateField(requestObj: model.UpdateFieldRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Updates (reevaluate) fields in document.
     * @param requestObj contains request parameters
     */
    updateFields(requestObj: model.UpdateFieldsRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Updates footnote's properties, returns updated run's data.
     * @param requestObj contains request parameters
     */
    updateFootnote(requestObj: model.UpdateFootnoteRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Updates footnote's properties, returns updated run's data.
     * @param requestObj contains request parameters
     */
    updateFootnoteWithoutNodePath(requestObj: model.UpdateFootnoteWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Updates properties of form field, returns updated form field.
     * @param requestObj contains request parameters
     */
    updateFormField(requestObj: model.UpdateFormFieldRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Updates properties of form field, returns updated form field.
     * @param requestObj contains request parameters
     */
    updateFormFieldWithoutNodePath(requestObj: model.UpdateFormFieldWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Updates paragraph format properties, returns updated format properties.
     * @param requestObj contains request parameters
     */
    updateParagraphFormat(requestObj: model.UpdateParagraphFormatRequest): Promise<model.WordsIncomingMessage<model.ParagraphFormatResponse>>;
    /**
     * Updates run's properties, returns updated run's data.
     * @param requestObj contains request parameters
     */
    updateRun(requestObj: model.UpdateRunRequest): Promise<model.WordsIncomingMessage<model.RunResponse>>;
    /**
     * Updates font properties, returns updated font data.
     * @param requestObj contains request parameters
     */
    updateRunFont(requestObj: model.UpdateRunFontRequest): Promise<model.WordsIncomingMessage<model.FontResponse>>;
    /**
     * Updates page setup of section.
     * @param requestObj contains request parameters
     */
    updateSectionPageSetup(requestObj: model.UpdateSectionPageSetupRequest): Promise<model.WordsIncomingMessage<model.SectionPageSetupResponse>>;
    /**
     * Updates a table cell format.
     * @param requestObj contains request parameters
     */
    updateTableCellFormat(requestObj: model.UpdateTableCellFormatRequest): Promise<model.WordsIncomingMessage<model.TableCellFormatResponse>>;
    /**
     * Updates a table properties.
     * @param requestObj contains request parameters
     */
    updateTableProperties(requestObj: model.UpdateTablePropertiesRequest): Promise<model.WordsIncomingMessage<model.TablePropertiesResponse>>;
    /**
     * Updates a table properties.
     * @param requestObj contains request parameters
     */
    updateTablePropertiesWithoutNodePath(requestObj: model.UpdateTablePropertiesWithoutNodePathRequest): Promise<model.WordsIncomingMessage<model.TablePropertiesResponse>>;
    /**
     * Updates a table row format.
     * @param requestObj contains request parameters
     */
    updateTableRowFormat(requestObj: model.UpdateTableRowFormatRequest): Promise<model.WordsIncomingMessage<model.TableRowFormatResponse>>;
    /**
     * Upload file
     * @param requestObj contains request parameters
     */
    uploadFile(requestObj: model.UploadFileRequest): Promise<model.WordsIncomingMessage<model.FilesUploadResult>>;
}
