"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("./internal/configuration");
const objectSerializer_1 = require("./internal/objectSerializer");
const requestHelper_1 = require("./internal/requestHelper");
__export(require("./model/model"));
/**
 * Library for communicating with the Aspose.Words Cloud API
 */
class WordsApi {
    /**
     * @param appSID App SID.
     * @param appKey App key.
     * @param baseUrl Base api Url.
     * @param debugMode A value indicating whether debug mode. In debug mode all requests and responses are logged to console.
     */
    constructor(appSID, appKey, baseUrl, debugMode) {
        this.configuration = new configuration_1.Configuration(appSID, appKey, baseUrl, debugMode);
    }
    /**
     * Accepts all revisions in document.
     * @param requestObj contains request parameters
     */
    acceptAllRevisions(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling acceptAllRevisions.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/revisions/acceptAll"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling acceptAllRevisions.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling acceptAllRevisions.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RevisionsModificationResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Appends documents to original document.
     * @param requestObj contains request parameters
     */
    appendDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling appendDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/appendDocument"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling appendDocument.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling appendDocument.');
            }
            // verify required parameter 'requestObj.documentList' is not undefined
            if (requestObj.documentList === undefined) {
                throw new Error('Required parameter "requestObj.documentList" was undefined when calling appendDocument.');
            }
            // verify required parameter 'requestObj.documentList' is not null
            if (requestObj.documentList === null) {
                throw new Error('Required parameter "requestObj.documentList" was null when calling appendDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.documentList, requestObj.documentList.constructor.name === "Object" ? "DocumentEntryList" : requestObj.documentList.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Classifies raw text.
     * @param requestObj contains request parameters
     */
    classify(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling classify.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/classify";
            const queryParameters = {};
            // verify required parameter 'requestObj.text' is not undefined
            if (requestObj.text === undefined) {
                throw new Error('Required parameter "requestObj.text" was undefined when calling classify.');
            }
            // verify required parameter 'requestObj.text' is not null
            if (requestObj.text === null) {
                throw new Error('Required parameter "requestObj.text" was null when calling classify.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "bestClassesCount", requestObj.bestClassesCount);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.text, requestObj.text.constructor.name === "Object" ? "string" : requestObj.text.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ClassificationResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Classifies document.
     * @param requestObj contains request parameters
     */
    classifyDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling classifyDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{documentName}/classify"
                .replace("/{" + "documentName" + "}", (requestObj.documentName !== null) ? "/" + String(requestObj.documentName) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.documentName' is not undefined
            if (requestObj.documentName === undefined) {
                throw new Error('Required parameter "requestObj.documentName" was undefined when calling classifyDocument.');
            }
            // verify required parameter 'requestObj.documentName' is not null
            if (requestObj.documentName === null) {
                throw new Error('Required parameter "requestObj.documentName" was null when calling classifyDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "bestClassesCount", requestObj.bestClassesCount);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "taxonomy", requestObj.taxonomy);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ClassificationResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Compares document with original document.
     * @param requestObj contains request parameters
     */
    compareDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling compareDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/compareDocument"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling compareDocument.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling compareDocument.');
            }
            // verify required parameter 'requestObj.compareData' is not undefined
            if (requestObj.compareData === undefined) {
                throw new Error('Required parameter "requestObj.compareData" was undefined when calling compareDocument.');
            }
            // verify required parameter 'requestObj.compareData' is not null
            if (requestObj.compareData === null) {
                throw new Error('Required parameter "requestObj.compareData" was null when calling compareDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.compareData, requestObj.compareData.constructor.name === "Object" ? "CompareData" : requestObj.compareData.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Converts document from the request's content to the specified format .
     * @param requestObj contains request parameters
     */
    convertDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling convertDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/convert";
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.document' is not undefined
            if (requestObj.document === undefined) {
                throw new Error('Required parameter "requestObj.document" was undefined when calling convertDocument.');
            }
            // verify required parameter 'requestObj.document' is not null
            if (requestObj.document === null) {
                throw new Error('Required parameter "requestObj.document" was null when calling convertDocument.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling convertDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "outPath", requestObj.outPath);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fileNameFieldValue", requestObj.fileNameFieldValue);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            if (requestObj.document !== undefined) {
                formParams.Document = requestObj.document;
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Copy file
     * @param requestObj contains request parameters
     */
    copyFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling copyFile.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/file/copy/{srcPath}"
                .replace("/{" + "srcPath" + "}", (requestObj.srcPath !== null) ? "/" + String(requestObj.srcPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.destPath' is not undefined
            if (requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was undefined when calling copyFile.');
            }
            // verify required parameter 'requestObj.srcPath' is not undefined
            if (requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was undefined when calling copyFile.');
            }
            // verify required parameter 'requestObj.srcPath' is not null
            if (requestObj.srcPath === null) {
                throw new Error('Required parameter "requestObj.srcPath" was null when calling copyFile.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Copy folder
     * @param requestObj contains request parameters
     */
    copyFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling copyFolder.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/folder/copy/{srcPath}"
                .replace("/{" + "srcPath" + "}", (requestObj.srcPath !== null) ? "/" + String(requestObj.srcPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.destPath' is not undefined
            if (requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was undefined when calling copyFolder.');
            }
            // verify required parameter 'requestObj.srcPath' is not undefined
            if (requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was undefined when calling copyFolder.');
            }
            // verify required parameter 'requestObj.srcPath' is not null
            if (requestObj.srcPath === null) {
                throw new Error('Required parameter "requestObj.srcPath" was null when calling copyFolder.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Creates new document. Document is created with format which is recognized from file extensions. Supported extensions: \".doc\", \".docx\", \".docm\", \".dot\", \".dotm\", \".dotx\", \".flatopc\", \".fopc\", \".flatopc_macro\", \".fopc_macro\", \".flatopc_template\", \".fopc_template\", \".flatopc_template_macro\", \".fopc_template_macro\", \".wordml\", \".wml\", \".rtf\".
     * @param requestObj contains request parameters
     */
    createDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling createDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/create";
            const queryParameters = {};
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fileName", requestObj.fileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Create the folder
     * @param requestObj contains request parameters
     */
    createFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling createFolder.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/folder/{path}"
                .replace("/{" + "path" + "}", (requestObj.path !== null) ? "/" + String(requestObj.path) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not undefined
            if (requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was undefined when calling createFolder.');
            }
            // verify required parameter 'requestObj.path' is not null
            if (requestObj.path === null) {
                throw new Error('Required parameter "requestObj.path" was null when calling createFolder.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Adds new or update existing document property.
     * @param requestObj contains request parameters
     */
    createOrUpdateDocumentProperty(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling createOrUpdateDocumentProperty.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties/{propertyName}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "propertyName" + "}", (requestObj.propertyName !== null) ? "/" + String(requestObj.propertyName) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling createOrUpdateDocumentProperty.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling createOrUpdateDocumentProperty.');
            }
            // verify required parameter 'requestObj.propertyName' is not undefined
            if (requestObj.propertyName === undefined) {
                throw new Error('Required parameter "requestObj.propertyName" was undefined when calling createOrUpdateDocumentProperty.');
            }
            // verify required parameter 'requestObj.propertyName' is not null
            if (requestObj.propertyName === null) {
                throw new Error('Required parameter "requestObj.propertyName" was null when calling createOrUpdateDocumentProperty.');
            }
            // verify required parameter 'requestObj.property' is not undefined
            if (requestObj.property === undefined) {
                throw new Error('Required parameter "requestObj.property" was undefined when calling createOrUpdateDocumentProperty.');
            }
            // verify required parameter 'requestObj.property' is not null
            if (requestObj.property === null) {
                throw new Error('Required parameter "requestObj.property" was null when calling createOrUpdateDocumentProperty.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.property, requestObj.property.constructor.name === "Object" ? "DocumentProperty" : requestObj.property.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPropertyResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Resets border properties to default values.              'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    deleteBorder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteBorder.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders/{borderType}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "borderType" + "}", (requestObj.borderType !== null) ? "/" + String(requestObj.borderType) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteBorder.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteBorder.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteBorder.');
            }
            // verify required parameter 'requestObj.borderType' is not undefined
            if (requestObj.borderType === undefined) {
                throw new Error('Required parameter "requestObj.borderType" was undefined when calling deleteBorder.');
            }
            // verify required parameter 'requestObj.borderType' is not null
            if (requestObj.borderType === null) {
                throw new Error('Required parameter "requestObj.borderType" was null when calling deleteBorder.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BorderResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Resets borders properties to default values.              'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    deleteBorders(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteBorders.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteBorders.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteBorders.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteBorders.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BordersResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Removes comment from document.
     * @param requestObj contains request parameters
     */
    deleteComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteComment.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments/{commentIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "commentIndex" + "}", (requestObj.commentIndex !== null) ? "/" + String(requestObj.commentIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteComment.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteComment.');
            }
            // verify required parameter 'requestObj.commentIndex' is not undefined
            if (requestObj.commentIndex === undefined) {
                throw new Error('Required parameter "requestObj.commentIndex" was undefined when calling deleteComment.');
            }
            // verify required parameter 'requestObj.commentIndex' is not null
            if (requestObj.commentIndex === null) {
                throw new Error('Required parameter "requestObj.commentIndex" was null when calling deleteComment.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes document property.
     * @param requestObj contains request parameters
     */
    deleteDocumentProperty(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteDocumentProperty.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties/{propertyName}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "propertyName" + "}", (requestObj.propertyName !== null) ? "/" + String(requestObj.propertyName) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteDocumentProperty.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteDocumentProperty.');
            }
            // verify required parameter 'requestObj.propertyName' is not undefined
            if (requestObj.propertyName === undefined) {
                throw new Error('Required parameter "requestObj.propertyName" was undefined when calling deleteDocumentProperty.');
            }
            // verify required parameter 'requestObj.propertyName' is not null
            if (requestObj.propertyName === null) {
                throw new Error('Required parameter "requestObj.propertyName" was null when calling deleteDocumentProperty.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes drawing object from document.
     * @param requestObj contains request parameters
     */
    deleteDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteDrawingObject.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteDrawingObject.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteDrawingObject.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteDrawingObject.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteDrawingObject.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteDrawingObject.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes drawing object from document.
     * @param requestObj contains request parameters
     */
    deleteDrawingObjectWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteDrawingObjectWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteDrawingObjectWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes field from document.
     * @param requestObj contains request parameters
     */
    deleteField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteField.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteField.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes field from document.
     * @param requestObj contains request parameters
     */
    deleteFieldWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFieldWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/fields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteFieldWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes fields from section paragraph.
     * @param requestObj contains request parameters
     */
    deleteFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFields.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteFields.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteFields.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteFields.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes fields from section paragraph.
     * @param requestObj contains request parameters
     */
    deleteFieldsWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFieldsWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/fields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteFieldsWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteFieldsWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Delete file
     * @param requestObj contains request parameters
     */
    deleteFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFile.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/file/{path}"
                .replace("/{" + "path" + "}", (requestObj.path !== null) ? "/" + String(requestObj.path) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not undefined
            if (requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was undefined when calling deleteFile.');
            }
            // verify required parameter 'requestObj.path' is not null
            if (requestObj.path === null) {
                throw new Error('Required parameter "requestObj.path" was null when calling deleteFile.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Delete folder
     * @param requestObj contains request parameters
     */
    deleteFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFolder.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/folder/{path}"
                .replace("/{" + "path" + "}", (requestObj.path !== null) ? "/" + String(requestObj.path) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not undefined
            if (requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was undefined when calling deleteFolder.');
            }
            // verify required parameter 'requestObj.path' is not null
            if (requestObj.path === null) {
                throw new Error('Required parameter "requestObj.path" was null when calling deleteFolder.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "recursive", requestObj.recursive);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes footnote from document.
     * @param requestObj contains request parameters
     */
    deleteFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFootnote.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteFootnote.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteFootnote.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteFootnote.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteFootnote.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteFootnote.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes footnote from document.
     * @param requestObj contains request parameters
     */
    deleteFootnoteWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFootnoteWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/footnotes/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteFootnoteWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes form field from document.
     * @param requestObj contains request parameters
     */
    deleteFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFormField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteFormField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteFormField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteFormField.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteFormField.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteFormField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes form field from document.
     * @param requestObj contains request parameters
     */
    deleteFormFieldWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFormFieldWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/formfields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteFormFieldWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes header/footer from document.
     * @param requestObj contains request parameters
     */
    deleteHeaderFooter(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteHeaderFooter.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionPath" + "}", (requestObj.sectionPath !== null) ? "/" + String(requestObj.sectionPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteHeaderFooter.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteHeaderFooter.');
            }
            // verify required parameter 'requestObj.sectionPath' is not undefined
            if (requestObj.sectionPath === undefined) {
                throw new Error('Required parameter "requestObj.sectionPath" was undefined when calling deleteHeaderFooter.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteHeaderFooter.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteHeaderFooter.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes document headers and footers.
     * @param requestObj contains request parameters
     */
    deleteHeadersFooters(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteHeadersFooters.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionPath" + "}", (requestObj.sectionPath !== null) ? "/" + String(requestObj.sectionPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteHeadersFooters.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteHeadersFooters.');
            }
            // verify required parameter 'requestObj.sectionPath' is not undefined
            if (requestObj.sectionPath === undefined) {
                throw new Error('Required parameter "requestObj.sectionPath" was undefined when calling deleteHeadersFooters.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "headersFootersTypes", requestObj.headersFootersTypes);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes macros from document.
     * @param requestObj contains request parameters
     */
    deleteMacros(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteMacros.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/macros"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteMacros.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteMacros.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes OfficeMath object from document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteOfficeMathObject.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteOfficeMathObject.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteOfficeMathObject.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteOfficeMathObject.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteOfficeMathObject.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteOfficeMathObject.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes OfficeMath object from document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjectWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteOfficeMathObjectWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/OfficeMathObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteOfficeMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteOfficeMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteOfficeMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteOfficeMathObjectWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes paragraph from section.
     * @param requestObj contains request parameters
     */
    deleteParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteParagraph.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteParagraph.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteParagraph.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteParagraph.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteParagraph.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteParagraph.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes paragraph from section.
     * @param requestObj contains request parameters
     */
    deleteParagraphWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteParagraphWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/paragraphs/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteParagraphWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes run from document.
     * @param requestObj contains request parameters
     */
    deleteRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteRun.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "paragraphPath" + "}", (requestObj.paragraphPath !== null) ? "/" + String(requestObj.paragraphPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteRun.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteRun.');
            }
            // verify required parameter 'requestObj.paragraphPath' is not undefined
            if (requestObj.paragraphPath === undefined) {
                throw new Error('Required parameter "requestObj.paragraphPath" was undefined when calling deleteRun.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteRun.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteRun.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes section from document.
     * @param requestObj contains request parameters
     */
    deleteSection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteSection.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionIndex" + "}", (requestObj.sectionIndex !== null) ? "/" + String(requestObj.sectionIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteSection.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteSection.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not undefined
            if (requestObj.sectionIndex === undefined) {
                throw new Error('Required parameter "requestObj.sectionIndex" was undefined when calling deleteSection.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not null
            if (requestObj.sectionIndex === null) {
                throw new Error('Required parameter "requestObj.sectionIndex" was null when calling deleteSection.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes a table.
     * @param requestObj contains request parameters
     */
    deleteTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteTable.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteTable.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteTable.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling deleteTable.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteTable.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteTable.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes a table cell.
     * @param requestObj contains request parameters
     */
    deleteTableCell(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteTableCell.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tableRowPath" + "}", (requestObj.tableRowPath !== null) ? "/" + String(requestObj.tableRowPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteTableCell.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteTableCell.');
            }
            // verify required parameter 'requestObj.tableRowPath' is not undefined
            if (requestObj.tableRowPath === undefined) {
                throw new Error('Required parameter "requestObj.tableRowPath" was undefined when calling deleteTableCell.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteTableCell.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteTableCell.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes a table row.
     * @param requestObj contains request parameters
     */
    deleteTableRow(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteTableRow.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tablePath" + "}", (requestObj.tablePath !== null) ? "/" + String(requestObj.tablePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteTableRow.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteTableRow.');
            }
            // verify required parameter 'requestObj.tablePath' is not undefined
            if (requestObj.tablePath === undefined) {
                throw new Error('Required parameter "requestObj.tablePath" was undefined when calling deleteTableRow.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteTableRow.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteTableRow.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes a table.
     * @param requestObj contains request parameters
     */
    deleteTableWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteTableWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/tables/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling deleteTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling deleteTableWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Deletes watermark (for deleting last watermark from the document).
     * @param requestObj contains request parameters
     */
    deleteWatermark(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteWatermark.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/watermarks/deleteLast"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling deleteWatermark.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling deleteWatermark.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Download file
     * @param requestObj contains request parameters
     */
    downloadFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling downloadFile.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/file/{path}"
                .replace("/{" + "path" + "}", (requestObj.path !== null) ? "/" + String(requestObj.path) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not undefined
            if (requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was undefined when calling downloadFile.');
            }
            // verify required parameter 'requestObj.path' is not null
            if (requestObj.path === null) {
                throw new Error('Required parameter "requestObj.path" was null when calling downloadFile.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Executes document mail merge operation.
     * @param requestObj contains request parameters
     */
    executeMailMerge(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling executeMailMerge.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/MailMerge"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling executeMailMerge.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling executeMailMerge.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "withRegions", requestObj.withRegions);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "mailMergeDataFile", requestObj.mailMergeDataFile);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "cleanup", requestObj.cleanup);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "useWholeParagraphAsRegion", requestObj.useWholeParagraphAsRegion);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            if (requestObj.data !== undefined) {
                formParams.Data = objectSerializer_1.ObjectSerializer.serialize(requestObj.data, "string");
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Executes document mail merge online.
     * @param requestObj contains request parameters
     */
    executeMailMergeOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling executeMailMergeOnline.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/MailMerge";
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.template' is not undefined
            if (requestObj.template === undefined) {
                throw new Error('Required parameter "requestObj.template" was undefined when calling executeMailMergeOnline.');
            }
            // verify required parameter 'requestObj.template' is not null
            if (requestObj.template === null) {
                throw new Error('Required parameter "requestObj.template" was null when calling executeMailMergeOnline.');
            }
            // verify required parameter 'requestObj.data' is not undefined
            if (requestObj.data === undefined) {
                throw new Error('Required parameter "requestObj.data" was undefined when calling executeMailMergeOnline.');
            }
            // verify required parameter 'requestObj.data' is not null
            if (requestObj.data === null) {
                throw new Error('Required parameter "requestObj.data" was null when calling executeMailMergeOnline.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "withRegions", requestObj.withRegions);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "cleanup", requestObj.cleanup);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "documentFileName", requestObj.documentFileName);
            if (requestObj.template !== undefined) {
                formParams.Template = requestObj.template;
            }
            if (requestObj.data !== undefined) {
                formParams.Data = requestObj.data;
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets the list of fonts, available for document processing.
     * @param requestObj contains request parameters
     */
    getAvailableFonts(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getAvailableFonts.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/fonts/available";
            const queryParameters = {};
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AvailableFontsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document bookmark data by its name.
     * @param requestObj contains request parameters
     */
    getBookmarkByName(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getBookmarkByName.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/bookmarks/{bookmarkName}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "bookmarkName" + "}", (requestObj.bookmarkName !== null) ? "/" + String(requestObj.bookmarkName) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getBookmarkByName.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getBookmarkByName.');
            }
            // verify required parameter 'requestObj.bookmarkName' is not undefined
            if (requestObj.bookmarkName === undefined) {
                throw new Error('Required parameter "requestObj.bookmarkName" was undefined when calling getBookmarkByName.');
            }
            // verify required parameter 'requestObj.bookmarkName' is not null
            if (requestObj.bookmarkName === null) {
                throw new Error('Required parameter "requestObj.bookmarkName" was null when calling getBookmarkByName.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarkResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document bookmarks common info.
     * @param requestObj contains request parameters
     */
    getBookmarks(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getBookmarks.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/bookmarks"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getBookmarks.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getBookmarks.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarksResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a border. 'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    getBorder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getBorder.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders/{borderType}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "borderType" + "}", (requestObj.borderType !== null) ? "/" + String(requestObj.borderType) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getBorder.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getBorder.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getBorder.');
            }
            // verify required parameter 'requestObj.borderType' is not undefined
            if (requestObj.borderType === undefined) {
                throw new Error('Required parameter "requestObj.borderType" was undefined when calling getBorder.');
            }
            // verify required parameter 'requestObj.borderType' is not null
            if (requestObj.borderType === null) {
                throw new Error('Required parameter "requestObj.borderType" was null when calling getBorder.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BorderResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a collection of borders. 'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    getBorders(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getBorders.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getBorders.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getBorders.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getBorders.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BordersResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets comment from document.
     * @param requestObj contains request parameters
     */
    getComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getComment.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments/{commentIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "commentIndex" + "}", (requestObj.commentIndex !== null) ? "/" + String(requestObj.commentIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getComment.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getComment.');
            }
            // verify required parameter 'requestObj.commentIndex' is not undefined
            if (requestObj.commentIndex === undefined) {
                throw new Error('Required parameter "requestObj.commentIndex" was undefined when calling getComment.');
            }
            // verify required parameter 'requestObj.commentIndex' is not null
            if (requestObj.commentIndex === null) {
                throw new Error('Required parameter "requestObj.commentIndex" was null when calling getComment.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CommentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets comments from document.
     * @param requestObj contains request parameters
     */
    getComments(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getComments.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getComments.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getComments.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CommentsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document common info.
     * @param requestObj contains request parameters
     */
    getDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{documentName}"
                .replace("/{" + "documentName" + "}", (requestObj.documentName !== null) ? "/" + String(requestObj.documentName) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.documentName' is not undefined
            if (requestObj.documentName === undefined) {
                throw new Error('Required parameter "requestObj.documentName" was undefined when calling getDocument.');
            }
            // verify required parameter 'requestObj.documentName' is not null
            if (requestObj.documentName === null) {
                throw new Error('Required parameter "requestObj.documentName" was null when calling getDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document drawing object common info by its index or convert to format specified.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndex(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjectByIndex.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjectByIndex.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjectByIndex.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getDocumentDrawingObjectByIndex.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getDocumentDrawingObjectByIndex.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getDocumentDrawingObjectByIndex.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document drawing object common info by its index or convert to format specified.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndexWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjectByIndexWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjectByIndexWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjectByIndexWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getDocumentDrawingObjectByIndexWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getDocumentDrawingObjectByIndexWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads drawing object image data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageData(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjectImageData.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}/imageData"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjectImageData.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjectImageData.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getDocumentDrawingObjectImageData.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getDocumentDrawingObjectImageData.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getDocumentDrawingObjectImageData.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads drawing object image data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageDataWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjectImageDataWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects/{index}/imageData"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjectImageDataWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjectImageDataWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getDocumentDrawingObjectImageDataWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getDocumentDrawingObjectImageDataWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets drawing object OLE data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleData(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjectOleData.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}/oleData"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjectOleData.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjectOleData.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getDocumentDrawingObjectOleData.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getDocumentDrawingObjectOleData.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getDocumentDrawingObjectOleData.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets drawing object OLE data.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleDataWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjectOleDataWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects/{index}/oleData"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjectOleDataWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjectOleDataWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getDocumentDrawingObjectOleDataWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getDocumentDrawingObjectOleDataWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document drawing objects common info.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjects(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjects.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjects.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjects.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getDocumentDrawingObjects.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document drawing objects common info.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectsWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentDrawingObjectsWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentDrawingObjectsWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentDrawingObjectsWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document field names.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNames(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentFieldNames.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/mailMerge/FieldNames"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentFieldNames.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentFieldNames.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "useNonMergeFields", requestObj.useNonMergeFields);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldNamesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document field names.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNamesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentFieldNamesOnline.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/mailMerge/FieldNames";
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.template' is not undefined
            if (requestObj.template === undefined) {
                throw new Error('Required parameter "requestObj.template" was undefined when calling getDocumentFieldNamesOnline.');
            }
            // verify required parameter 'requestObj.template' is not null
            if (requestObj.template === null) {
                throw new Error('Required parameter "requestObj.template" was null when calling getDocumentFieldNamesOnline.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "useNonMergeFields", requestObj.useNonMergeFields);
            if (requestObj.template !== undefined) {
                formParams.Template = requestObj.template;
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldNamesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document hyperlink by its index.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinkByIndex(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentHyperlinkByIndex.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/hyperlinks/{hyperlinkIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "hyperlinkIndex" + "}", (requestObj.hyperlinkIndex !== null) ? "/" + String(requestObj.hyperlinkIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentHyperlinkByIndex.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentHyperlinkByIndex.');
            }
            // verify required parameter 'requestObj.hyperlinkIndex' is not undefined
            if (requestObj.hyperlinkIndex === undefined) {
                throw new Error('Required parameter "requestObj.hyperlinkIndex" was undefined when calling getDocumentHyperlinkByIndex.');
            }
            // verify required parameter 'requestObj.hyperlinkIndex' is not null
            if (requestObj.hyperlinkIndex === null) {
                throw new Error('Required parameter "requestObj.hyperlinkIndex" was null when calling getDocumentHyperlinkByIndex.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HyperlinkResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document hyperlinks common info.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinks(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentHyperlinks.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/hyperlinks"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentHyperlinks.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentHyperlinks.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HyperlinksResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document properties info.
     * @param requestObj contains request parameters
     */
    getDocumentProperties(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentProperties.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentProperties.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentProperties.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPropertiesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document property info by the property name.
     * @param requestObj contains request parameters
     */
    getDocumentProperty(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentProperty.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties/{propertyName}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "propertyName" + "}", (requestObj.propertyName !== null) ? "/" + String(requestObj.propertyName) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentProperty.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentProperty.');
            }
            // verify required parameter 'requestObj.propertyName' is not undefined
            if (requestObj.propertyName === undefined) {
                throw new Error('Required parameter "requestObj.propertyName" was undefined when calling getDocumentProperty.');
            }
            // verify required parameter 'requestObj.propertyName' is not null
            if (requestObj.propertyName === null) {
                throw new Error('Required parameter "requestObj.propertyName" was null when calling getDocumentProperty.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPropertyResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document protection common info.
     * @param requestObj contains request parameters
     */
    getDocumentProtection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentProtection.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/protection"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentProtection.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentProtection.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ProtectionDataResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document statistics.
     * @param requestObj contains request parameters
     */
    getDocumentStatistics(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentStatistics.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/statistics"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentStatistics.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentStatistics.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "includeComments", requestObj.includeComments);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "includeFootnotes", requestObj.includeFootnotes);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "includeTextInShapes", requestObj.includeTextInShapes);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StatDataResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Exports the document into the specified format.
     * @param requestObj contains request parameters
     */
    getDocumentWithFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDocumentWithFormat.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getDocumentWithFormat.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getDocumentWithFormat.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling getDocumentWithFormat.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "outPath", requestObj.outPath);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets field from document.
     * @param requestObj contains request parameters
     */
    getField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getField.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getField.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets field from document.
     * @param requestObj contains request parameters
     */
    getFieldWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFieldWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/fields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getFieldWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Get fields from document.
     * @param requestObj contains request parameters
     */
    getFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFields.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFields.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFields.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getFields.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Get fields from document.
     * @param requestObj contains request parameters
     */
    getFieldsWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFieldsWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/fields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFieldsWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFieldsWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Get all files and folders within a folder
     * @param requestObj contains request parameters
     */
    getFilesList(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFilesList.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/folder/{path}"
                .replace("/{" + "path" + "}", (requestObj.path !== null) ? "/" + String(requestObj.path) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not undefined
            if (requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was undefined when calling getFilesList.');
            }
            // verify required parameter 'requestObj.path' is not null
            if (requestObj.path === null) {
                throw new Error('Required parameter "requestObj.path" was null when calling getFilesList.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FilesList");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads footnote by index.
     * @param requestObj contains request parameters
     */
    getFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFootnote.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFootnote.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFootnote.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getFootnote.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getFootnote.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getFootnote.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnoteResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads footnote by index.
     * @param requestObj contains request parameters
     */
    getFootnoteWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFootnoteWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/footnotes/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getFootnoteWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnoteResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets footnotes from document.
     * @param requestObj contains request parameters
     */
    getFootnotes(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFootnotes.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFootnotes.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFootnotes.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getFootnotes.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnotesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets footnotes from document.
     * @param requestObj contains request parameters
     */
    getFootnotesWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFootnotesWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/footnotes"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFootnotesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFootnotesWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnotesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns representation of an one of the form field.
     * @param requestObj contains request parameters
     */
    getFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFormField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFormField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFormField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getFormField.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getFormField.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getFormField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns representation of an one of the form field.
     * @param requestObj contains request parameters
     */
    getFormFieldWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFormFieldWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/formfields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getFormFieldWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets form fields from document.
     * @param requestObj contains request parameters
     */
    getFormFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFormFields.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFormFields.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFormFields.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getFormFields.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets form fields from document.
     * @param requestObj contains request parameters
     */
    getFormFieldsWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFormFieldsWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/formfields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getFormFieldsWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getFormFieldsWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a header/footer from the document by index.
     * @param requestObj contains request parameters
     */
    getHeaderFooter(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getHeaderFooter.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/headersfooters/{headerFooterIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "headerFooterIndex" + "}", (requestObj.headerFooterIndex !== null) ? "/" + String(requestObj.headerFooterIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getHeaderFooter.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getHeaderFooter.');
            }
            // verify required parameter 'requestObj.headerFooterIndex' is not undefined
            if (requestObj.headerFooterIndex === undefined) {
                throw new Error('Required parameter "requestObj.headerFooterIndex" was undefined when calling getHeaderFooter.');
            }
            // verify required parameter 'requestObj.headerFooterIndex' is not null
            if (requestObj.headerFooterIndex === null) {
                throw new Error('Required parameter "requestObj.headerFooterIndex" was null when calling getHeaderFooter.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "filterByType", requestObj.filterByType);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HeaderFooterResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a header/footer from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOfSection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getHeaderFooterOfSection.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}/headersfooters/{headerFooterIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "headerFooterIndex" + "}", (requestObj.headerFooterIndex !== null) ? "/" + String(requestObj.headerFooterIndex) : "")
                .replace("/{" + "sectionIndex" + "}", (requestObj.sectionIndex !== null) ? "/" + String(requestObj.sectionIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getHeaderFooterOfSection.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getHeaderFooterOfSection.');
            }
            // verify required parameter 'requestObj.headerFooterIndex' is not undefined
            if (requestObj.headerFooterIndex === undefined) {
                throw new Error('Required parameter "requestObj.headerFooterIndex" was undefined when calling getHeaderFooterOfSection.');
            }
            // verify required parameter 'requestObj.headerFooterIndex' is not null
            if (requestObj.headerFooterIndex === null) {
                throw new Error('Required parameter "requestObj.headerFooterIndex" was null when calling getHeaderFooterOfSection.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not undefined
            if (requestObj.sectionIndex === undefined) {
                throw new Error('Required parameter "requestObj.sectionIndex" was undefined when calling getHeaderFooterOfSection.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not null
            if (requestObj.sectionIndex === null) {
                throw new Error('Required parameter "requestObj.sectionIndex" was null when calling getHeaderFooterOfSection.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "filterByType", requestObj.filterByType);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HeaderFooterResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a list of header/footers from the document.
     * @param requestObj contains request parameters
     */
    getHeaderFooters(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getHeaderFooters.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionPath" + "}", (requestObj.sectionPath !== null) ? "/" + String(requestObj.sectionPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getHeaderFooters.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getHeaderFooters.');
            }
            // verify required parameter 'requestObj.sectionPath' is not undefined
            if (requestObj.sectionPath === undefined) {
                throw new Error('Required parameter "requestObj.sectionPath" was undefined when calling getHeaderFooters.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "filterByType", requestObj.filterByType);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HeaderFootersResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads OfficeMath object by index.
     * @param requestObj contains request parameters
     */
    getOfficeMathObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getOfficeMathObject.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getOfficeMathObject.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getOfficeMathObject.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getOfficeMathObject.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getOfficeMathObject.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getOfficeMathObject.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "OfficeMathObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Reads OfficeMath object by index.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getOfficeMathObjectWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/OfficeMathObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getOfficeMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getOfficeMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getOfficeMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getOfficeMathObjectWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "OfficeMathObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets OfficeMath objects from document.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjects(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getOfficeMathObjects.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getOfficeMathObjects.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getOfficeMathObjects.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getOfficeMathObjects.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "OfficeMathObjectsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets OfficeMath objects from document.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectsWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getOfficeMathObjectsWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/OfficeMathObjects"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getOfficeMathObjectsWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getOfficeMathObjectsWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "OfficeMathObjectsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * This resource represents one of the paragraphs contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getParagraph.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getParagraph.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getParagraph.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getParagraph.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getParagraph.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getParagraph.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Represents all the formatting for a paragraph.
     * @param requestObj contains request parameters
     */
    getParagraphFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getParagraphFormat.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}/format"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getParagraphFormat.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getParagraphFormat.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getParagraphFormat.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getParagraphFormat.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getParagraphFormat.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphFormatResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Represents all the formatting for a paragraph.
     * @param requestObj contains request parameters
     */
    getParagraphFormatWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getParagraphFormatWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/paragraphs/{index}/format"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getParagraphFormatWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getParagraphFormatWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getParagraphFormatWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getParagraphFormatWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphFormatResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * This resource represents one of the paragraphs contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraphWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getParagraphWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/paragraphs/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getParagraphWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a list of paragraphs that are contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraphs(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getParagraphs.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getParagraphs.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getParagraphs.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getParagraphs.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphLinkCollectionResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a list of paragraphs that are contained in the document.
     * @param requestObj contains request parameters
     */
    getParagraphsWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getParagraphsWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/paragraphs"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getParagraphsWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getParagraphsWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphLinkCollectionResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets the text from the range.
     * @param requestObj contains request parameters
     */
    getRangeText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getRangeText.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/range/{rangeStartIdentifier}/{rangeEndIdentifier}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "rangeStartIdentifier" + "}", (requestObj.rangeStartIdentifier !== null) ? "/" + String(requestObj.rangeStartIdentifier) : "")
                .replace("/{" + "rangeEndIdentifier" + "}", (requestObj.rangeEndIdentifier !== null) ? "/" + String(requestObj.rangeEndIdentifier) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getRangeText.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getRangeText.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not undefined
            if (requestObj.rangeStartIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was undefined when calling getRangeText.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not null
            if (requestObj.rangeStartIdentifier === null) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was null when calling getRangeText.');
            }
            // verify required parameter 'requestObj.rangeEndIdentifier' is not undefined
            if (requestObj.rangeEndIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeEndIdentifier" was undefined when calling getRangeText.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RangeTextResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * This resource represents run of text contained in the document.
     * @param requestObj contains request parameters
     */
    getRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getRun.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "paragraphPath" + "}", (requestObj.paragraphPath !== null) ? "/" + String(requestObj.paragraphPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getRun.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getRun.');
            }
            // verify required parameter 'requestObj.paragraphPath' is not undefined
            if (requestObj.paragraphPath === undefined) {
                throw new Error('Required parameter "requestObj.paragraphPath" was undefined when calling getRun.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getRun.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getRun.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RunResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * This resource represents font of run.
     * @param requestObj contains request parameters
     */
    getRunFont(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getRunFont.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}/font"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "paragraphPath" + "}", (requestObj.paragraphPath !== null) ? "/" + String(requestObj.paragraphPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getRunFont.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getRunFont.');
            }
            // verify required parameter 'requestObj.paragraphPath' is not undefined
            if (requestObj.paragraphPath === undefined) {
                throw new Error('Required parameter "requestObj.paragraphPath" was undefined when calling getRunFont.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getRunFont.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getRunFont.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FontResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * This resource represents collection of runs in the paragraph.
     * @param requestObj contains request parameters
     */
    getRuns(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getRuns.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "paragraphPath" + "}", (requestObj.paragraphPath !== null) ? "/" + String(requestObj.paragraphPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getRuns.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getRuns.');
            }
            // verify required parameter 'requestObj.paragraphPath' is not undefined
            if (requestObj.paragraphPath === undefined) {
                throw new Error('Required parameter "requestObj.paragraphPath" was undefined when calling getRuns.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RunsResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets document section by index.
     * @param requestObj contains request parameters
     */
    getSection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getSection.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionIndex" + "}", (requestObj.sectionIndex !== null) ? "/" + String(requestObj.sectionIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getSection.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getSection.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not undefined
            if (requestObj.sectionIndex === undefined) {
                throw new Error('Required parameter "requestObj.sectionIndex" was undefined when calling getSection.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not null
            if (requestObj.sectionIndex === null) {
                throw new Error('Required parameter "requestObj.sectionIndex" was null when calling getSection.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SectionResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Gets page setup of section.
     * @param requestObj contains request parameters
     */
    getSectionPageSetup(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getSectionPageSetup.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}/pageSetup"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionIndex" + "}", (requestObj.sectionIndex !== null) ? "/" + String(requestObj.sectionIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getSectionPageSetup.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getSectionPageSetup.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not undefined
            if (requestObj.sectionIndex === undefined) {
                throw new Error('Required parameter "requestObj.sectionIndex" was undefined when calling getSectionPageSetup.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not null
            if (requestObj.sectionIndex === null) {
                throw new Error('Required parameter "requestObj.sectionIndex" was null when calling getSectionPageSetup.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SectionPageSetupResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a list of sections that are contained in the document.
     * @param requestObj contains request parameters
     */
    getSections(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getSections.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getSections.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getSections.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SectionLinkCollectionResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table.
     * @param requestObj contains request parameters
     */
    getTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTable.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTable.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTable.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getTable.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTable.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTable.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table cell.
     * @param requestObj contains request parameters
     */
    getTableCell(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTableCell.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tableRowPath" + "}", (requestObj.tableRowPath !== null) ? "/" + String(requestObj.tableRowPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTableCell.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTableCell.');
            }
            // verify required parameter 'requestObj.tableRowPath' is not undefined
            if (requestObj.tableRowPath === undefined) {
                throw new Error('Required parameter "requestObj.tableRowPath" was undefined when calling getTableCell.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTableCell.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTableCell.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableCellResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table cell format.
     * @param requestObj contains request parameters
     */
    getTableCellFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTableCellFormat.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}/cellformat"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tableRowPath" + "}", (requestObj.tableRowPath !== null) ? "/" + String(requestObj.tableRowPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTableCellFormat.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTableCellFormat.');
            }
            // verify required parameter 'requestObj.tableRowPath' is not undefined
            if (requestObj.tableRowPath === undefined) {
                throw new Error('Required parameter "requestObj.tableRowPath" was undefined when calling getTableCellFormat.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTableCellFormat.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTableCellFormat.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableCellFormatResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table properties.
     * @param requestObj contains request parameters
     */
    getTableProperties(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTableProperties.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}/properties"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTableProperties.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTableProperties.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getTableProperties.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTableProperties.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTableProperties.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TablePropertiesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table properties.
     * @param requestObj contains request parameters
     */
    getTablePropertiesWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTablePropertiesWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/tables/{index}/properties"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTablePropertiesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTablePropertiesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTablePropertiesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTablePropertiesWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TablePropertiesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table row.
     * @param requestObj contains request parameters
     */
    getTableRow(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTableRow.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tablePath" + "}", (requestObj.tablePath !== null) ? "/" + String(requestObj.tablePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTableRow.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTableRow.');
            }
            // verify required parameter 'requestObj.tablePath' is not undefined
            if (requestObj.tablePath === undefined) {
                throw new Error('Required parameter "requestObj.tablePath" was undefined when calling getTableRow.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTableRow.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTableRow.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableRowResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table row format.
     * @param requestObj contains request parameters
     */
    getTableRowFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTableRowFormat.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}/rowformat"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tablePath" + "}", (requestObj.tablePath !== null) ? "/" + String(requestObj.tablePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTableRowFormat.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTableRowFormat.');
            }
            // verify required parameter 'requestObj.tablePath' is not undefined
            if (requestObj.tablePath === undefined) {
                throw new Error('Required parameter "requestObj.tablePath" was undefined when calling getTableRowFormat.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTableRowFormat.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTableRowFormat.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableRowFormatResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a table.
     * @param requestObj contains request parameters
     */
    getTableWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTableWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/tables/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling getTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling getTableWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a list of tables that are contained in the document.
     * @param requestObj contains request parameters
     */
    getTables(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTables.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTables.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTables.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling getTables.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableLinkCollectionResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Returns a list of tables that are contained in the document.
     * @param requestObj contains request parameters
     */
    getTablesWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTablesWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/tables"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling getTablesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling getTablesWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableLinkCollectionResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds comment to document, returns inserted comment data.
     * @param requestObj contains request parameters
     */
    insertComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertComment.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertComment.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertComment.');
            }
            // verify required parameter 'requestObj.comment' is not undefined
            if (requestObj.comment === undefined) {
                throw new Error('Required parameter "requestObj.comment" was undefined when calling insertComment.');
            }
            // verify required parameter 'requestObj.comment' is not null
            if (requestObj.comment === null) {
                throw new Error('Required parameter "requestObj.comment" was null when calling insertComment.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.comment, requestObj.comment.constructor.name === "Object" ? "Comment" : requestObj.comment.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CommentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds drawing object to document, returns added  drawing object's data.
     * @param requestObj contains request parameters
     */
    insertDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertDrawingObject.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertDrawingObject.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertDrawingObject.');
            }
            // verify required parameter 'requestObj.drawingObject' is not undefined
            if (requestObj.drawingObject === undefined) {
                throw new Error('Required parameter "requestObj.drawingObject" was undefined when calling insertDrawingObject.');
            }
            // verify required parameter 'requestObj.drawingObject' is not null
            if (requestObj.drawingObject === null) {
                throw new Error('Required parameter "requestObj.drawingObject" was null when calling insertDrawingObject.');
            }
            // verify required parameter 'requestObj.imageFile' is not undefined
            if (requestObj.imageFile === undefined) {
                throw new Error('Required parameter "requestObj.imageFile" was undefined when calling insertDrawingObject.');
            }
            // verify required parameter 'requestObj.imageFile' is not null
            if (requestObj.imageFile === null) {
                throw new Error('Required parameter "requestObj.imageFile" was null when calling insertDrawingObject.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling insertDrawingObject.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            if (requestObj.drawingObject !== undefined) {
                formParams.DrawingObject = objectSerializer_1.ObjectSerializer.serialize(requestObj.drawingObject, "string");
            }
            if (requestObj.imageFile !== undefined) {
                formParams.ImageFile = requestObj.imageFile;
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds drawing object to document, returns added  drawing object's data.
     * @param requestObj contains request parameters
     */
    insertDrawingObjectWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertDrawingObjectWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.drawingObject' is not undefined
            if (requestObj.drawingObject === undefined) {
                throw new Error('Required parameter "requestObj.drawingObject" was undefined when calling insertDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.drawingObject' is not null
            if (requestObj.drawingObject === null) {
                throw new Error('Required parameter "requestObj.drawingObject" was null when calling insertDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.imageFile' is not undefined
            if (requestObj.imageFile === undefined) {
                throw new Error('Required parameter "requestObj.imageFile" was undefined when calling insertDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.imageFile' is not null
            if (requestObj.imageFile === null) {
                throw new Error('Required parameter "requestObj.imageFile" was null when calling insertDrawingObjectWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            if (requestObj.drawingObject !== undefined) {
                formParams.DrawingObject = objectSerializer_1.ObjectSerializer.serialize(requestObj.drawingObject, "string");
            }
            if (requestObj.imageFile !== undefined) {
                formParams.ImageFile = requestObj.imageFile;
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds field to document, returns inserted field's data.
     * @param requestObj contains request parameters
     */
    insertField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertField.');
            }
            // verify required parameter 'requestObj.field' is not undefined
            if (requestObj.field === undefined) {
                throw new Error('Required parameter "requestObj.field" was undefined when calling insertField.');
            }
            // verify required parameter 'requestObj.field' is not null
            if (requestObj.field === null) {
                throw new Error('Required parameter "requestObj.field" was null when calling insertField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling insertField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "insertBeforeNode", requestObj.insertBeforeNode);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.field, requestObj.field.constructor.name === "Object" ? "Field" : requestObj.field.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds field to document, returns inserted field's data.
     * @param requestObj contains request parameters
     */
    insertFieldWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertFieldWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/fields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.field' is not undefined
            if (requestObj.field === undefined) {
                throw new Error('Required parameter "requestObj.field" was undefined when calling insertFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.field' is not null
            if (requestObj.field === null) {
                throw new Error('Required parameter "requestObj.field" was null when calling insertFieldWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "insertBeforeNode", requestObj.insertBeforeNode);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.field, requestObj.field.constructor.name === "Object" ? "Field" : requestObj.field.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds footnote to document, returns added footnote's data.
     * @param requestObj contains request parameters
     */
    insertFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertFootnote.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertFootnote.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertFootnote.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not undefined
            if (requestObj.footnoteDto === undefined) {
                throw new Error('Required parameter "requestObj.footnoteDto" was undefined when calling insertFootnote.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not null
            if (requestObj.footnoteDto === null) {
                throw new Error('Required parameter "requestObj.footnoteDto" was null when calling insertFootnote.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling insertFootnote.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.footnoteDto, requestObj.footnoteDto.constructor.name === "Object" ? "Footnote" : requestObj.footnoteDto.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnoteResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds footnote to document, returns added footnote's data.
     * @param requestObj contains request parameters
     */
    insertFootnoteWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertFootnoteWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/footnotes"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not undefined
            if (requestObj.footnoteDto === undefined) {
                throw new Error('Required parameter "requestObj.footnoteDto" was undefined when calling insertFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not null
            if (requestObj.footnoteDto === null) {
                throw new Error('Required parameter "requestObj.footnoteDto" was null when calling insertFootnoteWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.footnoteDto, requestObj.footnoteDto.constructor.name === "Object" ? "Footnote" : requestObj.footnoteDto.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnoteResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds form field to paragraph, returns added form field's data.
     * @param requestObj contains request parameters
     */
    insertFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertFormField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertFormField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertFormField.');
            }
            // verify required parameter 'requestObj.formField' is not undefined
            if (requestObj.formField === undefined) {
                throw new Error('Required parameter "requestObj.formField" was undefined when calling insertFormField.');
            }
            // verify required parameter 'requestObj.formField' is not null
            if (requestObj.formField === null) {
                throw new Error('Required parameter "requestObj.formField" was null when calling insertFormField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling insertFormField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "insertBeforeNode", requestObj.insertBeforeNode);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.formField, requestObj.formField.constructor.name === "Object" ? "FormField" : requestObj.formField.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds form field to paragraph, returns added form field's data.
     * @param requestObj contains request parameters
     */
    insertFormFieldWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertFormFieldWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/formfields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.formField' is not undefined
            if (requestObj.formField === undefined) {
                throw new Error('Required parameter "requestObj.formField" was undefined when calling insertFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.formField' is not null
            if (requestObj.formField === null) {
                throw new Error('Required parameter "requestObj.formField" was null when calling insertFormFieldWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "insertBeforeNode", requestObj.insertBeforeNode);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.formField, requestObj.formField.constructor.name === "Object" ? "FormField" : requestObj.formField.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts to document header or footer.
     * @param requestObj contains request parameters
     */
    insertHeaderFooter(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertHeaderFooter.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionPath" + "}", (requestObj.sectionPath !== null) ? "/" + String(requestObj.sectionPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertHeaderFooter.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertHeaderFooter.');
            }
            // verify required parameter 'requestObj.headerFooterType' is not undefined
            if (requestObj.headerFooterType === undefined) {
                throw new Error('Required parameter "requestObj.headerFooterType" was undefined when calling insertHeaderFooter.');
            }
            // verify required parameter 'requestObj.headerFooterType' is not null
            if (requestObj.headerFooterType === null) {
                throw new Error('Required parameter "requestObj.headerFooterType" was null when calling insertHeaderFooter.');
            }
            // verify required parameter 'requestObj.sectionPath' is not undefined
            if (requestObj.sectionPath === undefined) {
                throw new Error('Required parameter "requestObj.sectionPath" was undefined when calling insertHeaderFooter.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.headerFooterType, requestObj.headerFooterType.constructor.name === "Object" ? "string" : requestObj.headerFooterType.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HeaderFooterResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts document page numbers.
     * @param requestObj contains request parameters
     */
    insertPageNumbers(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertPageNumbers.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/PageNumbers"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertPageNumbers.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertPageNumbers.');
            }
            // verify required parameter 'requestObj.pageNumber' is not undefined
            if (requestObj.pageNumber === undefined) {
                throw new Error('Required parameter "requestObj.pageNumber" was undefined when calling insertPageNumbers.');
            }
            // verify required parameter 'requestObj.pageNumber' is not null
            if (requestObj.pageNumber === null) {
                throw new Error('Required parameter "requestObj.pageNumber" was null when calling insertPageNumbers.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.pageNumber, requestObj.pageNumber.constructor.name === "Object" ? "PageNumber" : requestObj.pageNumber.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds paragraph to document, returns added paragraph's data.
     * @param requestObj contains request parameters
     */
    insertParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertParagraph.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertParagraph.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertParagraph.');
            }
            // verify required parameter 'requestObj.paragraph' is not undefined
            if (requestObj.paragraph === undefined) {
                throw new Error('Required parameter "requestObj.paragraph" was undefined when calling insertParagraph.');
            }
            // verify required parameter 'requestObj.paragraph' is not null
            if (requestObj.paragraph === null) {
                throw new Error('Required parameter "requestObj.paragraph" was null when calling insertParagraph.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling insertParagraph.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "insertBeforeNode", requestObj.insertBeforeNode);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.paragraph, requestObj.paragraph.constructor.name === "Object" ? "ParagraphInsert" : requestObj.paragraph.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds run to document, returns added paragraph's data.
     * @param requestObj contains request parameters
     */
    insertRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertRun.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "paragraphPath" + "}", (requestObj.paragraphPath !== null) ? "/" + String(requestObj.paragraphPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertRun.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertRun.');
            }
            // verify required parameter 'requestObj.paragraphPath' is not undefined
            if (requestObj.paragraphPath === undefined) {
                throw new Error('Required parameter "requestObj.paragraphPath" was undefined when calling insertRun.');
            }
            // verify required parameter 'requestObj.run' is not undefined
            if (requestObj.run === undefined) {
                throw new Error('Required parameter "requestObj.run" was undefined when calling insertRun.');
            }
            // verify required parameter 'requestObj.run' is not null
            if (requestObj.run === null) {
                throw new Error('Required parameter "requestObj.run" was null when calling insertRun.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "insertBeforeNode", requestObj.insertBeforeNode);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.run, requestObj.run.constructor.name === "Object" ? "Run" : requestObj.run.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RunResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds table to document, returns added table's data.
     * @param requestObj contains request parameters
     */
    insertTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertTable.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertTable.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertTable.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling insertTable.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.table, requestObj.table.constructor.name === "Object" ? "TableInsert" : requestObj.table.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds table cell to table, returns added cell's data.
     * @param requestObj contains request parameters
     */
    insertTableCell(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertTableCell.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tableRowPath" + "}", (requestObj.tableRowPath !== null) ? "/" + String(requestObj.tableRowPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertTableCell.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertTableCell.');
            }
            // verify required parameter 'requestObj.tableRowPath' is not undefined
            if (requestObj.tableRowPath === undefined) {
                throw new Error('Required parameter "requestObj.tableRowPath" was undefined when calling insertTableCell.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.cell, requestObj.cell.constructor.name === "Object" ? "TableCellInsert" : requestObj.cell.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableCellResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds table row to table, returns added row's data.
     * @param requestObj contains request parameters
     */
    insertTableRow(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertTableRow.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tablePath" + "}", (requestObj.tablePath !== null) ? "/" + String(requestObj.tablePath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertTableRow.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertTableRow.');
            }
            // verify required parameter 'requestObj.tablePath' is not undefined
            if (requestObj.tablePath === undefined) {
                throw new Error('Required parameter "requestObj.tablePath" was undefined when calling insertTableRow.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.row, requestObj.row.constructor.name === "Object" ? "TableRowInsert" : requestObj.row.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableRowResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Adds table to document, returns added table's data.
     * @param requestObj contains request parameters
     */
    insertTableWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertTableWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/tables"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertTableWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.table, requestObj.table.constructor.name === "Object" ? "TableInsert" : requestObj.table.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts document watermark image.
     * @param requestObj contains request parameters
     */
    insertWatermarkImage(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertWatermarkImage.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/watermarks/images"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertWatermarkImage.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertWatermarkImage.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "rotationAngle", requestObj.rotationAngle);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "image", requestObj.image);
            if (requestObj.imageFile !== undefined) {
                formParams.ImageFile = requestObj.imageFile;
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts document watermark text.
     * @param requestObj contains request parameters
     */
    insertWatermarkText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling insertWatermarkText.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/watermarks/texts"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling insertWatermarkText.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling insertWatermarkText.');
            }
            // verify required parameter 'requestObj.watermarkText' is not undefined
            if (requestObj.watermarkText === undefined) {
                throw new Error('Required parameter "requestObj.watermarkText" was undefined when calling insertWatermarkText.');
            }
            // verify required parameter 'requestObj.watermarkText' is not null
            if (requestObj.watermarkText === null) {
                throw new Error('Required parameter "requestObj.watermarkText" was null when calling insertWatermarkText.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.watermarkText, requestObj.watermarkText.constructor.name === "Object" ? "WatermarkText" : requestObj.watermarkText.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Loads new document from web into the file with any supported format of data.
     * @param requestObj contains request parameters
     */
    loadWebDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling loadWebDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/loadWebDocument";
            const queryParameters = {};
            // verify required parameter 'requestObj.data' is not undefined
            if (requestObj.data === undefined) {
                throw new Error('Required parameter "requestObj.data" was undefined when calling loadWebDocument.');
            }
            // verify required parameter 'requestObj.data' is not null
            if (requestObj.data === null) {
                throw new Error('Required parameter "requestObj.data" was null when calling loadWebDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.data, requestObj.data.constructor.name === "Object" ? "LoadWebDocumentData" : requestObj.data.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SaveResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Move file
     * @param requestObj contains request parameters
     */
    moveFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling moveFile.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/file/move/{srcPath}"
                .replace("/{" + "srcPath" + "}", (requestObj.srcPath !== null) ? "/" + String(requestObj.srcPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.destPath' is not undefined
            if (requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was undefined when calling moveFile.');
            }
            // verify required parameter 'requestObj.srcPath' is not undefined
            if (requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was undefined when calling moveFile.');
            }
            // verify required parameter 'requestObj.srcPath' is not null
            if (requestObj.srcPath === null) {
                throw new Error('Required parameter "requestObj.srcPath" was null when calling moveFile.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Move folder
     * @param requestObj contains request parameters
     */
    moveFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling moveFolder.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/folder/move/{srcPath}"
                .replace("/{" + "srcPath" + "}", (requestObj.srcPath !== null) ? "/" + String(requestObj.srcPath) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.destPath' is not undefined
            if (requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was undefined when calling moveFolder.');
            }
            // verify required parameter 'requestObj.srcPath' is not undefined
            if (requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was undefined when calling moveFolder.');
            }
            // verify required parameter 'requestObj.srcPath' is not null
            if (requestObj.srcPath === null) {
                throw new Error('Required parameter "requestObj.srcPath" was null when calling moveFolder.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Protects document.
     * @param requestObj contains request parameters
     */
    protectDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling protectDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/protection"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling protectDocument.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling protectDocument.');
            }
            // verify required parameter 'requestObj.protectionRequest' is not undefined
            if (requestObj.protectionRequest === undefined) {
                throw new Error('Required parameter "requestObj.protectionRequest" was undefined when calling protectDocument.');
            }
            // verify required parameter 'requestObj.protectionRequest' is not null
            if (requestObj.protectionRequest === null) {
                throw new Error('Required parameter "requestObj.protectionRequest" was null when calling protectDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.protectionRequest, requestObj.protectionRequest.constructor.name === "Object" ? "ProtectionRequest" : requestObj.protectionRequest.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ProtectionDataResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Rejects all revisions in document.
     * @param requestObj contains request parameters
     */
    rejectAllRevisions(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling rejectAllRevisions.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/revisions/rejectAll"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling rejectAllRevisions.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling rejectAllRevisions.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RevisionsModificationResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Removes the range from the document.
     * @param requestObj contains request parameters
     */
    removeRange(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling removeRange.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/range/{rangeStartIdentifier}/{rangeEndIdentifier}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "rangeStartIdentifier" + "}", (requestObj.rangeStartIdentifier !== null) ? "/" + String(requestObj.rangeStartIdentifier) : "")
                .replace("/{" + "rangeEndIdentifier" + "}", (requestObj.rangeEndIdentifier !== null) ? "/" + String(requestObj.rangeEndIdentifier) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling removeRange.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling removeRange.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not undefined
            if (requestObj.rangeStartIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was undefined when calling removeRange.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not null
            if (requestObj.rangeStartIdentifier === null) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was null when calling removeRange.');
            }
            // verify required parameter 'requestObj.rangeEndIdentifier' is not undefined
            if (requestObj.rangeEndIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeEndIdentifier" was undefined when calling removeRange.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders drawing object to specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderDrawingObject.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderDrawingObject.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderDrawingObject.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderDrawingObject.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling renderDrawingObject.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderDrawingObject.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderDrawingObject.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders drawing object to specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObjectWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderDrawingObjectWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderDrawingObjectWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders math object to specified format.
     * @param requestObj contains request parameters
     */
    renderMathObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderMathObject.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderMathObject.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderMathObject.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderMathObject.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling renderMathObject.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderMathObject.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderMathObject.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders math object to specified format.
     * @param requestObj contains request parameters
     */
    renderMathObjectWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderMathObjectWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/OfficeMathObjects/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderMathObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderMathObjectWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders page to specified format.
     * @param requestObj contains request parameters
     */
    renderPage(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderPage.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/pages/{pageIndex}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "pageIndex" + "}", (requestObj.pageIndex !== null) ? "/" + String(requestObj.pageIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderPage.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderPage.');
            }
            // verify required parameter 'requestObj.pageIndex' is not undefined
            if (requestObj.pageIndex === undefined) {
                throw new Error('Required parameter "requestObj.pageIndex" was undefined when calling renderPage.');
            }
            // verify required parameter 'requestObj.pageIndex' is not null
            if (requestObj.pageIndex === null) {
                throw new Error('Required parameter "requestObj.pageIndex" was null when calling renderPage.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderPage.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders paragraph to specified format.
     * @param requestObj contains request parameters
     */
    renderParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderParagraph.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderParagraph.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderParagraph.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderParagraph.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling renderParagraph.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderParagraph.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderParagraph.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders paragraph to specified format.
     * @param requestObj contains request parameters
     */
    renderParagraphWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderParagraphWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/paragraphs/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderParagraphWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderParagraphWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders table to specified format.
     * @param requestObj contains request parameters
     */
    renderTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderTable.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderTable.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderTable.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderTable.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling renderTable.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderTable.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderTable.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Renders table to specified format.
     * @param requestObj contains request parameters
     */
    renderTableWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling renderTableWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/tables/{index}/render"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling renderTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling renderTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.format' is not undefined
            if (requestObj.format === undefined) {
                throw new Error('Required parameter "requestObj.format" was undefined when calling renderTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling renderTableWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling renderTableWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Replaces document text.
     * @param requestObj contains request parameters
     */
    replaceText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling replaceText.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/replaceText"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling replaceText.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling replaceText.');
            }
            // verify required parameter 'requestObj.replaceText' is not undefined
            if (requestObj.replaceText === undefined) {
                throw new Error('Required parameter "requestObj.replaceText" was undefined when calling replaceText.');
            }
            // verify required parameter 'requestObj.replaceText' is not null
            if (requestObj.replaceText === null) {
                throw new Error('Required parameter "requestObj.replaceText" was null when calling replaceText.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.replaceText, requestObj.replaceText.constructor.name === "Object" ? "ReplaceTextParameters" : requestObj.replaceText.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ReplaceTextResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Replaces the content in the range.
     * @param requestObj contains request parameters
     */
    replaceWithText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling replaceWithText.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/range/{rangeStartIdentifier}/{rangeEndIdentifier}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "rangeStartIdentifier" + "}", (requestObj.rangeStartIdentifier !== null) ? "/" + String(requestObj.rangeStartIdentifier) : "")
                .replace("/{" + "rangeEndIdentifier" + "}", (requestObj.rangeEndIdentifier !== null) ? "/" + String(requestObj.rangeEndIdentifier) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling replaceWithText.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling replaceWithText.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not undefined
            if (requestObj.rangeStartIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was undefined when calling replaceWithText.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not null
            if (requestObj.rangeStartIdentifier === null) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was null when calling replaceWithText.');
            }
            // verify required parameter 'requestObj.rangeText' is not undefined
            if (requestObj.rangeText === undefined) {
                throw new Error('Required parameter "requestObj.rangeText" was undefined when calling replaceWithText.');
            }
            // verify required parameter 'requestObj.rangeText' is not null
            if (requestObj.rangeText === null) {
                throw new Error('Required parameter "requestObj.rangeText" was null when calling replaceWithText.');
            }
            // verify required parameter 'requestObj.rangeEndIdentifier' is not undefined
            if (requestObj.rangeEndIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeEndIdentifier" was undefined when calling replaceWithText.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.rangeText, requestObj.rangeText.constructor.name === "Object" ? "ReplaceRange" : requestObj.rangeText.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Resets font's cache.
     * @param requestObj contains request parameters
     */
    resetCache(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling resetCache.');
            }
            const localVarPath = this.configuration.getApiBaseUrl() + "/words/fonts/cache";
            const queryParameters = {};
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Converts document to destination format with detailed settings and saves result to storage.
     * @param requestObj contains request parameters
     */
    saveAs(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling saveAs.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/saveAs"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling saveAs.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling saveAs.');
            }
            // verify required parameter 'requestObj.saveOptionsData' is not undefined
            if (requestObj.saveOptionsData === undefined) {
                throw new Error('Required parameter "requestObj.saveOptionsData" was undefined when calling saveAs.');
            }
            // verify required parameter 'requestObj.saveOptionsData' is not null
            if (requestObj.saveOptionsData === null) {
                throw new Error('Required parameter "requestObj.saveOptionsData" was null when calling saveAs.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.saveOptionsData, requestObj.saveOptionsData.constructor.name === "Object" ? "SaveOptionsData" : requestObj.saveOptionsData.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SaveResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Saves the selected range as a new document.
     * @param requestObj contains request parameters
     */
    saveAsRange(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling saveAsRange.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/range/{rangeStartIdentifier}/{rangeEndIdentifier}/SaveAs"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "rangeStartIdentifier" + "}", (requestObj.rangeStartIdentifier !== null) ? "/" + String(requestObj.rangeStartIdentifier) : "")
                .replace("/{" + "rangeEndIdentifier" + "}", (requestObj.rangeEndIdentifier !== null) ? "/" + String(requestObj.rangeEndIdentifier) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling saveAsRange.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling saveAsRange.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not undefined
            if (requestObj.rangeStartIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was undefined when calling saveAsRange.');
            }
            // verify required parameter 'requestObj.rangeStartIdentifier' is not null
            if (requestObj.rangeStartIdentifier === null) {
                throw new Error('Required parameter "requestObj.rangeStartIdentifier" was null when calling saveAsRange.');
            }
            // verify required parameter 'requestObj.documentParameters' is not undefined
            if (requestObj.documentParameters === undefined) {
                throw new Error('Required parameter "requestObj.documentParameters" was undefined when calling saveAsRange.');
            }
            // verify required parameter 'requestObj.documentParameters' is not null
            if (requestObj.documentParameters === null) {
                throw new Error('Required parameter "requestObj.documentParameters" was null when calling saveAsRange.');
            }
            // verify required parameter 'requestObj.rangeEndIdentifier' is not undefined
            if (requestObj.rangeEndIdentifier === undefined) {
                throw new Error('Required parameter "requestObj.rangeEndIdentifier" was undefined when calling saveAsRange.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.documentParameters, requestObj.documentParameters.constructor.name === "Object" ? "RangeDocument" : requestObj.documentParameters.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Converts document to tiff with detailed settings and saves result to storage.
     * @param requestObj contains request parameters
     */
    saveAsTiff(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling saveAsTiff.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/saveAs/tiff"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling saveAsTiff.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling saveAsTiff.');
            }
            // verify required parameter 'requestObj.saveOptions' is not undefined
            if (requestObj.saveOptions === undefined) {
                throw new Error('Required parameter "requestObj.saveOptions" was undefined when calling saveAsTiff.');
            }
            // verify required parameter 'requestObj.saveOptions' is not null
            if (requestObj.saveOptions === null) {
                throw new Error('Required parameter "requestObj.saveOptions" was null when calling saveAsTiff.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "useAntiAliasing", requestObj.useAntiAliasing);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "useHighQualityRendering", requestObj.useHighQualityRendering);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "imageBrightness", requestObj.imageBrightness);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "imageColorMode", requestObj.imageColorMode);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "imageContrast", requestObj.imageContrast);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "numeralFormat", requestObj.numeralFormat);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "pageCount", requestObj.pageCount);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "pageIndex", requestObj.pageIndex);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "paperColor", requestObj.paperColor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "pixelFormat", requestObj.pixelFormat);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "resolution", requestObj.resolution);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "scale", requestObj.scale);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "tiffCompression", requestObj.tiffCompression);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "dmlRenderingMode", requestObj.dmlRenderingMode);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "dmlEffectsRenderingMode", requestObj.dmlEffectsRenderingMode);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "tiffBinarizationMethod", requestObj.tiffBinarizationMethod);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "zipOutput", requestObj.zipOutput);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.saveOptions, requestObj.saveOptions.constructor.name === "Object" ? "TiffSaveOptionsData" : requestObj.saveOptions.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SaveResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Searches text in document.
     * @param requestObj contains request parameters
     */
    search(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling search.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/search"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling search.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling search.');
            }
            // verify required parameter 'requestObj.pattern' is not undefined
            if (requestObj.pattern === undefined) {
                throw new Error('Required parameter "requestObj.pattern" was undefined when calling search.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "pattern", requestObj.pattern);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SearchResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Splits document.
     * @param requestObj contains request parameters
     */
    splitDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling splitDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/split"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling splitDocument.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling splitDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "format", requestObj.format);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "from", requestObj.from);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "to", requestObj.to);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "zipOutput", requestObj.zipOutput);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "fontsLocation", requestObj.fontsLocation);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SplitDocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Unprotects document.
     * @param requestObj contains request parameters
     */
    unprotectDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling unprotectDocument.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/protection"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling unprotectDocument.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling unprotectDocument.');
            }
            // verify required parameter 'requestObj.protectionRequest' is not undefined
            if (requestObj.protectionRequest === undefined) {
                throw new Error('Required parameter "requestObj.protectionRequest" was undefined when calling unprotectDocument.');
            }
            // verify required parameter 'requestObj.protectionRequest' is not null
            if (requestObj.protectionRequest === null) {
                throw new Error('Required parameter "requestObj.protectionRequest" was null when calling unprotectDocument.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.protectionRequest, requestObj.protectionRequest.constructor.name === "Object" ? "ProtectionRequest" : requestObj.protectionRequest.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ProtectionDataResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates document bookmark.
     * @param requestObj contains request parameters
     */
    updateBookmark(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateBookmark.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/bookmarks/{bookmarkName}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "bookmarkName" + "}", (requestObj.bookmarkName !== null) ? "/" + String(requestObj.bookmarkName) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateBookmark.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateBookmark.');
            }
            // verify required parameter 'requestObj.bookmarkData' is not undefined
            if (requestObj.bookmarkData === undefined) {
                throw new Error('Required parameter "requestObj.bookmarkData" was undefined when calling updateBookmark.');
            }
            // verify required parameter 'requestObj.bookmarkData' is not null
            if (requestObj.bookmarkData === null) {
                throw new Error('Required parameter "requestObj.bookmarkData" was null when calling updateBookmark.');
            }
            // verify required parameter 'requestObj.bookmarkName' is not undefined
            if (requestObj.bookmarkName === undefined) {
                throw new Error('Required parameter "requestObj.bookmarkName" was undefined when calling updateBookmark.');
            }
            // verify required parameter 'requestObj.bookmarkName' is not null
            if (requestObj.bookmarkName === null) {
                throw new Error('Required parameter "requestObj.bookmarkName" was null when calling updateBookmark.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.bookmarkData, requestObj.bookmarkData.constructor.name === "Object" ? "BookmarkData" : requestObj.bookmarkData.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarkResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates border properties.              'nodePath' should refer to paragraph, cell or row.
     * @param requestObj contains request parameters
     */
    updateBorder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateBorder.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders/{borderType}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "borderType" + "}", (requestObj.borderType !== null) ? "/" + String(requestObj.borderType) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateBorder.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateBorder.');
            }
            // verify required parameter 'requestObj.borderProperties' is not undefined
            if (requestObj.borderProperties === undefined) {
                throw new Error('Required parameter "requestObj.borderProperties" was undefined when calling updateBorder.');
            }
            // verify required parameter 'requestObj.borderProperties' is not null
            if (requestObj.borderProperties === null) {
                throw new Error('Required parameter "requestObj.borderProperties" was null when calling updateBorder.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling updateBorder.');
            }
            // verify required parameter 'requestObj.borderType' is not undefined
            if (requestObj.borderType === undefined) {
                throw new Error('Required parameter "requestObj.borderType" was undefined when calling updateBorder.');
            }
            // verify required parameter 'requestObj.borderType' is not null
            if (requestObj.borderType === null) {
                throw new Error('Required parameter "requestObj.borderType" was null when calling updateBorder.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.borderProperties, requestObj.borderProperties.constructor.name === "Object" ? "Border" : requestObj.borderProperties.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BorderResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the comment, returns updated comment data.
     * @param requestObj contains request parameters
     */
    updateComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateComment.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments/{commentIndex}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "commentIndex" + "}", (requestObj.commentIndex !== null) ? "/" + String(requestObj.commentIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateComment.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateComment.');
            }
            // verify required parameter 'requestObj.commentIndex' is not undefined
            if (requestObj.commentIndex === undefined) {
                throw new Error('Required parameter "requestObj.commentIndex" was undefined when calling updateComment.');
            }
            // verify required parameter 'requestObj.commentIndex' is not null
            if (requestObj.commentIndex === null) {
                throw new Error('Required parameter "requestObj.commentIndex" was null when calling updateComment.');
            }
            // verify required parameter 'requestObj.comment' is not undefined
            if (requestObj.comment === undefined) {
                throw new Error('Required parameter "requestObj.comment" was undefined when calling updateComment.');
            }
            // verify required parameter 'requestObj.comment' is not null
            if (requestObj.comment === null) {
                throw new Error('Required parameter "requestObj.comment" was null when calling updateComment.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.comment, requestObj.comment.constructor.name === "Object" ? "Comment" : requestObj.comment.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CommentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates drawing object, returns updated  drawing object's data.
     * @param requestObj contains request parameters
     */
    updateDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateDrawingObject.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.drawingObject' is not undefined
            if (requestObj.drawingObject === undefined) {
                throw new Error('Required parameter "requestObj.drawingObject" was undefined when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.drawingObject' is not null
            if (requestObj.drawingObject === null) {
                throw new Error('Required parameter "requestObj.drawingObject" was null when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.imageFile' is not undefined
            if (requestObj.imageFile === undefined) {
                throw new Error('Required parameter "requestObj.imageFile" was undefined when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.imageFile' is not null
            if (requestObj.imageFile === null) {
                throw new Error('Required parameter "requestObj.imageFile" was null when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateDrawingObject.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateDrawingObject.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            if (requestObj.drawingObject !== undefined) {
                formParams.DrawingObject = objectSerializer_1.ObjectSerializer.serialize(requestObj.drawingObject, "string");
            }
            if (requestObj.imageFile !== undefined) {
                formParams.ImageFile = requestObj.imageFile;
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates drawing object, returns updated  drawing object's data.
     * @param requestObj contains request parameters
     */
    updateDrawingObjectWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateDrawingObjectWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/drawingObjects/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.drawingObject' is not undefined
            if (requestObj.drawingObject === undefined) {
                throw new Error('Required parameter "requestObj.drawingObject" was undefined when calling updateDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.drawingObject' is not null
            if (requestObj.drawingObject === null) {
                throw new Error('Required parameter "requestObj.drawingObject" was null when calling updateDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.imageFile' is not undefined
            if (requestObj.imageFile === undefined) {
                throw new Error('Required parameter "requestObj.imageFile" was undefined when calling updateDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.imageFile' is not null
            if (requestObj.imageFile === null) {
                throw new Error('Required parameter "requestObj.imageFile" was null when calling updateDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateDrawingObjectWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateDrawingObjectWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            if (requestObj.drawingObject !== undefined) {
                formParams.DrawingObject = objectSerializer_1.ObjectSerializer.serialize(requestObj.drawingObject, "string");
            }
            if (requestObj.imageFile !== undefined) {
                formParams.ImageFile = requestObj.imageFile;
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates field's properties, returns updated field's data.
     * @param requestObj contains request parameters
     */
    updateField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateField.');
            }
            // verify required parameter 'requestObj.field' is not undefined
            if (requestObj.field === undefined) {
                throw new Error('Required parameter "requestObj.field" was undefined when calling updateField.');
            }
            // verify required parameter 'requestObj.field' is not null
            if (requestObj.field === null) {
                throw new Error('Required parameter "requestObj.field" was null when calling updateField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling updateField.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateField.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.field, requestObj.field.constructor.name === "Object" ? "Field" : requestObj.field.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates (reevaluate) fields in document.
     * @param requestObj contains request parameters
     */
    updateFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateFields.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/updateFields"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateFields.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateFields.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates footnote's properties, returns updated run's data.
     * @param requestObj contains request parameters
     */
    updateFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateFootnote.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateFootnote.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateFootnote.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not undefined
            if (requestObj.footnoteDto === undefined) {
                throw new Error('Required parameter "requestObj.footnoteDto" was undefined when calling updateFootnote.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not null
            if (requestObj.footnoteDto === null) {
                throw new Error('Required parameter "requestObj.footnoteDto" was null when calling updateFootnote.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling updateFootnote.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateFootnote.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateFootnote.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.footnoteDto, requestObj.footnoteDto.constructor.name === "Object" ? "Footnote" : requestObj.footnoteDto.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnoteResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates footnote's properties, returns updated run's data.
     * @param requestObj contains request parameters
     */
    updateFootnoteWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateFootnoteWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/footnotes/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not undefined
            if (requestObj.footnoteDto === undefined) {
                throw new Error('Required parameter "requestObj.footnoteDto" was undefined when calling updateFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.footnoteDto' is not null
            if (requestObj.footnoteDto === null) {
                throw new Error('Required parameter "requestObj.footnoteDto" was null when calling updateFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateFootnoteWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateFootnoteWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.footnoteDto, requestObj.footnoteDto.constructor.name === "Object" ? "Footnote" : requestObj.footnoteDto.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FootnoteResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates properties of form field, returns updated form field.
     * @param requestObj contains request parameters
     */
    updateFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateFormField.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateFormField.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateFormField.');
            }
            // verify required parameter 'requestObj.formField' is not undefined
            if (requestObj.formField === undefined) {
                throw new Error('Required parameter "requestObj.formField" was undefined when calling updateFormField.');
            }
            // verify required parameter 'requestObj.formField' is not null
            if (requestObj.formField === null) {
                throw new Error('Required parameter "requestObj.formField" was null when calling updateFormField.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling updateFormField.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateFormField.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateFormField.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.formField, requestObj.formField.constructor.name === "Object" ? "FormField" : requestObj.formField.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates properties of form field, returns updated form field.
     * @param requestObj contains request parameters
     */
    updateFormFieldWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateFormFieldWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/formfields/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.formField' is not undefined
            if (requestObj.formField === undefined) {
                throw new Error('Required parameter "requestObj.formField" was undefined when calling updateFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.formField' is not null
            if (requestObj.formField === null) {
                throw new Error('Required parameter "requestObj.formField" was null when calling updateFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateFormFieldWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateFormFieldWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.formField, requestObj.formField.constructor.name === "Object" ? "FormField" : requestObj.formField.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FormFieldResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates paragraph format properties, returns updated format properties.
     * @param requestObj contains request parameters
     */
    updateParagraphFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateParagraphFormat.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}/format"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateParagraphFormat.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateParagraphFormat.');
            }
            // verify required parameter 'requestObj.dto' is not undefined
            if (requestObj.dto === undefined) {
                throw new Error('Required parameter "requestObj.dto" was undefined when calling updateParagraphFormat.');
            }
            // verify required parameter 'requestObj.dto' is not null
            if (requestObj.dto === null) {
                throw new Error('Required parameter "requestObj.dto" was null when calling updateParagraphFormat.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling updateParagraphFormat.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateParagraphFormat.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateParagraphFormat.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.dto, requestObj.dto.constructor.name === "Object" ? "ParagraphFormat" : requestObj.dto.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ParagraphFormatResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates run's properties, returns updated run's data.
     * @param requestObj contains request parameters
     */
    updateRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateRun.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "paragraphPath" + "}", (requestObj.paragraphPath !== null) ? "/" + String(requestObj.paragraphPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateRun.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateRun.');
            }
            // verify required parameter 'requestObj.run' is not undefined
            if (requestObj.run === undefined) {
                throw new Error('Required parameter "requestObj.run" was undefined when calling updateRun.');
            }
            // verify required parameter 'requestObj.run' is not null
            if (requestObj.run === null) {
                throw new Error('Required parameter "requestObj.run" was null when calling updateRun.');
            }
            // verify required parameter 'requestObj.paragraphPath' is not undefined
            if (requestObj.paragraphPath === undefined) {
                throw new Error('Required parameter "requestObj.paragraphPath" was undefined when calling updateRun.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateRun.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateRun.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.run, requestObj.run.constructor.name === "Object" ? "Run" : requestObj.run.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RunResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates font properties, returns updated font data.
     * @param requestObj contains request parameters
     */
    updateRunFont(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateRunFont.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}/font"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "paragraphPath" + "}", (requestObj.paragraphPath !== null) ? "/" + String(requestObj.paragraphPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateRunFont.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateRunFont.');
            }
            // verify required parameter 'requestObj.fontDto' is not undefined
            if (requestObj.fontDto === undefined) {
                throw new Error('Required parameter "requestObj.fontDto" was undefined when calling updateRunFont.');
            }
            // verify required parameter 'requestObj.fontDto' is not null
            if (requestObj.fontDto === null) {
                throw new Error('Required parameter "requestObj.fontDto" was null when calling updateRunFont.');
            }
            // verify required parameter 'requestObj.paragraphPath' is not undefined
            if (requestObj.paragraphPath === undefined) {
                throw new Error('Required parameter "requestObj.paragraphPath" was undefined when calling updateRunFont.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateRunFont.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateRunFont.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.fontDto, requestObj.fontDto.constructor.name === "Object" ? "Font" : requestObj.fontDto.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FontResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates page setup of section.
     * @param requestObj contains request parameters
     */
    updateSectionPageSetup(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateSectionPageSetup.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}/pageSetup"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "sectionIndex" + "}", (requestObj.sectionIndex !== null) ? "/" + String(requestObj.sectionIndex) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateSectionPageSetup.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateSectionPageSetup.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not undefined
            if (requestObj.sectionIndex === undefined) {
                throw new Error('Required parameter "requestObj.sectionIndex" was undefined when calling updateSectionPageSetup.');
            }
            // verify required parameter 'requestObj.sectionIndex' is not null
            if (requestObj.sectionIndex === null) {
                throw new Error('Required parameter "requestObj.sectionIndex" was null when calling updateSectionPageSetup.');
            }
            // verify required parameter 'requestObj.pageSetup' is not undefined
            if (requestObj.pageSetup === undefined) {
                throw new Error('Required parameter "requestObj.pageSetup" was undefined when calling updateSectionPageSetup.');
            }
            // verify required parameter 'requestObj.pageSetup' is not null
            if (requestObj.pageSetup === null) {
                throw new Error('Required parameter "requestObj.pageSetup" was null when calling updateSectionPageSetup.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.pageSetup, requestObj.pageSetup.constructor.name === "Object" ? "PageSetup" : requestObj.pageSetup.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SectionPageSetupResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a table cell format.
     * @param requestObj contains request parameters
     */
    updateTableCellFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateTableCellFormat.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}/cellformat"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tableRowPath" + "}", (requestObj.tableRowPath !== null) ? "/" + String(requestObj.tableRowPath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateTableCellFormat.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateTableCellFormat.');
            }
            // verify required parameter 'requestObj.tableRowPath' is not undefined
            if (requestObj.tableRowPath === undefined) {
                throw new Error('Required parameter "requestObj.tableRowPath" was undefined when calling updateTableCellFormat.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateTableCellFormat.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateTableCellFormat.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.format, requestObj.format.constructor.name === "Object" ? "TableCellFormat" : requestObj.format.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableCellFormatResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a table properties.
     * @param requestObj contains request parameters
     */
    updateTableProperties(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateTableProperties.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}/properties"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "nodePath" + "}", (requestObj.nodePath !== null) ? "/" + String(requestObj.nodePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateTableProperties.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateTableProperties.');
            }
            // verify required parameter 'requestObj.nodePath' is not undefined
            if (requestObj.nodePath === undefined) {
                throw new Error('Required parameter "requestObj.nodePath" was undefined when calling updateTableProperties.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateTableProperties.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateTableProperties.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.properties, requestObj.properties.constructor.name === "Object" ? "TableProperties" : requestObj.properties.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TablePropertiesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a table properties.
     * @param requestObj contains request parameters
     */
    updateTablePropertiesWithoutNodePath(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateTablePropertiesWithoutNodePath.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/tables/{index}/properties"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateTablePropertiesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateTablePropertiesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateTablePropertiesWithoutNodePath.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateTablePropertiesWithoutNodePath.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.properties, requestObj.properties.constructor.name === "Object" ? "TableProperties" : requestObj.properties.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TablePropertiesResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a table row format.
     * @param requestObj contains request parameters
     */
    updateTableRowFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling updateTableRowFormat.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}/rowformat"
                .replace("/{" + "name" + "}", (requestObj.name !== null) ? "/" + String(requestObj.name) : "")
                .replace("/{" + "tablePath" + "}", (requestObj.tablePath !== null) ? "/" + String(requestObj.tablePath) : "")
                .replace("/{" + "index" + "}", (requestObj.index !== null) ? "/" + String(requestObj.index) : "");
            const queryParameters = {};
            // verify required parameter 'requestObj.name' is not undefined
            if (requestObj.name === undefined) {
                throw new Error('Required parameter "requestObj.name" was undefined when calling updateTableRowFormat.');
            }
            // verify required parameter 'requestObj.name' is not null
            if (requestObj.name === null) {
                throw new Error('Required parameter "requestObj.name" was null when calling updateTableRowFormat.');
            }
            // verify required parameter 'requestObj.tablePath' is not undefined
            if (requestObj.tablePath === undefined) {
                throw new Error('Required parameter "requestObj.tablePath" was undefined when calling updateTableRowFormat.');
            }
            // verify required parameter 'requestObj.index' is not undefined
            if (requestObj.index === undefined) {
                throw new Error('Required parameter "requestObj.index" was undefined when calling updateTableRowFormat.');
            }
            // verify required parameter 'requestObj.index' is not null
            if (requestObj.index === null) {
                throw new Error('Required parameter "requestObj.index" was null when calling updateTableRowFormat.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "folder", requestObj.folder);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storage", requestObj.storage);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "loadEncoding", requestObj.loadEncoding);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "password", requestObj.password);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "destFileName", requestObj.destFileName);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionAuthor", requestObj.revisionAuthor);
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "revisionDateTime", requestObj.revisionDateTime);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(requestObj.format, requestObj.format.constructor.name === "Object" ? "TableRowFormat" : requestObj.format.constructor.name),
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableRowFormatResponse");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
    /**
     * Upload file
     * @param requestObj contains request parameters
     */
    uploadFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling uploadFile.');
            }
            let localVarPath = this.configuration.getApiBaseUrl() + "/words/storage/file/{path}"
                .replace("/{" + "path" + "}", (requestObj.path !== null) ? "/" + String(requestObj.path) : "");
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.fileContent' is not undefined
            if (requestObj.fileContent === undefined) {
                throw new Error('Required parameter "requestObj.fileContent" was undefined when calling uploadFile.');
            }
            // verify required parameter 'requestObj.fileContent' is not null
            if (requestObj.fileContent === null) {
                throw new Error('Required parameter "requestObj.fileContent" was null when calling uploadFile.');
            }
            // verify required parameter 'requestObj.path' is not undefined
            if (requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was undefined when calling uploadFile.');
            }
            // verify required parameter 'requestObj.path' is not null
            if (requestObj.path === null) {
                throw new Error('Required parameter "requestObj.path" was null when calling uploadFile.');
            }
            localVarPath = requestHelper_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            if (requestObj.fileContent !== undefined) {
                formParams.FileContent = requestObj.fileContent;
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, this.configuration);
            const body = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FilesUploadResult");
            const result = { body, response };
            return Promise.resolve(result);
        });
    }
}
exports.WordsApi = WordsApi;
