"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generic class for Words Cloud API response
 */
class WordsIncomingMessage {
}
exports.WordsIncomingMessage = WordsIncomingMessage;
/**
 * Attribute description
 */
class AttributeInfo {
}
exports.AttributeInfo = AttributeInfo;
/**
 * Api error.
 */
class ApiError {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ApiError.attributeTypeMap;
    }
}
exports.ApiError = ApiError;
/**
 * Attribute type map
 */
ApiError.attributeTypeMap = [
    {
        name: "code",
        baseName: "Code",
        type: "string",
    },
    {
        name: "message",
        baseName: "Message",
        type: "string",
    },
    {
        name: "description",
        baseName: "Description",
        type: "string",
    },
    {
        name: "dateTime",
        baseName: "DateTime",
        type: "Date",
    },
    {
        name: "innerError",
        baseName: "InnerError",
        type: "ApiError",
    }
];
/**
 * DTO for bookmark updating.
 */
class BookmarkData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return BookmarkData.attributeTypeMap;
    }
}
exports.BookmarkData = BookmarkData;
/**
 * Attribute type map
 */
BookmarkData.attributeTypeMap = [
    {
        name: "name",
        baseName: "Name",
        type: "string",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * container class for individual bookmarks outline level.
 */
class BookmarksOutlineLevelData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return BookmarksOutlineLevelData.attributeTypeMap;
    }
}
exports.BookmarksOutlineLevelData = BookmarksOutlineLevelData;
/**
 * Attribute type map
 */
BookmarksOutlineLevelData.attributeTypeMap = [
    {
        name: "name",
        baseName: "Name",
        type: "string",
    },
    {
        name: "bookmarksOutlineLevel",
        baseName: "BookmarksOutlineLevel",
        type: "number",
    }
];
/**
 * Represents a single classification result.
 */
class ClassificationResult {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ClassificationResult.attributeTypeMap;
    }
}
exports.ClassificationResult = ClassificationResult;
/**
 * Attribute type map
 */
ClassificationResult.attributeTypeMap = [
    {
        name: "className",
        baseName: "ClassName",
        type: "string",
    },
    {
        name: "classProbability",
        baseName: "ClassProbability",
        type: "number",
    }
];
/**
 * Container class for compare documents.
 */
class CompareData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return CompareData.attributeTypeMap;
    }
}
exports.CompareData = CompareData;
/**
 * Attribute type map
 */
CompareData.attributeTypeMap = [
    {
        name: "comparingWithDocument",
        baseName: "ComparingWithDocument",
        type: "string",
    },
    {
        name: "author",
        baseName: "Author",
        type: "string",
    },
    {
        name: "dateTime",
        baseName: "DateTime",
        type: "Date",
    }
];
/**
 * Represents Words document DTO.
 */
class Document {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return Document.attributeTypeMap;
    }
}
exports.Document = Document;
/**
 * Attribute type map
 */
Document.attributeTypeMap = [
    {
        name: "links",
        baseName: "Links",
        type: "Array<Link>",
    },
    {
        name: "fileName",
        baseName: "FileName",
        type: "string",
    },
    {
        name: "sourceFormat",
        baseName: "SourceFormat",
        type: "Document.SourceFormatEnum",
    },
    {
        name: "isEncrypted",
        baseName: "IsEncrypted",
        type: "boolean",
    },
    {
        name: "isSigned",
        baseName: "IsSigned",
        type: "boolean",
    },
    {
        name: "documentProperties",
        baseName: "DocumentProperties",
        type: "DocumentProperties",
    }
];
/**
 * Enums for Document
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (Document) {
    let SourceFormatEnum;
    (function (SourceFormatEnum) {
        SourceFormatEnum[SourceFormatEnum["Unknown"] = 'Unknown'] = "Unknown";
        SourceFormatEnum[SourceFormatEnum["Doc"] = 'Doc'] = "Doc";
        SourceFormatEnum[SourceFormatEnum["Dot"] = 'Dot'] = "Dot";
        SourceFormatEnum[SourceFormatEnum["DocPreWord60"] = 'DocPreWord60'] = "DocPreWord60";
        SourceFormatEnum[SourceFormatEnum["Docx"] = 'Docx'] = "Docx";
        SourceFormatEnum[SourceFormatEnum["Docm"] = 'Docm'] = "Docm";
        SourceFormatEnum[SourceFormatEnum["Dotx"] = 'Dotx'] = "Dotx";
        SourceFormatEnum[SourceFormatEnum["Dotm"] = 'Dotm'] = "Dotm";
        SourceFormatEnum[SourceFormatEnum["FlatOpc"] = 'FlatOpc'] = "FlatOpc";
        SourceFormatEnum[SourceFormatEnum["Rtf"] = 'Rtf'] = "Rtf";
        SourceFormatEnum[SourceFormatEnum["WordML"] = 'WordML'] = "WordML";
        SourceFormatEnum[SourceFormatEnum["Html"] = 'Html'] = "Html";
        SourceFormatEnum[SourceFormatEnum["Mhtml"] = 'Mhtml'] = "Mhtml";
        SourceFormatEnum[SourceFormatEnum["Epub"] = 'Epub'] = "Epub";
        SourceFormatEnum[SourceFormatEnum["Text"] = 'Text'] = "Text";
        SourceFormatEnum[SourceFormatEnum["Odt"] = 'Odt'] = "Odt";
        SourceFormatEnum[SourceFormatEnum["Ott"] = 'Ott'] = "Ott";
        SourceFormatEnum[SourceFormatEnum["Pdf"] = 'Pdf'] = "Pdf";
        SourceFormatEnum[SourceFormatEnum["Xps"] = 'Xps'] = "Xps";
        SourceFormatEnum[SourceFormatEnum["Tiff"] = 'Tiff'] = "Tiff";
        SourceFormatEnum[SourceFormatEnum["Svg"] = 'Svg'] = "Svg";
    })(SourceFormatEnum = Document.SourceFormatEnum || (Document.SourceFormatEnum = {}));
})(Document = exports.Document || (exports.Document = {}));
// tslint:enable:quotemark
/**
 * Represents a document which will be appended to the original resource document.
 */
class DocumentEntry {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DocumentEntry.attributeTypeMap;
    }
}
exports.DocumentEntry = DocumentEntry;
/**
 * Attribute type map
 */
DocumentEntry.attributeTypeMap = [
    {
        name: "href",
        baseName: "Href",
        type: "string",
    },
    {
        name: "importFormatMode",
        baseName: "ImportFormatMode",
        type: "string",
    }
];
/**
 * Represents a list of documents which will be appended to the original resource document.
 */
class DocumentEntryList {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DocumentEntryList.attributeTypeMap;
    }
}
exports.DocumentEntryList = DocumentEntryList;
/**
 * Attribute type map
 */
DocumentEntryList.attributeTypeMap = [
    {
        name: "documentEntries",
        baseName: "DocumentEntries",
        type: "Array<DocumentEntry>",
    }
];
/**
 * Represents a position in the document tree.
 */
class DocumentPosition {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DocumentPosition.attributeTypeMap;
    }
}
exports.DocumentPosition = DocumentPosition;
/**
 * Attribute type map
 */
DocumentPosition.attributeTypeMap = [
    {
        name: "node",
        baseName: "Node",
        type: "NodeLink",
    },
    {
        name: "offset",
        baseName: "Offset",
        type: "number",
    }
];
/**
 * Container for the document's statistical data.
 */
class DocumentStatData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DocumentStatData.attributeTypeMap;
    }
}
exports.DocumentStatData = DocumentStatData;
/**
 * Attribute type map
 */
DocumentStatData.attributeTypeMap = [
    {
        name: "wordCount",
        baseName: "WordCount",
        type: "number",
    },
    {
        name: "paragraphCount",
        baseName: "ParagraphCount",
        type: "number",
    },
    {
        name: "pageCount",
        baseName: "PageCount",
        type: "number",
    },
    {
        name: "footnotesStatData",
        baseName: "FootnotesStatData",
        type: "FootnotesStatData",
    },
    {
        name: "pageStatData",
        baseName: "PageStatData",
        type: "Array<PageStatData>",
    }
];
/**
 * Container class for Downsample options.
 */
class DownsampleOptionsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DownsampleOptionsData.attributeTypeMap;
    }
}
exports.DownsampleOptionsData = DownsampleOptionsData;
/**
 * Attribute type map
 */
DownsampleOptionsData.attributeTypeMap = [
    {
        name: "downsampleImages",
        baseName: "DownsampleImages",
        type: "boolean",
    },
    {
        name: "resolution",
        baseName: "Resolution",
        type: "number",
    },
    {
        name: "resolutionThreshold",
        baseName: "ResolutionThreshold",
        type: "number",
    }
];
/**
 * The error details
 */
class ErrorDetails {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ErrorDetails.attributeTypeMap;
    }
}
exports.ErrorDetails = ErrorDetails;
/**
 * Attribute type map
 */
ErrorDetails.attributeTypeMap = [
    {
        name: "requestId",
        baseName: "RequestId",
        type: "string",
    },
    {
        name: "errorDateTime",
        baseName: "ErrorDateTime",
        type: "Date",
    }
];
/**
 * Files list
 */
class FilesList {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FilesList.attributeTypeMap;
    }
}
exports.FilesList = FilesList;
/**
 * Attribute type map
 */
FilesList.attributeTypeMap = [
    {
        name: "value",
        baseName: "Value",
        type: "Array<StorageFile>",
    }
];
/**
 * File upload result
 */
class FilesUploadResult {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FilesUploadResult.attributeTypeMap;
    }
}
exports.FilesUploadResult = FilesUploadResult;
/**
 * Attribute type map
 */
FilesUploadResult.attributeTypeMap = [
    {
        name: "uploaded",
        baseName: "Uploaded",
        type: "Array<string>",
    },
    {
        name: "errors",
        baseName: "Errors",
        type: "Array<StorageApiError>",
    }
];
/**
 * Font info.
 */
class FontInfo {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FontInfo.attributeTypeMap;
    }
}
exports.FontInfo = FontInfo;
/**
 * Attribute type map
 */
FontInfo.attributeTypeMap = [
    {
        name: "fontFamilyName",
        baseName: "FontFamilyName",
        type: "string",
    },
    {
        name: "fullFontName",
        baseName: "FullFontName",
        type: "string",
    },
    {
        name: "version",
        baseName: "Version",
        type: "string",
    },
    {
        name: "filePath",
        baseName: "FilePath",
        type: "string",
    }
];
/**
 * Container for the footnotes statistical data.
 */
class FootnotesStatData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FootnotesStatData.attributeTypeMap;
    }
}
exports.FootnotesStatData = FootnotesStatData;
/**
 * Attribute type map
 */
FootnotesStatData.attributeTypeMap = [
    {
        name: "wordCount",
        baseName: "WordCount",
        type: "number",
    },
    {
        name: "paragraphCount",
        baseName: "ParagraphCount",
        type: "number",
    }
];
/**
 * Allows to specify additional System.Drawing.Graphics quality options.
 */
class GraphicsQualityOptionsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return GraphicsQualityOptionsData.attributeTypeMap;
    }
}
exports.GraphicsQualityOptionsData = GraphicsQualityOptionsData;
/**
 * Attribute type map
 */
GraphicsQualityOptionsData.attributeTypeMap = [
    {
        name: "compositingMode",
        baseName: "CompositingMode",
        type: "GraphicsQualityOptionsData.CompositingModeEnum",
    },
    {
        name: "compositingQuality",
        baseName: "CompositingQuality",
        type: "GraphicsQualityOptionsData.CompositingQualityEnum",
    },
    {
        name: "interpolationMode",
        baseName: "InterpolationMode",
        type: "GraphicsQualityOptionsData.InterpolationModeEnum",
    },
    {
        name: "smoothingMode",
        baseName: "SmoothingMode",
        type: "GraphicsQualityOptionsData.SmoothingModeEnum",
    },
    {
        name: "stringFormat",
        baseName: "StringFormat",
        type: "StringFormatData",
    },
    {
        name: "textRenderingHint",
        baseName: "TextRenderingHint",
        type: "GraphicsQualityOptionsData.TextRenderingHintEnum",
    }
];
/**
 * Enums for GraphicsQualityOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (GraphicsQualityOptionsData) {
    let CompositingModeEnum;
    (function (CompositingModeEnum) {
        CompositingModeEnum[CompositingModeEnum["SourceOver"] = 'SourceOver'] = "SourceOver";
        CompositingModeEnum[CompositingModeEnum["SourceCopy"] = 'SourceCopy'] = "SourceCopy";
    })(CompositingModeEnum = GraphicsQualityOptionsData.CompositingModeEnum || (GraphicsQualityOptionsData.CompositingModeEnum = {}));
    let CompositingQualityEnum;
    (function (CompositingQualityEnum) {
        CompositingQualityEnum[CompositingQualityEnum["Default"] = 'Default'] = "Default";
        CompositingQualityEnum[CompositingQualityEnum["HighSpeed"] = 'HighSpeed'] = "HighSpeed";
        CompositingQualityEnum[CompositingQualityEnum["HighQuality"] = 'HighQuality'] = "HighQuality";
        CompositingQualityEnum[CompositingQualityEnum["GammaCorrected"] = 'GammaCorrected'] = "GammaCorrected";
        CompositingQualityEnum[CompositingQualityEnum["AssumeLinear"] = 'AssumeLinear'] = "AssumeLinear";
        CompositingQualityEnum[CompositingQualityEnum["Invalid"] = 'Invalid'] = "Invalid";
    })(CompositingQualityEnum = GraphicsQualityOptionsData.CompositingQualityEnum || (GraphicsQualityOptionsData.CompositingQualityEnum = {}));
    let InterpolationModeEnum;
    (function (InterpolationModeEnum) {
        InterpolationModeEnum[InterpolationModeEnum["Default"] = 'Default'] = "Default";
        InterpolationModeEnum[InterpolationModeEnum["Low"] = 'Low'] = "Low";
        InterpolationModeEnum[InterpolationModeEnum["High"] = 'High'] = "High";
        InterpolationModeEnum[InterpolationModeEnum["Bilinear"] = 'Bilinear'] = "Bilinear";
        InterpolationModeEnum[InterpolationModeEnum["Bicubic"] = 'Bicubic'] = "Bicubic";
        InterpolationModeEnum[InterpolationModeEnum["NearestNeighbor"] = 'NearestNeighbor'] = "NearestNeighbor";
        InterpolationModeEnum[InterpolationModeEnum["HighQualityBilinear"] = 'HighQualityBilinear'] = "HighQualityBilinear";
        InterpolationModeEnum[InterpolationModeEnum["HighQualityBicubic"] = 'HighQualityBicubic'] = "HighQualityBicubic";
        InterpolationModeEnum[InterpolationModeEnum["Invalid"] = 'Invalid'] = "Invalid";
    })(InterpolationModeEnum = GraphicsQualityOptionsData.InterpolationModeEnum || (GraphicsQualityOptionsData.InterpolationModeEnum = {}));
    let SmoothingModeEnum;
    (function (SmoothingModeEnum) {
        SmoothingModeEnum[SmoothingModeEnum["Default"] = 'Default'] = "Default";
        SmoothingModeEnum[SmoothingModeEnum["HighSpeed"] = 'HighSpeed'] = "HighSpeed";
        SmoothingModeEnum[SmoothingModeEnum["HighQuality"] = 'HighQuality'] = "HighQuality";
        SmoothingModeEnum[SmoothingModeEnum["None"] = 'None'] = "None";
        SmoothingModeEnum[SmoothingModeEnum["AntiAlias"] = 'AntiAlias'] = "AntiAlias";
        SmoothingModeEnum[SmoothingModeEnum["Invalid"] = 'Invalid'] = "Invalid";
    })(SmoothingModeEnum = GraphicsQualityOptionsData.SmoothingModeEnum || (GraphicsQualityOptionsData.SmoothingModeEnum = {}));
    let TextRenderingHintEnum;
    (function (TextRenderingHintEnum) {
        TextRenderingHintEnum[TextRenderingHintEnum["SystemDefault"] = 'SystemDefault'] = "SystemDefault";
        TextRenderingHintEnum[TextRenderingHintEnum["SingleBitPerPixelGridFit"] = 'SingleBitPerPixelGridFit'] = "SingleBitPerPixelGridFit";
        TextRenderingHintEnum[TextRenderingHintEnum["SingleBitPerPixel"] = 'SingleBitPerPixel'] = "SingleBitPerPixel";
        TextRenderingHintEnum[TextRenderingHintEnum["AntiAliasGridFit"] = 'AntiAliasGridFit'] = "AntiAliasGridFit";
        TextRenderingHintEnum[TextRenderingHintEnum["AntiAlias"] = 'AntiAlias'] = "AntiAlias";
        TextRenderingHintEnum[TextRenderingHintEnum["ClearTypeGridFit"] = 'ClearTypeGridFit'] = "ClearTypeGridFit";
    })(TextRenderingHintEnum = GraphicsQualityOptionsData.TextRenderingHintEnum || (GraphicsQualityOptionsData.TextRenderingHintEnum = {}));
})(GraphicsQualityOptionsData = exports.GraphicsQualityOptionsData || (exports.GraphicsQualityOptionsData = {}));
// tslint:enable:quotemark
/**
 * Provides information for the object link. This is supposed to be an atom:link, therefore it should have all attributes specified here http://tools.ietf.org/html/rfc4287#section-4.2.7.
 */
class Link {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return Link.attributeTypeMap;
    }
}
exports.Link = Link;
/**
 * Attribute type map
 */
Link.attributeTypeMap = [
    {
        name: "href",
        baseName: "Href",
        type: "string",
    },
    {
        name: "rel",
        baseName: "Rel",
        type: "string",
    },
    {
        name: "type",
        baseName: "Type",
        type: "string",
    },
    {
        name: "title",
        baseName: "Title",
        type: "string",
    }
];
/**
 * Reference to document.
 */
class LinkElement {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return LinkElement.attributeTypeMap;
    }
}
exports.LinkElement = LinkElement;
/**
 * Attribute type map
 */
LinkElement.attributeTypeMap = [
    {
        name: "link",
        baseName: "link",
        type: "WordsApiLink",
    }
];
/**
 * Contains data for load web document.
 */
class LoadWebDocumentData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return LoadWebDocumentData.attributeTypeMap;
    }
}
exports.LoadWebDocumentData = LoadWebDocumentData;
/**
 * Attribute type map
 */
LoadWebDocumentData.attributeTypeMap = [
    {
        name: "loadingDocumentUrl",
        baseName: "LoadingDocumentUrl",
        type: "string",
    },
    {
        name: "saveOptions",
        baseName: "SaveOptions",
        type: "SaveOptionsData",
    }
];
/**
 * container class for options of metafile rendering.
 */
class MetafileRenderingOptionsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return MetafileRenderingOptionsData.attributeTypeMap;
    }
}
exports.MetafileRenderingOptionsData = MetafileRenderingOptionsData;
/**
 * Attribute type map
 */
MetafileRenderingOptionsData.attributeTypeMap = [
    {
        name: "emfPlusDualRenderingMode",
        baseName: "EmfPlusDualRenderingMode",
        type: "string",
    },
    {
        name: "emulateRasterOperations",
        baseName: "EmulateRasterOperations",
        type: "boolean",
    },
    {
        name: "renderingMode",
        baseName: "RenderingMode",
        type: "string",
    },
    {
        name: "useEmfEmbeddedToWmf",
        baseName: "UseEmfEmbeddedToWmf",
        type: "boolean",
    },
    {
        name: "scaleWmfFontsToMetafileSize",
        baseName: "ScaleWmfFontsToMetafileSize",
        type: "boolean",
    }
];
/**
 * result of the operation which modifies the original document and saves the result.
 */
class ModificationOperationResult {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ModificationOperationResult.attributeTypeMap;
    }
}
exports.ModificationOperationResult = ModificationOperationResult;
/**
 * Attribute type map
 */
ModificationOperationResult.attributeTypeMap = [
    {
        name: "source",
        baseName: "Source",
        type: "FileLink",
    },
    {
        name: "dest",
        baseName: "Dest",
        type: "FileLink",
    }
];
/**
 * container class for outline options.
 */
class OutlineOptionsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return OutlineOptionsData.attributeTypeMap;
    }
}
exports.OutlineOptionsData = OutlineOptionsData;
/**
 * Attribute type map
 */
OutlineOptionsData.attributeTypeMap = [
    {
        name: "bookmarksOutlineLevels",
        baseName: "BookmarksOutlineLevels",
        type: "Array<BookmarksOutlineLevelData>",
    },
    {
        name: "defaultBookmarksOutlineLevel",
        baseName: "DefaultBookmarksOutlineLevel",
        type: "number",
    },
    {
        name: "createMissingOutlineLevels",
        baseName: "CreateMissingOutlineLevels",
        type: "boolean",
    },
    {
        name: "createOutlinesForHeadingsInTables",
        baseName: "CreateOutlinesForHeadingsInTables",
        type: "boolean",
    },
    {
        name: "expandedOutlineLevels",
        baseName: "ExpandedOutlineLevels",
        type: "number",
    },
    {
        name: "headingsOutlineLevels",
        baseName: "HeadingsOutlineLevels",
        type: "number",
    }
];
/**
 * Class is used for insert page number request building.
 */
class PageNumber {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PageNumber.attributeTypeMap;
    }
}
exports.PageNumber = PageNumber;
/**
 * Attribute type map
 */
PageNumber.attributeTypeMap = [
    {
        name: "format",
        baseName: "Format",
        type: "string",
    },
    {
        name: "alignment",
        baseName: "Alignment",
        type: "string",
    },
    {
        name: "isTop",
        baseName: "IsTop",
        type: "boolean",
    },
    {
        name: "setPageNumberOnFirstPage",
        baseName: "SetPageNumberOnFirstPage",
        type: "boolean",
    }
];
/**
 * Container for the page's statistical data.
 */
class PageStatData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PageStatData.attributeTypeMap;
    }
}
exports.PageStatData = PageStatData;
/**
 * Attribute type map
 */
PageStatData.attributeTypeMap = [
    {
        name: "pageNumber",
        baseName: "PageNumber",
        type: "number",
    },
    {
        name: "wordCount",
        baseName: "WordCount",
        type: "number",
    },
    {
        name: "paragraphCount",
        baseName: "ParagraphCount",
        type: "number",
    },
    {
        name: "footnotesStatData",
        baseName: "FootnotesStatData",
        type: "FootnotesStatData",
    }
];
/**
 * Paragraph element.
 */
class ParagraphInsert {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ParagraphInsert.attributeTypeMap;
    }
}
exports.ParagraphInsert = ParagraphInsert;
/**
 * Attribute type map
 */
ParagraphInsert.attributeTypeMap = [
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * container class for details of digital signature.
 */
class PdfDigitalSignatureDetailsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PdfDigitalSignatureDetailsData.attributeTypeMap;
    }
}
exports.PdfDigitalSignatureDetailsData = PdfDigitalSignatureDetailsData;
/**
 * Attribute type map
 */
PdfDigitalSignatureDetailsData.attributeTypeMap = [
    {
        name: "certificateFilename",
        baseName: "CertificateFilename",
        type: "string",
    },
    {
        name: "hashAlgorithm",
        baseName: "HashAlgorithm",
        type: "string",
    },
    {
        name: "location",
        baseName: "Location",
        type: "string",
    },
    {
        name: "reason",
        baseName: "Reason",
        type: "string",
    },
    {
        name: "signatureDate",
        baseName: "SignatureDate",
        type: "Date",
    }
];
/**
 * container class for details of encryption.
 */
class PdfEncryptionDetailsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PdfEncryptionDetailsData.attributeTypeMap;
    }
}
exports.PdfEncryptionDetailsData = PdfEncryptionDetailsData;
/**
 * Attribute type map
 */
PdfEncryptionDetailsData.attributeTypeMap = [
    {
        name: "encryptionAlgorithm",
        baseName: "EncryptionAlgorithm",
        type: "string",
    },
    {
        name: "ownerPassword",
        baseName: "OwnerPassword",
        type: "string",
    },
    {
        name: "permissions",
        baseName: "Permissions",
        type: "string",
    },
    {
        name: "userPassword",
        baseName: "UserPassword",
        type: "string",
    }
];
/**
 * Preferred width.
 */
class PreferredWidth {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PreferredWidth.attributeTypeMap;
    }
}
exports.PreferredWidth = PreferredWidth;
/**
 * Attribute type map
 */
PreferredWidth.attributeTypeMap = [
    {
        name: "type",
        baseName: "Type",
        type: "PreferredWidth.TypeEnum",
    },
    {
        name: "value",
        baseName: "Value",
        type: "number",
    }
];
/**
 * Enums for PreferredWidth
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (PreferredWidth) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Auto"] = 'Auto'] = "Auto";
        TypeEnum[TypeEnum["Percent"] = 'Percent'] = "Percent";
        TypeEnum[TypeEnum["Points"] = 'Points'] = "Points";
    })(TypeEnum = PreferredWidth.TypeEnum || (PreferredWidth.TypeEnum = {}));
})(PreferredWidth = exports.PreferredWidth || (exports.PreferredWidth = {}));
// tslint:enable:quotemark
/**
 * Container for the data about protection of the document.
 */
class ProtectionData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ProtectionData.attributeTypeMap;
    }
}
exports.ProtectionData = ProtectionData;
/**
 * Attribute type map
 */
ProtectionData.attributeTypeMap = [
    {
        name: "protectionType",
        baseName: "ProtectionType",
        type: "string",
    }
];
/**
 * Request on changing of protection.
 */
class ProtectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ProtectionRequest.attributeTypeMap;
    }
}
exports.ProtectionRequest = ProtectionRequest;
/**
 * Attribute type map
 */
ProtectionRequest.attributeTypeMap = [
    {
        name: "password",
        baseName: "Password",
        type: "string",
    },
    {
        name: "newPassword",
        baseName: "NewPassword",
        type: "string",
    },
    {
        name: "protectionType",
        baseName: "ProtectionType",
        type: "string",
    }
];
/**
 * Range element.
 */
class RangeDocument {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return RangeDocument.attributeTypeMap;
    }
}
exports.RangeDocument = RangeDocument;
/**
 * Attribute type map
 */
RangeDocument.attributeTypeMap = [
    {
        name: "documentName",
        baseName: "DocumentName",
        type: "string",
    }
];
/**
 * Range element.
 */
class ReplaceRange {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ReplaceRange.attributeTypeMap;
    }
}
exports.ReplaceRange = ReplaceRange;
/**
 * Attribute type map
 */
ReplaceRange.attributeTypeMap = [
    {
        name: "text",
        baseName: "Text",
        type: "string",
    },
    {
        name: "textType",
        baseName: "TextType",
        type: "ReplaceRange.TextTypeEnum",
    }
];
/**
 * Enums for ReplaceRange
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (ReplaceRange) {
    let TextTypeEnum;
    (function (TextTypeEnum) {
        TextTypeEnum[TextTypeEnum["Text"] = 'Text'] = "Text";
        TextTypeEnum[TextTypeEnum["Html"] = 'Html'] = "Html";
    })(TextTypeEnum = ReplaceRange.TextTypeEnum || (ReplaceRange.TextTypeEnum = {}));
})(ReplaceRange = exports.ReplaceRange || (exports.ReplaceRange = {}));
// tslint:enable:quotemark
/**
 * Class for document replace text request building.
 */
class ReplaceTextParameters {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ReplaceTextParameters.attributeTypeMap;
    }
}
exports.ReplaceTextParameters = ReplaceTextParameters;
/**
 * Attribute type map
 */
ReplaceTextParameters.attributeTypeMap = [
    {
        name: "oldValue",
        baseName: "OldValue",
        type: "string",
    },
    {
        name: "newValue",
        baseName: "NewValue",
        type: "string",
    },
    {
        name: "isMatchCase",
        baseName: "IsMatchCase",
        type: "boolean",
    },
    {
        name: "isMatchWholeWord",
        baseName: "IsMatchWholeWord",
        type: "boolean",
    },
    {
        name: "isOldValueRegex",
        baseName: "IsOldValueRegex",
        type: "boolean",
    }
];
/**
 * base container class for save options data.
 */
class SaveOptionsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SaveOptionsData.attributeTypeMap;
    }
}
exports.SaveOptionsData = SaveOptionsData;
/**
 * Attribute type map
 */
SaveOptionsData.attributeTypeMap = [
    {
        name: "saveFormat",
        baseName: "SaveFormat",
        type: "string",
    },
    {
        name: "fileName",
        baseName: "FileName",
        type: "string",
    },
    {
        name: "dmlRenderingMode",
        baseName: "DmlRenderingMode",
        type: "string",
    },
    {
        name: "dmlEffectsRenderingMode",
        baseName: "DmlEffectsRenderingMode",
        type: "string",
    },
    {
        name: "zipOutput",
        baseName: "ZipOutput",
        type: "boolean",
    },
    {
        name: "updateLastSavedTimeProperty",
        baseName: "UpdateLastSavedTimeProperty",
        type: "boolean",
    },
    {
        name: "updateSdtContent",
        baseName: "UpdateSdtContent",
        type: "boolean",
    },
    {
        name: "updateFields",
        baseName: "UpdateFields",
        type: "boolean",
    }
];
/**
 * Result of saving.
 */
class SaveResult {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SaveResult.attributeTypeMap;
    }
}
exports.SaveResult = SaveResult;
/**
 * Attribute type map
 */
SaveResult.attributeTypeMap = [
    {
        name: "sourceDocument",
        baseName: "SourceDocument",
        type: "FileLink",
    },
    {
        name: "destDocument",
        baseName: "DestDocument",
        type: "FileLink",
    },
    {
        name: "additionalItems",
        baseName: "AdditionalItems",
        type: "Array<FileLink>",
    }
];
/**
 * Result of search operation.
 */
class SearchResult {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SearchResult.attributeTypeMap;
    }
}
exports.SearchResult = SearchResult;
/**
 * Attribute type map
 */
SearchResult.attributeTypeMap = [
    {
        name: "rangeStart",
        baseName: "RangeStart",
        type: "DocumentPosition",
    },
    {
        name: "rangeEnd",
        baseName: "RangeEnd",
        type: "DocumentPosition",
    }
];
/**
 * Result of splitting document.
 */
class SplitDocumentResult {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SplitDocumentResult.attributeTypeMap;
    }
}
exports.SplitDocumentResult = SplitDocumentResult;
/**
 * Attribute type map
 */
SplitDocumentResult.attributeTypeMap = [
    {
        name: "sourceDocument",
        baseName: "SourceDocument",
        type: "FileLink",
    },
    {
        name: "pages",
        baseName: "Pages",
        type: "Array<FileLink>",
    },
    {
        name: "zippedPages",
        baseName: "ZippedPages",
        type: "FileLink",
    }
];
/**
 * Error
 */
class StorageApiError {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StorageApiError.attributeTypeMap;
    }
}
exports.StorageApiError = StorageApiError;
/**
 * Attribute type map
 */
StorageApiError.attributeTypeMap = [
    {
        name: "code",
        baseName: "Code",
        type: "string",
    },
    {
        name: "message",
        baseName: "Message",
        type: "string",
    },
    {
        name: "description",
        baseName: "Description",
        type: "string",
    },
    {
        name: "innerError",
        baseName: "InnerError",
        type: "ErrorDetails",
    }
];
/**
 * File or folder information
 */
class StorageFile {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StorageFile.attributeTypeMap;
    }
}
exports.StorageFile = StorageFile;
/**
 * Attribute type map
 */
StorageFile.attributeTypeMap = [
    {
        name: "name",
        baseName: "Name",
        type: "string",
    },
    {
        name: "isFolder",
        baseName: "IsFolder",
        type: "boolean",
    },
    {
        name: "modifiedDate",
        baseName: "ModifiedDate",
        type: "Date",
    },
    {
        name: "size",
        baseName: "Size",
        type: "number",
    },
    {
        name: "path",
        baseName: "Path",
        type: "string",
    }
];
/**
 * Child nodes of  or .
 */
class StoryChildNodes {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StoryChildNodes.attributeTypeMap;
    }
}
exports.StoryChildNodes = StoryChildNodes;
/**
 * Attribute type map
 */
StoryChildNodes.attributeTypeMap = [
    {
        name: "childNodes",
        baseName: "ChildNodes",
        type: "Array<NodeLink>",
    }
];
/**
 * Allows to specify System.Drawing.StringFormat options.
 */
class StringFormatData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StringFormatData.attributeTypeMap;
    }
}
exports.StringFormatData = StringFormatData;
/**
 * Attribute type map
 */
StringFormatData.attributeTypeMap = [
    {
        name: "alignment",
        baseName: "Alignment",
        type: "StringFormatData.AlignmentEnum",
    },
    {
        name: "formatFlags",
        baseName: "FormatFlags",
        type: "StringFormatData.FormatFlagsEnum",
    },
    {
        name: "hotkeyPrefix",
        baseName: "HotkeyPrefix",
        type: "StringFormatData.HotkeyPrefixEnum",
    },
    {
        name: "lineAlignment",
        baseName: "LineAlignment",
        type: "StringFormatData.LineAlignmentEnum",
    },
    {
        name: "trimming",
        baseName: "Trimming",
        type: "StringFormatData.TrimmingEnum",
    }
];
/**
 * Enums for StringFormatData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (StringFormatData) {
    let AlignmentEnum;
    (function (AlignmentEnum) {
        AlignmentEnum[AlignmentEnum["Near"] = 'Near'] = "Near";
        AlignmentEnum[AlignmentEnum["Center"] = 'Center'] = "Center";
        AlignmentEnum[AlignmentEnum["Far"] = 'Far'] = "Far";
    })(AlignmentEnum = StringFormatData.AlignmentEnum || (StringFormatData.AlignmentEnum = {}));
    let FormatFlagsEnum;
    (function (FormatFlagsEnum) {
        FormatFlagsEnum[FormatFlagsEnum["DirectionRightToLeft"] = 'DirectionRightToLeft'] = "DirectionRightToLeft";
        FormatFlagsEnum[FormatFlagsEnum["DirectionVertical"] = 'DirectionVertical'] = "DirectionVertical";
        FormatFlagsEnum[FormatFlagsEnum["FitBlackBox"] = 'FitBlackBox'] = "FitBlackBox";
        FormatFlagsEnum[FormatFlagsEnum["DisplayFormatControl"] = 'DisplayFormatControl'] = "DisplayFormatControl";
        FormatFlagsEnum[FormatFlagsEnum["NoFontFallback"] = 'NoFontFallback'] = "NoFontFallback";
        FormatFlagsEnum[FormatFlagsEnum["MeasureTrailingSpaces"] = 'MeasureTrailingSpaces'] = "MeasureTrailingSpaces";
        FormatFlagsEnum[FormatFlagsEnum["NoWrap"] = 'NoWrap'] = "NoWrap";
        FormatFlagsEnum[FormatFlagsEnum["LineLimit"] = 'LineLimit'] = "LineLimit";
        FormatFlagsEnum[FormatFlagsEnum["NoClip"] = 'NoClip'] = "NoClip";
    })(FormatFlagsEnum = StringFormatData.FormatFlagsEnum || (StringFormatData.FormatFlagsEnum = {}));
    let HotkeyPrefixEnum;
    (function (HotkeyPrefixEnum) {
        HotkeyPrefixEnum[HotkeyPrefixEnum["None"] = 'None'] = "None";
        HotkeyPrefixEnum[HotkeyPrefixEnum["Show"] = 'Show'] = "Show";
        HotkeyPrefixEnum[HotkeyPrefixEnum["Hide"] = 'Hide'] = "Hide";
    })(HotkeyPrefixEnum = StringFormatData.HotkeyPrefixEnum || (StringFormatData.HotkeyPrefixEnum = {}));
    let LineAlignmentEnum;
    (function (LineAlignmentEnum) {
        LineAlignmentEnum[LineAlignmentEnum["Near"] = 'Near'] = "Near";
        LineAlignmentEnum[LineAlignmentEnum["Center"] = 'Center'] = "Center";
        LineAlignmentEnum[LineAlignmentEnum["Far"] = 'Far'] = "Far";
    })(LineAlignmentEnum = StringFormatData.LineAlignmentEnum || (StringFormatData.LineAlignmentEnum = {}));
    let TrimmingEnum;
    (function (TrimmingEnum) {
        TrimmingEnum[TrimmingEnum["None"] = 'None'] = "None";
        TrimmingEnum[TrimmingEnum["Character"] = 'Character'] = "Character";
        TrimmingEnum[TrimmingEnum["Word"] = 'Word'] = "Word";
        TrimmingEnum[TrimmingEnum["EllipsisCharacter"] = 'EllipsisCharacter'] = "EllipsisCharacter";
        TrimmingEnum[TrimmingEnum["EllipsisWord"] = 'EllipsisWord'] = "EllipsisWord";
        TrimmingEnum[TrimmingEnum["EllipsisPath"] = 'EllipsisPath'] = "EllipsisPath";
    })(TrimmingEnum = StringFormatData.TrimmingEnum || (StringFormatData.TrimmingEnum = {}));
})(StringFormatData = exports.StringFormatData || (exports.StringFormatData = {}));
// tslint:enable:quotemark
/**
 * Table cell element.
 */
class TableCellInsert {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return TableCellInsert.attributeTypeMap;
    }
}
exports.TableCellInsert = TableCellInsert;
/**
 * Attribute type map
 */
TableCellInsert.attributeTypeMap = [
    {
        name: "insertAfter",
        baseName: "InsertAfter",
        type: "number",
    }
];
/**
 * Table element.
 */
class TableInsert {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return TableInsert.attributeTypeMap;
    }
}
exports.TableInsert = TableInsert;
/**
 * Attribute type map
 */
TableInsert.attributeTypeMap = [
    {
        name: "position",
        baseName: "Position",
        type: "DocumentPosition",
    },
    {
        name: "columnsCount",
        baseName: "ColumnsCount",
        type: "number",
    },
    {
        name: "rowsCount",
        baseName: "RowsCount",
        type: "number",
    }
];
/**
 * Table row element.
 */
class TableRowInsert {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return TableRowInsert.attributeTypeMap;
    }
}
exports.TableRowInsert = TableRowInsert;
/**
 * Attribute type map
 */
TableRowInsert.attributeTypeMap = [
    {
        name: "insertAfter",
        baseName: "InsertAfter",
        type: "number",
    },
    {
        name: "columnsCount",
        baseName: "ColumnsCount",
        type: "number",
    }
];
/**
 * Class for insert watermark text request building.
 */
class WatermarkText {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return WatermarkText.attributeTypeMap;
    }
}
exports.WatermarkText = WatermarkText;
/**
 * Attribute type map
 */
WatermarkText.attributeTypeMap = [
    {
        name: "text",
        baseName: "Text",
        type: "string",
    },
    {
        name: "rotationAngle",
        baseName: "RotationAngle",
        type: "number",
    }
];
/**
 * Base class for all responses.
 */
class WordsResponse {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return WordsResponse.attributeTypeMap;
    }
}
exports.WordsResponse = WordsResponse;
/**
 * Attribute type map
 */
WordsResponse.attributeTypeMap = [
    {
        name: "requestId",
        baseName: "RequestId",
        type: "string",
    }
];
/**
 * Utility class for  serialization.
 */
class XmlColor {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return XmlColor.attributeTypeMap;
    }
}
exports.XmlColor = XmlColor;
/**
 * Attribute type map
 */
XmlColor.attributeTypeMap = [
    {
        name: "web",
        baseName: "Web",
        type: "string",
    },
    {
        name: "alpha",
        baseName: "Alpha",
        type: "number",
    }
];
/**
 * The list of fonts, available for document processing.
 */
class AvailableFontsResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(AvailableFontsResponse.attributeTypeMap);
    }
}
exports.AvailableFontsResponse = AvailableFontsResponse;
/**
 * Attribute type map
 */
AvailableFontsResponse.attributeTypeMap = [
    {
        name: "additionalFonts",
        baseName: "AdditionalFonts",
        type: "Array<FontInfo>",
    },
    {
        name: "customFonts",
        baseName: "CustomFonts",
        type: "Array<FontInfo>",
    },
    {
        name: "systemFonts",
        baseName: "SystemFonts",
        type: "Array<FontInfo>",
    }
];
/**
 * Represents a single bookmark.
 */
class Bookmark extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Bookmark.attributeTypeMap);
    }
}
exports.Bookmark = Bookmark;
/**
 * Attribute type map
 */
Bookmark.attributeTypeMap = [
    {
        name: "name",
        baseName: "Name",
        type: "string",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * This response should be returned by the service when handling:  GET bookmarks/{bookmarkName}.
 */
class BookmarkResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BookmarkResponse.attributeTypeMap);
    }
}
exports.BookmarkResponse = BookmarkResponse;
/**
 * Attribute type map
 */
BookmarkResponse.attributeTypeMap = [
    {
        name: "bookmark",
        baseName: "Bookmark",
        type: "Bookmark",
    }
];
/**
 * Represents an array of bookmarks.
 */
class Bookmarks extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Bookmarks.attributeTypeMap);
    }
}
exports.Bookmarks = Bookmarks;
/**
 * Attribute type map
 */
Bookmarks.attributeTypeMap = [
    {
        name: "bookmarkList",
        baseName: "BookmarkList",
        type: "Array<Bookmark>",
    }
];
/**
 * This response should be returned by the service when handling:  GET bookmarks.
 */
class BookmarksResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BookmarksResponse.attributeTypeMap);
    }
}
exports.BookmarksResponse = BookmarksResponse;
/**
 * Attribute type map
 */
BookmarksResponse.attributeTypeMap = [
    {
        name: "bookmarks",
        baseName: "Bookmarks",
        type: "Bookmarks",
    }
];
/**
 * Represents a border of an object.
 */
class Border extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Border.attributeTypeMap);
    }
}
exports.Border = Border;
/**
 * Attribute type map
 */
Border.attributeTypeMap = [
    {
        name: "borderType",
        baseName: "BorderType",
        type: "Border.BorderTypeEnum",
    },
    {
        name: "color",
        baseName: "Color",
        type: "XmlColor",
    },
    {
        name: "distanceFromText",
        baseName: "DistanceFromText",
        type: "number",
    },
    {
        name: "lineStyle",
        baseName: "LineStyle",
        type: "Border.LineStyleEnum",
    },
    {
        name: "lineWidth",
        baseName: "LineWidth",
        type: "number",
    },
    {
        name: "shadow",
        baseName: "Shadow",
        type: "boolean",
    }
];
/**
 * Enums for Border
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (Border) {
    let BorderTypeEnum;
    (function (BorderTypeEnum) {
        BorderTypeEnum[BorderTypeEnum["Bottom"] = 'Bottom'] = "Bottom";
        BorderTypeEnum[BorderTypeEnum["Left"] = 'Left'] = "Left";
        BorderTypeEnum[BorderTypeEnum["Right"] = 'Right'] = "Right";
        BorderTypeEnum[BorderTypeEnum["Top"] = 'Top'] = "Top";
        BorderTypeEnum[BorderTypeEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        BorderTypeEnum[BorderTypeEnum["Vertical"] = 'Vertical'] = "Vertical";
        BorderTypeEnum[BorderTypeEnum["DiagonalDown"] = 'DiagonalDown'] = "DiagonalDown";
        BorderTypeEnum[BorderTypeEnum["DiagonalUp"] = 'DiagonalUp'] = "DiagonalUp";
        BorderTypeEnum[BorderTypeEnum["None"] = 'None'] = "None";
    })(BorderTypeEnum = Border.BorderTypeEnum || (Border.BorderTypeEnum = {}));
    let LineStyleEnum;
    (function (LineStyleEnum) {
        LineStyleEnum[LineStyleEnum["None"] = 'None'] = "None";
        LineStyleEnum[LineStyleEnum["Single"] = 'Single'] = "Single";
        LineStyleEnum[LineStyleEnum["Thick"] = 'Thick'] = "Thick";
        LineStyleEnum[LineStyleEnum["Double"] = 'Double'] = "Double";
        LineStyleEnum[LineStyleEnum["Hairline"] = 'Hairline'] = "Hairline";
        LineStyleEnum[LineStyleEnum["Dot"] = 'Dot'] = "Dot";
        LineStyleEnum[LineStyleEnum["DashLargeGap"] = 'DashLargeGap'] = "DashLargeGap";
        LineStyleEnum[LineStyleEnum["DotDash"] = 'DotDash'] = "DotDash";
        LineStyleEnum[LineStyleEnum["DotDotDash"] = 'DotDotDash'] = "DotDotDash";
        LineStyleEnum[LineStyleEnum["Triple"] = 'Triple'] = "Triple";
        LineStyleEnum[LineStyleEnum["ThinThickSmallGap"] = 'ThinThickSmallGap'] = "ThinThickSmallGap";
        LineStyleEnum[LineStyleEnum["ThickThinSmallGap"] = 'ThickThinSmallGap'] = "ThickThinSmallGap";
        LineStyleEnum[LineStyleEnum["ThinThickThinSmallGap"] = 'ThinThickThinSmallGap'] = "ThinThickThinSmallGap";
        LineStyleEnum[LineStyleEnum["ThinThickMediumGap"] = 'ThinThickMediumGap'] = "ThinThickMediumGap";
        LineStyleEnum[LineStyleEnum["ThickThinMediumGap"] = 'ThickThinMediumGap'] = "ThickThinMediumGap";
        LineStyleEnum[LineStyleEnum["ThinThickThinMediumGap"] = 'ThinThickThinMediumGap'] = "ThinThickThinMediumGap";
        LineStyleEnum[LineStyleEnum["ThinThickLargeGap"] = 'ThinThickLargeGap'] = "ThinThickLargeGap";
        LineStyleEnum[LineStyleEnum["ThickThinLargeGap"] = 'ThickThinLargeGap'] = "ThickThinLargeGap";
        LineStyleEnum[LineStyleEnum["ThinThickThinLargeGap"] = 'ThinThickThinLargeGap'] = "ThinThickThinLargeGap";
        LineStyleEnum[LineStyleEnum["Wave"] = 'Wave'] = "Wave";
        LineStyleEnum[LineStyleEnum["DoubleWave"] = 'DoubleWave'] = "DoubleWave";
        LineStyleEnum[LineStyleEnum["DashSmallGap"] = 'DashSmallGap'] = "DashSmallGap";
        LineStyleEnum[LineStyleEnum["DashDotStroker"] = 'DashDotStroker'] = "DashDotStroker";
        LineStyleEnum[LineStyleEnum["Emboss3D"] = 'Emboss3D'] = "Emboss3D";
        LineStyleEnum[LineStyleEnum["Engrave3D"] = 'Engrave3D'] = "Engrave3D";
        LineStyleEnum[LineStyleEnum["Outset"] = 'Outset'] = "Outset";
        LineStyleEnum[LineStyleEnum["Inset"] = 'Inset'] = "Inset";
    })(LineStyleEnum = Border.LineStyleEnum || (Border.LineStyleEnum = {}));
})(Border = exports.Border || (exports.Border = {}));
// tslint:enable:quotemark
/**
 * This response should be returned by the service when handling: GET {nodeWithBorders}/borders.
 */
class BorderResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BorderResponse.attributeTypeMap);
    }
}
exports.BorderResponse = BorderResponse;
/**
 * Attribute type map
 */
BorderResponse.attributeTypeMap = [
    {
        name: "border",
        baseName: "Border",
        type: "Border",
    }
];
/**
 * Collection of borders.
 */
class BordersCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BordersCollection.attributeTypeMap);
    }
}
exports.BordersCollection = BordersCollection;
/**
 * Attribute type map
 */
BordersCollection.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<Border>",
    }
];
/**
 * This response should be returned by the service when handling: GET {nodeWithBorders}/borders.
 */
class BordersResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BordersResponse.attributeTypeMap);
    }
}
exports.BordersResponse = BordersResponse;
/**
 * Attribute type map
 */
BordersResponse.attributeTypeMap = [
    {
        name: "borders",
        baseName: "Borders",
        type: "BordersCollection",
    }
];
/**
 * This response should be returned by the service when handling: PUT http://api.aspose.com/v4.0/words/classify.
 */
class ClassificationResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ClassificationResponse.attributeTypeMap);
    }
}
exports.ClassificationResponse = ClassificationResponse;
/**
 * Attribute type map
 */
ClassificationResponse.attributeTypeMap = [
    {
        name: "bestClassName",
        baseName: "BestClassName",
        type: "string",
    },
    {
        name: "bestClassProbability",
        baseName: "BestClassProbability",
        type: "number",
    },
    {
        name: "bestResults",
        baseName: "BestResults",
        type: "Array<ClassificationResult>",
    }
];
/**
 * Comment link.
 */
class CommentLink extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(CommentLink.attributeTypeMap);
    }
}
exports.CommentLink = CommentLink;
/**
 * Attribute type map
 */
CommentLink.attributeTypeMap = [];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/comments/0.
 */
class CommentResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(CommentResponse.attributeTypeMap);
    }
}
exports.CommentResponse = CommentResponse;
/**
 * Attribute type map
 */
CommentResponse.attributeTypeMap = [
    {
        name: "comment",
        baseName: "Comment",
        type: "Comment",
    }
];
/**
 * Collection of comments.
 */
class CommentsCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(CommentsCollection.attributeTypeMap);
    }
}
exports.CommentsCollection = CommentsCollection;
/**
 * Attribute type map
 */
CommentsCollection.attributeTypeMap = [
    {
        name: "commentList",
        baseName: "CommentList",
        type: "Array<Comment>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/comments.
 */
class CommentsResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(CommentsResponse.attributeTypeMap);
    }
}
exports.CommentsResponse = CommentsResponse;
/**
 * Attribute type map
 */
CommentsResponse.attributeTypeMap = [
    {
        name: "comments",
        baseName: "Comments",
        type: "CommentsCollection",
    }
];
/**
 * container class for doc/dot save options.
 */
class DocSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocSaveOptionsData.attributeTypeMap);
    }
}
exports.DocSaveOptionsData = DocSaveOptionsData;
/**
 * Attribute type map
 */
DocSaveOptionsData.attributeTypeMap = [
    {
        name: "alwaysCompressMetafiles",
        baseName: "AlwaysCompressMetafiles",
        type: "boolean",
    },
    {
        name: "password",
        baseName: "Password",
        type: "string",
    },
    {
        name: "savePictureBullet",
        baseName: "SavePictureBullet",
        type: "boolean",
    },
    {
        name: "saveRoutingSlip",
        baseName: "SaveRoutingSlip",
        type: "boolean",
    }
];
/**
 * Collection of document properties.
 */
class DocumentProperties extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentProperties.attributeTypeMap);
    }
}
exports.DocumentProperties = DocumentProperties;
/**
 * Attribute type map
 */
DocumentProperties.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<DocumentProperty>",
    }
];
/**
 * This response should be returned by the service when handling:  GET /documentProperties.
 */
class DocumentPropertiesResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentPropertiesResponse.attributeTypeMap);
    }
}
exports.DocumentPropertiesResponse = DocumentPropertiesResponse;
/**
 * Attribute type map
 */
DocumentPropertiesResponse.attributeTypeMap = [
    {
        name: "documentProperties",
        baseName: "DocumentProperties",
        type: "DocumentProperties",
    }
];
/**
 * Words document property DTO.
 */
class DocumentProperty extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentProperty.attributeTypeMap);
    }
}
exports.DocumentProperty = DocumentProperty;
/**
 * Attribute type map
 */
DocumentProperty.attributeTypeMap = [
    {
        name: "builtIn",
        baseName: "BuiltIn",
        type: "boolean",
    },
    {
        name: "name",
        baseName: "Name",
        type: "string",
    },
    {
        name: "value",
        baseName: "Value",
        type: "string",
    }
];
/**
 * This response should be returned by the service when handling:  GET documentProperties/{propertyName}.
 */
class DocumentPropertyResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentPropertyResponse.attributeTypeMap);
    }
}
exports.DocumentPropertyResponse = DocumentPropertyResponse;
/**
 * Attribute type map
 */
DocumentPropertyResponse.attributeTypeMap = [
    {
        name: "documentProperty",
        baseName: "DocumentProperty",
        type: "DocumentProperty",
    }
];
/**
 * Represents the response with document description.
 */
class DocumentResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentResponse.attributeTypeMap);
    }
}
exports.DocumentResponse = DocumentResponse;
/**
 * Attribute type map
 */
DocumentResponse.attributeTypeMap = [
    {
        name: "document",
        baseName: "Document",
        type: "Document",
    }
];
/**
 * Represents drawing objects collection DTO.
 */
class DrawingObjectCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DrawingObjectCollection.attributeTypeMap);
    }
}
exports.DrawingObjectCollection = DrawingObjectCollection;
/**
 * Attribute type map
 */
DrawingObjectCollection.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<LinkElement>",
    }
];
/**
 * Response for \"drawingObjects/n\" resource.
 */
class DrawingObjectResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DrawingObjectResponse.attributeTypeMap);
    }
}
exports.DrawingObjectResponse = DrawingObjectResponse;
/**
 * Attribute type map
 */
DrawingObjectResponse.attributeTypeMap = [
    {
        name: "drawingObject",
        baseName: "DrawingObject",
        type: "DrawingObject",
    }
];
/**
 * This response should be returned by the service when handling:  GET /drawingObjects.
 */
class DrawingObjectsResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DrawingObjectsResponse.attributeTypeMap);
    }
}
exports.DrawingObjectsResponse = DrawingObjectsResponse;
/**
 * Attribute type map
 */
DrawingObjectsResponse.attributeTypeMap = [
    {
        name: "drawingObjects",
        baseName: "DrawingObjects",
        type: "DrawingObjectCollection",
    }
];
/**
 * Represents DTO for collection of fields.
 */
class FieldCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FieldCollection.attributeTypeMap);
    }
}
exports.FieldCollection = FieldCollection;
/**
 * Attribute type map
 */
FieldCollection.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<Field>",
    }
];
/**
 * Represents a collection of merge fields within a document.
 */
class FieldNames extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FieldNames.attributeTypeMap);
    }
}
exports.FieldNames = FieldNames;
/**
 * Attribute type map
 */
FieldNames.attributeTypeMap = [
    {
        name: "names",
        baseName: "Names",
        type: "Array<string>",
    }
];
/**
 * This response should be returned by the service when handling:  GET /{name}/mailMergeFieldNames.
 */
class FieldNamesResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FieldNamesResponse.attributeTypeMap);
    }
}
exports.FieldNamesResponse = FieldNamesResponse;
/**
 * Attribute type map
 */
FieldNamesResponse.attributeTypeMap = [
    {
        name: "fieldNames",
        baseName: "FieldNames",
        type: "FieldNames",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/paragraphs/{0}/fields/{1}.
 */
class FieldResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FieldResponse.attributeTypeMap);
    }
}
exports.FieldResponse = FieldResponse;
/**
 * Attribute type map
 */
FieldResponse.attributeTypeMap = [
    {
        name: "field",
        baseName: "Field",
        type: "Field",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/{nodePath}/fields.
 */
class FieldsResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FieldsResponse.attributeTypeMap);
    }
}
exports.FieldsResponse = FieldsResponse;
/**
 * Attribute type map
 */
FieldsResponse.attributeTypeMap = [
    {
        name: "fields",
        baseName: "Fields",
        type: "FieldCollection",
    }
];
/**
 * Provides information for the file link.
 */
class FileLink extends Link {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FileLink.attributeTypeMap);
    }
}
exports.FileLink = FileLink;
/**
 * Attribute type map
 */
FileLink.attributeTypeMap = [];
/**
 * Contains common options that can be specified when saving a document into fixed page formats (PDF, XPS, images etc).
 */
class FixedPageSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FixedPageSaveOptionsData.attributeTypeMap);
    }
}
exports.FixedPageSaveOptionsData = FixedPageSaveOptionsData;
/**
 * Attribute type map
 */
FixedPageSaveOptionsData.attributeTypeMap = [
    {
        name: "colorMode",
        baseName: "ColorMode",
        type: "string",
    },
    {
        name: "jpegQuality",
        baseName: "JpegQuality",
        type: "number",
    },
    {
        name: "metafileRenderingOptions",
        baseName: "MetafileRenderingOptions",
        type: "MetafileRenderingOptionsData",
    },
    {
        name: "numeralFormat",
        baseName: "NumeralFormat",
        type: "string",
    },
    {
        name: "optimizeOutput",
        baseName: "OptimizeOutput",
        type: "boolean",
    },
    {
        name: "pageCount",
        baseName: "PageCount",
        type: "number",
    },
    {
        name: "pageIndex",
        baseName: "PageIndex",
        type: "number",
    }
];
/**
 * Font element.
 */
class Font extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Font.attributeTypeMap);
    }
}
exports.Font = Font;
/**
 * Attribute type map
 */
Font.attributeTypeMap = [
    {
        name: "allCaps",
        baseName: "AllCaps",
        type: "boolean",
    },
    {
        name: "bidi",
        baseName: "Bidi",
        type: "boolean",
    },
    {
        name: "bold",
        baseName: "Bold",
        type: "boolean",
    },
    {
        name: "boldBi",
        baseName: "BoldBi",
        type: "boolean",
    },
    {
        name: "border",
        baseName: "Border",
        type: "Border",
    },
    {
        name: "color",
        baseName: "Color",
        type: "XmlColor",
    },
    {
        name: "complexScript",
        baseName: "ComplexScript",
        type: "boolean",
    },
    {
        name: "doubleStrikeThrough",
        baseName: "DoubleStrikeThrough",
        type: "boolean",
    },
    {
        name: "emboss",
        baseName: "Emboss",
        type: "boolean",
    },
    {
        name: "engrave",
        baseName: "Engrave",
        type: "boolean",
    },
    {
        name: "hidden",
        baseName: "Hidden",
        type: "boolean",
    },
    {
        name: "highlightColor",
        baseName: "HighlightColor",
        type: "XmlColor",
    },
    {
        name: "italic",
        baseName: "Italic",
        type: "boolean",
    },
    {
        name: "italicBi",
        baseName: "ItalicBi",
        type: "boolean",
    },
    {
        name: "kerning",
        baseName: "Kerning",
        type: "number",
    },
    {
        name: "localeId",
        baseName: "LocaleId",
        type: "number",
    },
    {
        name: "localeIdBi",
        baseName: "LocaleIdBi",
        type: "number",
    },
    {
        name: "localeIdFarEast",
        baseName: "LocaleIdFarEast",
        type: "number",
    },
    {
        name: "name",
        baseName: "Name",
        type: "string",
    },
    {
        name: "nameAscii",
        baseName: "NameAscii",
        type: "string",
    },
    {
        name: "nameBi",
        baseName: "NameBi",
        type: "string",
    },
    {
        name: "nameFarEast",
        baseName: "NameFarEast",
        type: "string",
    },
    {
        name: "nameOther",
        baseName: "NameOther",
        type: "string",
    },
    {
        name: "noProofing",
        baseName: "NoProofing",
        type: "boolean",
    },
    {
        name: "outline",
        baseName: "Outline",
        type: "boolean",
    },
    {
        name: "position",
        baseName: "Position",
        type: "number",
    },
    {
        name: "scaling",
        baseName: "Scaling",
        type: "number",
    },
    {
        name: "shadow",
        baseName: "Shadow",
        type: "boolean",
    },
    {
        name: "size",
        baseName: "Size",
        type: "number",
    },
    {
        name: "sizeBi",
        baseName: "SizeBi",
        type: "number",
    },
    {
        name: "smallCaps",
        baseName: "SmallCaps",
        type: "boolean",
    },
    {
        name: "spacing",
        baseName: "Spacing",
        type: "number",
    },
    {
        name: "strikeThrough",
        baseName: "StrikeThrough",
        type: "boolean",
    },
    {
        name: "styleIdentifier",
        baseName: "StyleIdentifier",
        type: "Font.StyleIdentifierEnum",
    },
    {
        name: "styleName",
        baseName: "StyleName",
        type: "string",
    },
    {
        name: "subscript",
        baseName: "Subscript",
        type: "boolean",
    },
    {
        name: "superscript",
        baseName: "Superscript",
        type: "boolean",
    },
    {
        name: "textEffect",
        baseName: "TextEffect",
        type: "Font.TextEffectEnum",
    },
    {
        name: "underline",
        baseName: "Underline",
        type: "Font.UnderlineEnum",
    },
    {
        name: "underlineColor",
        baseName: "UnderlineColor",
        type: "XmlColor",
    }
];
/**
 * Enums for Font
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (Font) {
    let StyleIdentifierEnum;
    (function (StyleIdentifierEnum) {
        StyleIdentifierEnum[StyleIdentifierEnum["Normal"] = 'Normal'] = "Normal";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading1"] = 'Heading1'] = "Heading1";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading2"] = 'Heading2'] = "Heading2";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading3"] = 'Heading3'] = "Heading3";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading4"] = 'Heading4'] = "Heading4";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading5"] = 'Heading5'] = "Heading5";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading6"] = 'Heading6'] = "Heading6";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading7"] = 'Heading7'] = "Heading7";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading8"] = 'Heading8'] = "Heading8";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading9"] = 'Heading9'] = "Heading9";
        StyleIdentifierEnum[StyleIdentifierEnum["Index1"] = 'Index1'] = "Index1";
        StyleIdentifierEnum[StyleIdentifierEnum["Index2"] = 'Index2'] = "Index2";
        StyleIdentifierEnum[StyleIdentifierEnum["Index3"] = 'Index3'] = "Index3";
        StyleIdentifierEnum[StyleIdentifierEnum["Index4"] = 'Index4'] = "Index4";
        StyleIdentifierEnum[StyleIdentifierEnum["Index5"] = 'Index5'] = "Index5";
        StyleIdentifierEnum[StyleIdentifierEnum["Index6"] = 'Index6'] = "Index6";
        StyleIdentifierEnum[StyleIdentifierEnum["Index7"] = 'Index7'] = "Index7";
        StyleIdentifierEnum[StyleIdentifierEnum["Index8"] = 'Index8'] = "Index8";
        StyleIdentifierEnum[StyleIdentifierEnum["Index9"] = 'Index9'] = "Index9";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc1"] = 'Toc1'] = "Toc1";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc2"] = 'Toc2'] = "Toc2";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc3"] = 'Toc3'] = "Toc3";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc4"] = 'Toc4'] = "Toc4";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc5"] = 'Toc5'] = "Toc5";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc6"] = 'Toc6'] = "Toc6";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc7"] = 'Toc7'] = "Toc7";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc8"] = 'Toc8'] = "Toc8";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc9"] = 'Toc9'] = "Toc9";
        StyleIdentifierEnum[StyleIdentifierEnum["NormalIndent"] = 'NormalIndent'] = "NormalIndent";
        StyleIdentifierEnum[StyleIdentifierEnum["FootnoteText"] = 'FootnoteText'] = "FootnoteText";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentText"] = 'CommentText'] = "CommentText";
        StyleIdentifierEnum[StyleIdentifierEnum["Header"] = 'Header'] = "Header";
        StyleIdentifierEnum[StyleIdentifierEnum["Footer"] = 'Footer'] = "Footer";
        StyleIdentifierEnum[StyleIdentifierEnum["IndexHeading"] = 'IndexHeading'] = "IndexHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["Caption"] = 'Caption'] = "Caption";
        StyleIdentifierEnum[StyleIdentifierEnum["TableOfFigures"] = 'TableOfFigures'] = "TableOfFigures";
        StyleIdentifierEnum[StyleIdentifierEnum["EnvelopeAddress"] = 'EnvelopeAddress'] = "EnvelopeAddress";
        StyleIdentifierEnum[StyleIdentifierEnum["EnvelopeReturn"] = 'EnvelopeReturn'] = "EnvelopeReturn";
        StyleIdentifierEnum[StyleIdentifierEnum["FootnoteReference"] = 'FootnoteReference'] = "FootnoteReference";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentReference"] = 'CommentReference'] = "CommentReference";
        StyleIdentifierEnum[StyleIdentifierEnum["LineNumber"] = 'LineNumber'] = "LineNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["PageNumber"] = 'PageNumber'] = "PageNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["EndnoteReference"] = 'EndnoteReference'] = "EndnoteReference";
        StyleIdentifierEnum[StyleIdentifierEnum["EndnoteText"] = 'EndnoteText'] = "EndnoteText";
        StyleIdentifierEnum[StyleIdentifierEnum["TableOfAuthorities"] = 'TableOfAuthorities'] = "TableOfAuthorities";
        StyleIdentifierEnum[StyleIdentifierEnum["Macro"] = 'Macro'] = "Macro";
        StyleIdentifierEnum[StyleIdentifierEnum["ToaHeading"] = 'ToaHeading'] = "ToaHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["List"] = 'List'] = "List";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet"] = 'ListBullet'] = "ListBullet";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber"] = 'ListNumber'] = "ListNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["List2"] = 'List2'] = "List2";
        StyleIdentifierEnum[StyleIdentifierEnum["List3"] = 'List3'] = "List3";
        StyleIdentifierEnum[StyleIdentifierEnum["List4"] = 'List4'] = "List4";
        StyleIdentifierEnum[StyleIdentifierEnum["List5"] = 'List5'] = "List5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet2"] = 'ListBullet2'] = "ListBullet2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet3"] = 'ListBullet3'] = "ListBullet3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet4"] = 'ListBullet4'] = "ListBullet4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet5"] = 'ListBullet5'] = "ListBullet5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber2"] = 'ListNumber2'] = "ListNumber2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber3"] = 'ListNumber3'] = "ListNumber3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber4"] = 'ListNumber4'] = "ListNumber4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber5"] = 'ListNumber5'] = "ListNumber5";
        StyleIdentifierEnum[StyleIdentifierEnum["Title"] = 'Title'] = "Title";
        StyleIdentifierEnum[StyleIdentifierEnum["Closing"] = 'Closing'] = "Closing";
        StyleIdentifierEnum[StyleIdentifierEnum["Signature"] = 'Signature'] = "Signature";
        StyleIdentifierEnum[StyleIdentifierEnum["DefaultParagraphFont"] = 'DefaultParagraphFont'] = "DefaultParagraphFont";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText"] = 'BodyText'] = "BodyText";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd"] = 'BodyTextInd'] = "BodyTextInd";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue"] = 'ListContinue'] = "ListContinue";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue2"] = 'ListContinue2'] = "ListContinue2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue3"] = 'ListContinue3'] = "ListContinue3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue4"] = 'ListContinue4'] = "ListContinue4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue5"] = 'ListContinue5'] = "ListContinue5";
        StyleIdentifierEnum[StyleIdentifierEnum["MessageHeader"] = 'MessageHeader'] = "MessageHeader";
        StyleIdentifierEnum[StyleIdentifierEnum["Subtitle"] = 'Subtitle'] = "Subtitle";
        StyleIdentifierEnum[StyleIdentifierEnum["Salutation"] = 'Salutation'] = "Salutation";
        StyleIdentifierEnum[StyleIdentifierEnum["Date"] = 'Date'] = "Date";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText1I"] = 'BodyText1I'] = "BodyText1I";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText1I2"] = 'BodyText1I2'] = "BodyText1I2";
        StyleIdentifierEnum[StyleIdentifierEnum["NoteHeading"] = 'NoteHeading'] = "NoteHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText2"] = 'BodyText2'] = "BodyText2";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText3"] = 'BodyText3'] = "BodyText3";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd2"] = 'BodyTextInd2'] = "BodyTextInd2";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd3"] = 'BodyTextInd3'] = "BodyTextInd3";
        StyleIdentifierEnum[StyleIdentifierEnum["BlockText"] = 'BlockText'] = "BlockText";
        StyleIdentifierEnum[StyleIdentifierEnum["Hyperlink"] = 'Hyperlink'] = "Hyperlink";
        StyleIdentifierEnum[StyleIdentifierEnum["FollowedHyperlink"] = 'FollowedHyperlink'] = "FollowedHyperlink";
        StyleIdentifierEnum[StyleIdentifierEnum["Strong"] = 'Strong'] = "Strong";
        StyleIdentifierEnum[StyleIdentifierEnum["Emphasis"] = 'Emphasis'] = "Emphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["DocumentMap"] = 'DocumentMap'] = "DocumentMap";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainText"] = 'PlainText'] = "PlainText";
        StyleIdentifierEnum[StyleIdentifierEnum["EmailSignature"] = 'EmailSignature'] = "EmailSignature";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlTopOfForm"] = 'HtmlTopOfForm'] = "HtmlTopOfForm";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlBottomOfForm"] = 'HtmlBottomOfForm'] = "HtmlBottomOfForm";
        StyleIdentifierEnum[StyleIdentifierEnum["NormalWeb"] = 'NormalWeb'] = "NormalWeb";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlAcronym"] = 'HtmlAcronym'] = "HtmlAcronym";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlAddress"] = 'HtmlAddress'] = "HtmlAddress";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlCite"] = 'HtmlCite'] = "HtmlCite";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlCode"] = 'HtmlCode'] = "HtmlCode";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlDefinition"] = 'HtmlDefinition'] = "HtmlDefinition";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlKeyboard"] = 'HtmlKeyboard'] = "HtmlKeyboard";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlPreformatted"] = 'HtmlPreformatted'] = "HtmlPreformatted";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlSample"] = 'HtmlSample'] = "HtmlSample";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlTypewriter"] = 'HtmlTypewriter'] = "HtmlTypewriter";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlVariable"] = 'HtmlVariable'] = "HtmlVariable";
        StyleIdentifierEnum[StyleIdentifierEnum["TableNormal"] = 'TableNormal'] = "TableNormal";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentSubject"] = 'CommentSubject'] = "CommentSubject";
        StyleIdentifierEnum[StyleIdentifierEnum["NoList"] = 'NoList'] = "NoList";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList1"] = 'OutlineList1'] = "OutlineList1";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList2"] = 'OutlineList2'] = "OutlineList2";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList3"] = 'OutlineList3'] = "OutlineList3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple1"] = 'TableSimple1'] = "TableSimple1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple2"] = 'TableSimple2'] = "TableSimple2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple3"] = 'TableSimple3'] = "TableSimple3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic1"] = 'TableClassic1'] = "TableClassic1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic2"] = 'TableClassic2'] = "TableClassic2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic3"] = 'TableClassic3'] = "TableClassic3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic4"] = 'TableClassic4'] = "TableClassic4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful1"] = 'TableColorful1'] = "TableColorful1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful2"] = 'TableColorful2'] = "TableColorful2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful3"] = 'TableColorful3'] = "TableColorful3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns1"] = 'TableColumns1'] = "TableColumns1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns2"] = 'TableColumns2'] = "TableColumns2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns3"] = 'TableColumns3'] = "TableColumns3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns4"] = 'TableColumns4'] = "TableColumns4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns5"] = 'TableColumns5'] = "TableColumns5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid1"] = 'TableGrid1'] = "TableGrid1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid2"] = 'TableGrid2'] = "TableGrid2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid3"] = 'TableGrid3'] = "TableGrid3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid4"] = 'TableGrid4'] = "TableGrid4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid5"] = 'TableGrid5'] = "TableGrid5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid6"] = 'TableGrid6'] = "TableGrid6";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid7"] = 'TableGrid7'] = "TableGrid7";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid8"] = 'TableGrid8'] = "TableGrid8";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList1"] = 'TableList1'] = "TableList1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList2"] = 'TableList2'] = "TableList2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList3"] = 'TableList3'] = "TableList3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList4"] = 'TableList4'] = "TableList4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList5"] = 'TableList5'] = "TableList5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList6"] = 'TableList6'] = "TableList6";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList7"] = 'TableList7'] = "TableList7";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList8"] = 'TableList8'] = "TableList8";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects1"] = 'Table3DEffects1'] = "Table3DEffects1";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects2"] = 'Table3DEffects2'] = "Table3DEffects2";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects3"] = 'Table3DEffects3'] = "Table3DEffects3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableContemporary"] = 'TableContemporary'] = "TableContemporary";
        StyleIdentifierEnum[StyleIdentifierEnum["TableElegant"] = 'TableElegant'] = "TableElegant";
        StyleIdentifierEnum[StyleIdentifierEnum["TableProfessional"] = 'TableProfessional'] = "TableProfessional";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSubtle1"] = 'TableSubtle1'] = "TableSubtle1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSubtle2"] = 'TableSubtle2'] = "TableSubtle2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb1"] = 'TableWeb1'] = "TableWeb1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb2"] = 'TableWeb2'] = "TableWeb2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb3"] = 'TableWeb3'] = "TableWeb3";
        StyleIdentifierEnum[StyleIdentifierEnum["BalloonText"] = 'BalloonText'] = "BalloonText";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid"] = 'TableGrid'] = "TableGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["TableTheme"] = 'TableTheme'] = "TableTheme";
        StyleIdentifierEnum[StyleIdentifierEnum["PlaceholderText"] = 'PlaceholderText'] = "PlaceholderText";
        StyleIdentifierEnum[StyleIdentifierEnum["NoSpacing"] = 'NoSpacing'] = "NoSpacing";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShading"] = 'LightShading'] = "LightShading";
        StyleIdentifierEnum[StyleIdentifierEnum["LightList"] = 'LightList'] = "LightList";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGrid"] = 'LightGrid'] = "LightGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1"] = 'MediumShading1'] = "MediumShading1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2"] = 'MediumShading2'] = "MediumShading2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1"] = 'MediumList1'] = "MediumList1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2"] = 'MediumList2'] = "MediumList2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1"] = 'MediumGrid1'] = "MediumGrid1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2"] = 'MediumGrid2'] = "MediumGrid2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3"] = 'MediumGrid3'] = "MediumGrid3";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkList"] = 'DarkList'] = "DarkList";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShading"] = 'ColorfulShading'] = "ColorfulShading";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulList"] = 'ColorfulList'] = "ColorfulList";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGrid"] = 'ColorfulGrid'] = "ColorfulGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent1"] = 'LightShadingAccent1'] = "LightShadingAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent1"] = 'LightListAccent1'] = "LightListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent1"] = 'LightGridAccent1'] = "LightGridAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent1"] = 'MediumShading1Accent1'] = "MediumShading1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent1"] = 'MediumShading2Accent1'] = "MediumShading2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent1"] = 'MediumList1Accent1'] = "MediumList1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["Revision"] = 'Revision'] = "Revision";
        StyleIdentifierEnum[StyleIdentifierEnum["ListParagraph"] = 'ListParagraph'] = "ListParagraph";
        StyleIdentifierEnum[StyleIdentifierEnum["Quote"] = 'Quote'] = "Quote";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseQuote"] = 'IntenseQuote'] = "IntenseQuote";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent1"] = 'MediumList2Accent1'] = "MediumList2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent1"] = 'MediumGrid1Accent1'] = "MediumGrid1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent1"] = 'MediumGrid2Accent1'] = "MediumGrid2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent1"] = 'MediumGrid3Accent1'] = "MediumGrid3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent1"] = 'DarkListAccent1'] = "DarkListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent1"] = 'ColorfulShadingAccent1'] = "ColorfulShadingAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent1"] = 'ColorfulListAccent1'] = "ColorfulListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent1"] = 'ColorfulGridAccent1'] = "ColorfulGridAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent2"] = 'LightShadingAccent2'] = "LightShadingAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent2"] = 'LightListAccent2'] = "LightListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent2"] = 'LightGridAccent2'] = "LightGridAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent2"] = 'MediumShading1Accent2'] = "MediumShading1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent2"] = 'MediumShading2Accent2'] = "MediumShading2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent2"] = 'MediumList1Accent2'] = "MediumList1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent2"] = 'MediumList2Accent2'] = "MediumList2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent2"] = 'MediumGrid1Accent2'] = "MediumGrid1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent2"] = 'MediumGrid2Accent2'] = "MediumGrid2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent2"] = 'MediumGrid3Accent2'] = "MediumGrid3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent2"] = 'DarkListAccent2'] = "DarkListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent2"] = 'ColorfulShadingAccent2'] = "ColorfulShadingAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent2"] = 'ColorfulListAccent2'] = "ColorfulListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent2"] = 'ColorfulGridAccent2'] = "ColorfulGridAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent3"] = 'LightShadingAccent3'] = "LightShadingAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent3"] = 'LightListAccent3'] = "LightListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent3"] = 'LightGridAccent3'] = "LightGridAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent3"] = 'MediumShading1Accent3'] = "MediumShading1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent3"] = 'MediumShading2Accent3'] = "MediumShading2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent3"] = 'MediumList1Accent3'] = "MediumList1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent3"] = 'MediumList2Accent3'] = "MediumList2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent3"] = 'MediumGrid1Accent3'] = "MediumGrid1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent3"] = 'MediumGrid2Accent3'] = "MediumGrid2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent3"] = 'MediumGrid3Accent3'] = "MediumGrid3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent3"] = 'DarkListAccent3'] = "DarkListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent3"] = 'ColorfulShadingAccent3'] = "ColorfulShadingAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent3"] = 'ColorfulListAccent3'] = "ColorfulListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent3"] = 'ColorfulGridAccent3'] = "ColorfulGridAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent4"] = 'LightShadingAccent4'] = "LightShadingAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent4"] = 'LightListAccent4'] = "LightListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent4"] = 'LightGridAccent4'] = "LightGridAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent4"] = 'MediumShading1Accent4'] = "MediumShading1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent4"] = 'MediumShading2Accent4'] = "MediumShading2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent4"] = 'MediumList1Accent4'] = "MediumList1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent4"] = 'MediumList2Accent4'] = "MediumList2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent4"] = 'MediumGrid1Accent4'] = "MediumGrid1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent4"] = 'MediumGrid2Accent4'] = "MediumGrid2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent4"] = 'MediumGrid3Accent4'] = "MediumGrid3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent4"] = 'DarkListAccent4'] = "DarkListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent4"] = 'ColorfulShadingAccent4'] = "ColorfulShadingAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent4"] = 'ColorfulListAccent4'] = "ColorfulListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent4"] = 'ColorfulGridAccent4'] = "ColorfulGridAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent5"] = 'LightShadingAccent5'] = "LightShadingAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent5"] = 'LightListAccent5'] = "LightListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent5"] = 'LightGridAccent5'] = "LightGridAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent5"] = 'MediumShading1Accent5'] = "MediumShading1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent5"] = 'MediumShading2Accent5'] = "MediumShading2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent5"] = 'MediumList1Accent5'] = "MediumList1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent5"] = 'MediumList2Accent5'] = "MediumList2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent5"] = 'MediumGrid1Accent5'] = "MediumGrid1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent5"] = 'MediumGrid2Accent5'] = "MediumGrid2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent5"] = 'MediumGrid3Accent5'] = "MediumGrid3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent5"] = 'DarkListAccent5'] = "DarkListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent5"] = 'ColorfulShadingAccent5'] = "ColorfulShadingAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent5"] = 'ColorfulListAccent5'] = "ColorfulListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent5"] = 'ColorfulGridAccent5'] = "ColorfulGridAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent6"] = 'LightShadingAccent6'] = "LightShadingAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent6"] = 'LightListAccent6'] = "LightListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent6"] = 'LightGridAccent6'] = "LightGridAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent6"] = 'MediumShading1Accent6'] = "MediumShading1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent6"] = 'MediumShading2Accent6'] = "MediumShading2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent6"] = 'MediumList1Accent6'] = "MediumList1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent6"] = 'MediumList2Accent6'] = "MediumList2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent6"] = 'MediumGrid1Accent6'] = "MediumGrid1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent6"] = 'MediumGrid2Accent6'] = "MediumGrid2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent6"] = 'MediumGrid3Accent6'] = "MediumGrid3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent6"] = 'DarkListAccent6'] = "DarkListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent6"] = 'ColorfulShadingAccent6'] = "ColorfulShadingAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent6"] = 'ColorfulListAccent6'] = "ColorfulListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent6"] = 'ColorfulGridAccent6'] = "ColorfulGridAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["SubtleEmphasis"] = 'SubtleEmphasis'] = "SubtleEmphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseEmphasis"] = 'IntenseEmphasis'] = "IntenseEmphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["SubtleReference"] = 'SubtleReference'] = "SubtleReference";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseReference"] = 'IntenseReference'] = "IntenseReference";
        StyleIdentifierEnum[StyleIdentifierEnum["BookTitle"] = 'BookTitle'] = "BookTitle";
        StyleIdentifierEnum[StyleIdentifierEnum["Bibliography"] = 'Bibliography'] = "Bibliography";
        StyleIdentifierEnum[StyleIdentifierEnum["TocHeading"] = 'TocHeading'] = "TocHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable1"] = 'PlainTable1'] = "PlainTable1";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable2"] = 'PlainTable2'] = "PlainTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable3"] = 'PlainTable3'] = "PlainTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable4"] = 'PlainTable4'] = "PlainTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable5"] = 'PlainTable5'] = "PlainTable5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGridLight"] = 'TableGridLight'] = "TableGridLight";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1Light"] = 'GridTable1Light'] = "GridTable1Light";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2"] = 'GridTable2'] = "GridTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3"] = 'GridTable3'] = "GridTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4"] = 'GridTable4'] = "GridTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5Dark"] = 'GridTable5Dark'] = "GridTable5Dark";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6Colorful"] = 'GridTable6Colorful'] = "GridTable6Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7Colorful"] = 'GridTable7Colorful'] = "GridTable7Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent1"] = 'GridTable1LightAccent1'] = "GridTable1LightAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent1"] = 'GridTable2Accent1'] = "GridTable2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent1"] = 'GridTable3Accent1'] = "GridTable3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent1"] = 'GridTable4Accent1'] = "GridTable4Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent1"] = 'GridTable5DarkAccent1'] = "GridTable5DarkAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent1"] = 'GridTable6ColorfulAccent1'] = "GridTable6ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent1"] = 'GridTable7ColorfulAccent1'] = "GridTable7ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent2"] = 'GridTable1LightAccent2'] = "GridTable1LightAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent2"] = 'GridTable2Accent2'] = "GridTable2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent2"] = 'GridTable3Accent2'] = "GridTable3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent2"] = 'GridTable4Accent2'] = "GridTable4Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent2"] = 'GridTable5DarkAccent2'] = "GridTable5DarkAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent2"] = 'GridTable6ColorfulAccent2'] = "GridTable6ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent2"] = 'GridTable7ColorfulAccent2'] = "GridTable7ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent3"] = 'GridTable1LightAccent3'] = "GridTable1LightAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent3"] = 'GridTable2Accent3'] = "GridTable2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent3"] = 'GridTable3Accent3'] = "GridTable3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent3"] = 'GridTable4Accent3'] = "GridTable4Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent3"] = 'GridTable5DarkAccent3'] = "GridTable5DarkAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent3"] = 'GridTable6ColorfulAccent3'] = "GridTable6ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent3"] = 'GridTable7ColorfulAccent3'] = "GridTable7ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent4"] = 'GridTable1LightAccent4'] = "GridTable1LightAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent4"] = 'GridTable2Accent4'] = "GridTable2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent4"] = 'GridTable3Accent4'] = "GridTable3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent4"] = 'GridTable4Accent4'] = "GridTable4Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent4"] = 'GridTable5DarkAccent4'] = "GridTable5DarkAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent4"] = 'GridTable6ColorfulAccent4'] = "GridTable6ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent4"] = 'GridTable7ColorfulAccent4'] = "GridTable7ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent5"] = 'GridTable1LightAccent5'] = "GridTable1LightAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent5"] = 'GridTable2Accent5'] = "GridTable2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent5"] = 'GridTable3Accent5'] = "GridTable3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent5"] = 'GridTable4Accent5'] = "GridTable4Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent5"] = 'GridTable5DarkAccent5'] = "GridTable5DarkAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent5"] = 'GridTable6ColorfulAccent5'] = "GridTable6ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent5"] = 'GridTable7ColorfulAccent5'] = "GridTable7ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent6"] = 'GridTable1LightAccent6'] = "GridTable1LightAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent6"] = 'GridTable2Accent6'] = "GridTable2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent6"] = 'GridTable3Accent6'] = "GridTable3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent6"] = 'GridTable4Accent6'] = "GridTable4Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent6"] = 'GridTable5DarkAccent6'] = "GridTable5DarkAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent6"] = 'GridTable6ColorfulAccent6'] = "GridTable6ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent6"] = 'GridTable7ColorfulAccent6'] = "GridTable7ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1Light"] = 'ListTable1Light'] = "ListTable1Light";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2"] = 'ListTable2'] = "ListTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3"] = 'ListTable3'] = "ListTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4"] = 'ListTable4'] = "ListTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5Dark"] = 'ListTable5Dark'] = "ListTable5Dark";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6Colorful"] = 'ListTable6Colorful'] = "ListTable6Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7Colorful"] = 'ListTable7Colorful'] = "ListTable7Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent1"] = 'ListTable1LightAccent1'] = "ListTable1LightAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent1"] = 'ListTable2Accent1'] = "ListTable2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent1"] = 'ListTable3Accent1'] = "ListTable3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent1"] = 'ListTable4Accent1'] = "ListTable4Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent1"] = 'ListTable5DarkAccent1'] = "ListTable5DarkAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent1"] = 'ListTable6ColorfulAccent1'] = "ListTable6ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent1"] = 'ListTable7ColorfulAccent1'] = "ListTable7ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent2"] = 'ListTable1LightAccent2'] = "ListTable1LightAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent2"] = 'ListTable2Accent2'] = "ListTable2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent2"] = 'ListTable3Accent2'] = "ListTable3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent2"] = 'ListTable4Accent2'] = "ListTable4Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent2"] = 'ListTable5DarkAccent2'] = "ListTable5DarkAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent2"] = 'ListTable6ColorfulAccent2'] = "ListTable6ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent2"] = 'ListTable7ColorfulAccent2'] = "ListTable7ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent3"] = 'ListTable1LightAccent3'] = "ListTable1LightAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent3"] = 'ListTable2Accent3'] = "ListTable2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent3"] = 'ListTable3Accent3'] = "ListTable3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent3"] = 'ListTable4Accent3'] = "ListTable4Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent3"] = 'ListTable5DarkAccent3'] = "ListTable5DarkAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent3"] = 'ListTable6ColorfulAccent3'] = "ListTable6ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent3"] = 'ListTable7ColorfulAccent3'] = "ListTable7ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent4"] = 'ListTable1LightAccent4'] = "ListTable1LightAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent4"] = 'ListTable2Accent4'] = "ListTable2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent4"] = 'ListTable3Accent4'] = "ListTable3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent4"] = 'ListTable4Accent4'] = "ListTable4Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent4"] = 'ListTable5DarkAccent4'] = "ListTable5DarkAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent4"] = 'ListTable6ColorfulAccent4'] = "ListTable6ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent4"] = 'ListTable7ColorfulAccent4'] = "ListTable7ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent5"] = 'ListTable1LightAccent5'] = "ListTable1LightAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent5"] = 'ListTable2Accent5'] = "ListTable2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent5"] = 'ListTable3Accent5'] = "ListTable3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent5"] = 'ListTable4Accent5'] = "ListTable4Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent5"] = 'ListTable5DarkAccent5'] = "ListTable5DarkAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent5"] = 'ListTable6ColorfulAccent5'] = "ListTable6ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent5"] = 'ListTable7ColorfulAccent5'] = "ListTable7ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent6"] = 'ListTable1LightAccent6'] = "ListTable1LightAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent6"] = 'ListTable2Accent6'] = "ListTable2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent6"] = 'ListTable3Accent6'] = "ListTable3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent6"] = 'ListTable4Accent6'] = "ListTable4Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent6"] = 'ListTable5DarkAccent6'] = "ListTable5DarkAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent6"] = 'ListTable6ColorfulAccent6'] = "ListTable6ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent6"] = 'ListTable7ColorfulAccent6'] = "ListTable7ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["User"] = 'User'] = "User";
        StyleIdentifierEnum[StyleIdentifierEnum["Nil"] = 'Nil'] = "Nil";
    })(StyleIdentifierEnum = Font.StyleIdentifierEnum || (Font.StyleIdentifierEnum = {}));
    let TextEffectEnum;
    (function (TextEffectEnum) {
        TextEffectEnum[TextEffectEnum["None"] = 'None'] = "None";
        TextEffectEnum[TextEffectEnum["LasVegasLights"] = 'LasVegasLights'] = "LasVegasLights";
        TextEffectEnum[TextEffectEnum["BlinkingBackground"] = 'BlinkingBackground'] = "BlinkingBackground";
        TextEffectEnum[TextEffectEnum["SparkleText"] = 'SparkleText'] = "SparkleText";
        TextEffectEnum[TextEffectEnum["MarchingBlackAnts"] = 'MarchingBlackAnts'] = "MarchingBlackAnts";
        TextEffectEnum[TextEffectEnum["MarchingRedAnts"] = 'MarchingRedAnts'] = "MarchingRedAnts";
        TextEffectEnum[TextEffectEnum["Shimmer"] = 'Shimmer'] = "Shimmer";
    })(TextEffectEnum = Font.TextEffectEnum || (Font.TextEffectEnum = {}));
    let UnderlineEnum;
    (function (UnderlineEnum) {
        UnderlineEnum[UnderlineEnum["None"] = 'None'] = "None";
        UnderlineEnum[UnderlineEnum["Single"] = 'Single'] = "Single";
        UnderlineEnum[UnderlineEnum["Words"] = 'Words'] = "Words";
        UnderlineEnum[UnderlineEnum["Double"] = 'Double'] = "Double";
        UnderlineEnum[UnderlineEnum["Dotted"] = 'Dotted'] = "Dotted";
        UnderlineEnum[UnderlineEnum["Thick"] = 'Thick'] = "Thick";
        UnderlineEnum[UnderlineEnum["Dash"] = 'Dash'] = "Dash";
        UnderlineEnum[UnderlineEnum["DotDash"] = 'DotDash'] = "DotDash";
        UnderlineEnum[UnderlineEnum["DotDotDash"] = 'DotDotDash'] = "DotDotDash";
        UnderlineEnum[UnderlineEnum["Wavy"] = 'Wavy'] = "Wavy";
        UnderlineEnum[UnderlineEnum["DottedHeavy"] = 'DottedHeavy'] = "DottedHeavy";
        UnderlineEnum[UnderlineEnum["DashHeavy"] = 'DashHeavy'] = "DashHeavy";
        UnderlineEnum[UnderlineEnum["DotDashHeavy"] = 'DotDashHeavy'] = "DotDashHeavy";
        UnderlineEnum[UnderlineEnum["DotDotDashHeavy"] = 'DotDotDashHeavy'] = "DotDotDashHeavy";
        UnderlineEnum[UnderlineEnum["WavyHeavy"] = 'WavyHeavy'] = "WavyHeavy";
        UnderlineEnum[UnderlineEnum["DashLong"] = 'DashLong'] = "DashLong";
        UnderlineEnum[UnderlineEnum["WavyDouble"] = 'WavyDouble'] = "WavyDouble";
        UnderlineEnum[UnderlineEnum["DashLongHeavy"] = 'DashLongHeavy'] = "DashLongHeavy";
    })(UnderlineEnum = Font.UnderlineEnum || (Font.UnderlineEnum = {}));
})(Font = exports.Font || (exports.Font = {}));
// tslint:enable:quotemark
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/paragraphs/{0}/runs/{1}/font.
 */
class FontResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FontResponse.attributeTypeMap);
    }
}
exports.FontResponse = FontResponse;
/**
 * Attribute type map
 */
FontResponse.attributeTypeMap = [
    {
        name: "font",
        baseName: "Font",
        type: "Font",
    }
];
/**
 * Collection of footnotes.
 */
class FootnoteCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FootnoteCollection.attributeTypeMap);
    }
}
exports.FootnoteCollection = FootnoteCollection;
/**
 * Attribute type map
 */
FootnoteCollection.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<Footnote>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/footnote/0.
 */
class FootnoteResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FootnoteResponse.attributeTypeMap);
    }
}
exports.FootnoteResponse = FootnoteResponse;
/**
 * Attribute type map
 */
FootnoteResponse.attributeTypeMap = [
    {
        name: "footnote",
        baseName: "Footnote",
        type: "Footnote",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/footnotes.
 */
class FootnotesResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FootnotesResponse.attributeTypeMap);
    }
}
exports.FootnotesResponse = FootnotesResponse;
/**
 * Attribute type map
 */
FootnotesResponse.attributeTypeMap = [
    {
        name: "footnotes",
        baseName: "Footnotes",
        type: "FootnoteCollection",
    }
];
/**
 * Represents DTO for collection of formfields.
 */
class FormFieldCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormFieldCollection.attributeTypeMap);
    }
}
exports.FormFieldCollection = FormFieldCollection;
/**
 * Attribute type map
 */
FormFieldCollection.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<FormField>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/paragraphs/{0}/formfields/{1}.
 */
class FormFieldResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormFieldResponse.attributeTypeMap);
    }
}
exports.FormFieldResponse = FormFieldResponse;
/**
 * Attribute type map
 */
FormFieldResponse.attributeTypeMap = [
    {
        name: "formField",
        baseName: "FormField",
        type: "FormField",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/{nodePath}/formfields.
 */
class FormFieldsResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormFieldsResponse.attributeTypeMap);
    }
}
exports.FormFieldsResponse = FormFieldsResponse;
/**
 * Attribute type map
 */
FormFieldsResponse.attributeTypeMap = [
    {
        name: "formFields",
        baseName: "FormFields",
        type: "FormFieldCollection",
    }
];
/**
 * HeaderFooter link element.
 */
class HeaderFooterLink extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HeaderFooterLink.attributeTypeMap);
    }
}
exports.HeaderFooterLink = HeaderFooterLink;
/**
 * Attribute type map
 */
HeaderFooterLink.attributeTypeMap = [
    {
        name: "type",
        baseName: "Type",
        type: "HeaderFooterLink.TypeEnum",
    }
];
/**
 * Enums for HeaderFooterLink
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (HeaderFooterLink) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["HeaderEven"] = 'HeaderEven'] = "HeaderEven";
        TypeEnum[TypeEnum["HeaderPrimary"] = 'HeaderPrimary'] = "HeaderPrimary";
        TypeEnum[TypeEnum["FooterEven"] = 'FooterEven'] = "FooterEven";
        TypeEnum[TypeEnum["FooterPrimary"] = 'FooterPrimary'] = "FooterPrimary";
        TypeEnum[TypeEnum["HeaderFirst"] = 'HeaderFirst'] = "HeaderFirst";
        TypeEnum[TypeEnum["FooterFirst"] = 'FooterFirst'] = "FooterFirst";
    })(TypeEnum = HeaderFooterLink.TypeEnum || (HeaderFooterLink.TypeEnum = {}));
})(HeaderFooterLink = exports.HeaderFooterLink || (exports.HeaderFooterLink = {}));
// tslint:enable:quotemark
/**
 * Collection of links to header/footers.
 */
class HeaderFooterLinkCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HeaderFooterLinkCollection.attributeTypeMap);
    }
}
exports.HeaderFooterLinkCollection = HeaderFooterLinkCollection;
/**
 * Attribute type map
 */
HeaderFooterLinkCollection.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<HeaderFooterLink>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/headersfooters/{0}.
 */
class HeaderFooterResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HeaderFooterResponse.attributeTypeMap);
    }
}
exports.HeaderFooterResponse = HeaderFooterResponse;
/**
 * Attribute type map
 */
HeaderFooterResponse.attributeTypeMap = [
    {
        name: "headerFooter",
        baseName: "HeaderFooter",
        type: "HeaderFooter",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/headersfooters.
 */
class HeaderFootersResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HeaderFootersResponse.attributeTypeMap);
    }
}
exports.HeaderFootersResponse = HeaderFootersResponse;
/**
 * Attribute type map
 */
HeaderFootersResponse.attributeTypeMap = [
    {
        name: "headerFooters",
        baseName: "HeaderFooters",
        type: "HeaderFooterLinkCollection",
    }
];
/**
 * container class for html save options.
 */
class HtmlSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HtmlSaveOptionsData.attributeTypeMap);
    }
}
exports.HtmlSaveOptionsData = HtmlSaveOptionsData;
/**
 * Attribute type map
 */
HtmlSaveOptionsData.attributeTypeMap = [
    {
        name: "allowNegativeIndent",
        baseName: "AllowNegativeIndent",
        type: "boolean",
    },
    {
        name: "cssClassNamePrefix",
        baseName: "CssClassNamePrefix",
        type: "string",
    },
    {
        name: "cssStyleSheetFileName",
        baseName: "CssStyleSheetFileName",
        type: "string",
    },
    {
        name: "cssStyleSheetType",
        baseName: "CssStyleSheetType",
        type: "string",
    },
    {
        name: "documentSplitCriteria",
        baseName: "DocumentSplitCriteria",
        type: "string",
    },
    {
        name: "documentSplitHeadingLevel",
        baseName: "DocumentSplitHeadingLevel",
        type: "number",
    },
    {
        name: "encoding",
        baseName: "Encoding",
        type: "string",
    },
    {
        name: "exportDocumentProperties",
        baseName: "ExportDocumentProperties",
        type: "boolean",
    },
    {
        name: "exportDropDownFormFieldAsText",
        baseName: "ExportDropDownFormFieldAsText",
        type: "boolean",
    },
    {
        name: "exportFontResources",
        baseName: "ExportFontResources",
        type: "boolean",
    },
    {
        name: "exportFontsAsBase64",
        baseName: "ExportFontsAsBase64",
        type: "boolean",
    },
    {
        name: "exportHeadersFootersMode",
        baseName: "ExportHeadersFootersMode",
        type: "string",
    },
    {
        name: "exportImagesAsBase64",
        baseName: "ExportImagesAsBase64",
        type: "boolean",
    },
    {
        name: "exportLanguageInformation",
        baseName: "ExportLanguageInformation",
        type: "boolean",
    },
    {
        name: "exportListLabels",
        baseName: "ExportListLabels",
        type: "string",
    },
    {
        name: "exportOriginalUrlForLinkedImages",
        baseName: "ExportOriginalUrlForLinkedImages",
        type: "boolean",
    },
    {
        name: "exportPageMargins",
        baseName: "ExportPageMargins",
        type: "boolean",
    },
    {
        name: "exportPageSetup",
        baseName: "ExportPageSetup",
        type: "boolean",
    },
    {
        name: "exportRelativeFontSize",
        baseName: "ExportRelativeFontSize",
        type: "boolean",
    },
    {
        name: "exportRoundtripInformation",
        baseName: "ExportRoundtripInformation",
        type: "boolean",
    },
    {
        name: "exportTextBoxAsSvg",
        baseName: "ExportTextBoxAsSvg",
        type: "boolean",
    },
    {
        name: "exportTextInputFormFieldAsText",
        baseName: "ExportTextInputFormFieldAsText",
        type: "boolean",
    },
    {
        name: "exportTocPageNumbers",
        baseName: "ExportTocPageNumbers",
        type: "boolean",
    },
    {
        name: "exportXhtmlTransitional",
        baseName: "ExportXhtmlTransitional",
        type: "boolean",
    },
    {
        name: "fontResourcesSubsettingSizeThreshold",
        baseName: "FontResourcesSubsettingSizeThreshold",
        type: "number",
    },
    {
        name: "fontsFolder",
        baseName: "FontsFolder",
        type: "string",
    },
    {
        name: "fontsFolderAlias",
        baseName: "FontsFolderAlias",
        type: "string",
    },
    {
        name: "htmlVersion",
        baseName: "HtmlVersion",
        type: "HtmlSaveOptionsData.HtmlVersionEnum",
    },
    {
        name: "imageResolution",
        baseName: "ImageResolution",
        type: "number",
    },
    {
        name: "imagesFolder",
        baseName: "ImagesFolder",
        type: "string",
    },
    {
        name: "imagesFolderAlias",
        baseName: "ImagesFolderAlias",
        type: "string",
    },
    {
        name: "metafileFormat",
        baseName: "MetafileFormat",
        type: "HtmlSaveOptionsData.MetafileFormatEnum",
    },
    {
        name: "officeMathOutputMode",
        baseName: "OfficeMathOutputMode",
        type: "HtmlSaveOptionsData.OfficeMathOutputModeEnum",
    },
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    },
    {
        name: "resolveFontNames",
        baseName: "ResolveFontNames",
        type: "boolean",
    },
    {
        name: "resourceFolder",
        baseName: "ResourceFolder",
        type: "string",
    },
    {
        name: "resourceFolderAlias",
        baseName: "ResourceFolderAlias",
        type: "string",
    },
    {
        name: "scaleImageToShapeSize",
        baseName: "ScaleImageToShapeSize",
        type: "boolean",
    },
    {
        name: "tableWidthOutputMode",
        baseName: "TableWidthOutputMode",
        type: "string",
    }
];
/**
 * Enums for HtmlSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (HtmlSaveOptionsData) {
    let HtmlVersionEnum;
    (function (HtmlVersionEnum) {
        HtmlVersionEnum[HtmlVersionEnum["Xhtml"] = 'Xhtml'] = "Xhtml";
        HtmlVersionEnum[HtmlVersionEnum["Html5"] = 'Html5'] = "Html5";
    })(HtmlVersionEnum = HtmlSaveOptionsData.HtmlVersionEnum || (HtmlSaveOptionsData.HtmlVersionEnum = {}));
    let MetafileFormatEnum;
    (function (MetafileFormatEnum) {
        MetafileFormatEnum[MetafileFormatEnum["Png"] = 'Png'] = "Png";
        MetafileFormatEnum[MetafileFormatEnum["Svg"] = 'Svg'] = "Svg";
        MetafileFormatEnum[MetafileFormatEnum["EmfOrWmf"] = 'EmfOrWmf'] = "EmfOrWmf";
    })(MetafileFormatEnum = HtmlSaveOptionsData.MetafileFormatEnum || (HtmlSaveOptionsData.MetafileFormatEnum = {}));
    let OfficeMathOutputModeEnum;
    (function (OfficeMathOutputModeEnum) {
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["Image"] = 'Image'] = "Image";
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["MathML"] = 'MathML'] = "MathML";
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["Text"] = 'Text'] = "Text";
    })(OfficeMathOutputModeEnum = HtmlSaveOptionsData.OfficeMathOutputModeEnum || (HtmlSaveOptionsData.OfficeMathOutputModeEnum = {}));
})(HtmlSaveOptionsData = exports.HtmlSaveOptionsData || (exports.HtmlSaveOptionsData = {}));
// tslint:enable:quotemark
/**
 * Hyperlink element.
 */
class Hyperlink extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Hyperlink.attributeTypeMap);
    }
}
exports.Hyperlink = Hyperlink;
/**
 * Attribute type map
 */
Hyperlink.attributeTypeMap = [
    {
        name: "displayText",
        baseName: "DisplayText",
        type: "string",
    },
    {
        name: "value",
        baseName: "Value",
        type: "string",
    }
];
/**
 * This response should be returned by the service when handling:  GET /{name}/hyperlinks/{hyperlinkIndex} .
 */
class HyperlinkResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HyperlinkResponse.attributeTypeMap);
    }
}
exports.HyperlinkResponse = HyperlinkResponse;
/**
 * Attribute type map
 */
HyperlinkResponse.attributeTypeMap = [
    {
        name: "hyperlink",
        baseName: "Hyperlink",
        type: "Hyperlink",
    }
];
/**
 * Collection of .
 */
class Hyperlinks extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Hyperlinks.attributeTypeMap);
    }
}
exports.Hyperlinks = Hyperlinks;
/**
 * Attribute type map
 */
Hyperlinks.attributeTypeMap = [
    {
        name: "hyperlinkList",
        baseName: "HyperlinkList",
        type: "Array<Hyperlink>",
    }
];
/**
 * This response should be returned by the service when handling:  GET /{name}/hyperlinks .
 */
class HyperlinksResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HyperlinksResponse.attributeTypeMap);
    }
}
exports.HyperlinksResponse = HyperlinksResponse;
/**
 * Attribute type map
 */
HyperlinksResponse.attributeTypeMap = [
    {
        name: "hyperlinks",
        baseName: "Hyperlinks",
        type: "Hyperlinks",
    }
];
/**
 * Reference to node.
 */
class NodeLink extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(NodeLink.attributeTypeMap);
    }
}
exports.NodeLink = NodeLink;
/**
 * Attribute type map
 */
NodeLink.attributeTypeMap = [
    {
        name: "nodeId",
        baseName: "NodeId",
        type: "string",
    }
];
/**
 * container class for odt/ott save options.
 */
class OdtSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdtSaveOptionsData.attributeTypeMap);
    }
}
exports.OdtSaveOptionsData = OdtSaveOptionsData;
/**
 * Attribute type map
 */
OdtSaveOptionsData.attributeTypeMap = [
    {
        name: "isStrictSchema11",
        baseName: "IsStrictSchema11",
        type: "boolean",
    },
    {
        name: "measureUnit",
        baseName: "MeasureUnit",
        type: "OdtSaveOptionsData.MeasureUnitEnum",
    },
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    }
];
/**
 * Enums for OdtSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (OdtSaveOptionsData) {
    let MeasureUnitEnum;
    (function (MeasureUnitEnum) {
        MeasureUnitEnum[MeasureUnitEnum["Centimeters"] = 'Centimeters'] = "Centimeters";
        MeasureUnitEnum[MeasureUnitEnum["Inches"] = 'Inches'] = "Inches";
    })(MeasureUnitEnum = OdtSaveOptionsData.MeasureUnitEnum || (OdtSaveOptionsData.MeasureUnitEnum = {}));
})(OdtSaveOptionsData = exports.OdtSaveOptionsData || (exports.OdtSaveOptionsData = {}));
// tslint:enable:quotemark
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/officeMathObjects/0.
 */
class OfficeMathObjectResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OfficeMathObjectResponse.attributeTypeMap);
    }
}
exports.OfficeMathObjectResponse = OfficeMathObjectResponse;
/**
 * Attribute type map
 */
OfficeMathObjectResponse.attributeTypeMap = [
    {
        name: "officeMathObject",
        baseName: "OfficeMathObject",
        type: "OfficeMathObject",
    }
];
/**
 * Collection of OfficeMath objects.
 */
class OfficeMathObjectsCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OfficeMathObjectsCollection.attributeTypeMap);
    }
}
exports.OfficeMathObjectsCollection = OfficeMathObjectsCollection;
/**
 * Attribute type map
 */
OfficeMathObjectsCollection.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<OfficeMathObject>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/OfficeMathObjects.
 */
class OfficeMathObjectsResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OfficeMathObjectsResponse.attributeTypeMap);
    }
}
exports.OfficeMathObjectsResponse = OfficeMathObjectsResponse;
/**
 * Attribute type map
 */
OfficeMathObjectsResponse.attributeTypeMap = [
    {
        name: "officeMathObjects",
        baseName: "OfficeMathObjects",
        type: "OfficeMathObjectsCollection",
    }
];
/**
 * container class for docx/docm/dotx/dotm/flatopc save options.
 */
class OoxmlSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OoxmlSaveOptionsData.attributeTypeMap);
    }
}
exports.OoxmlSaveOptionsData = OoxmlSaveOptionsData;
/**
 * Attribute type map
 */
OoxmlSaveOptionsData.attributeTypeMap = [
    {
        name: "compliance",
        baseName: "Compliance",
        type: "string",
    },
    {
        name: "password",
        baseName: "Password",
        type: "string",
    },
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    }
];
/**
 * Represents the page setup properties of a section.
 */
class PageSetup extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PageSetup.attributeTypeMap);
    }
}
exports.PageSetup = PageSetup;
/**
 * Attribute type map
 */
PageSetup.attributeTypeMap = [
    {
        name: "bidi",
        baseName: "Bidi",
        type: "boolean",
    },
    {
        name: "borderAlwaysInFront",
        baseName: "BorderAlwaysInFront",
        type: "boolean",
    },
    {
        name: "borderAppliesTo",
        baseName: "BorderAppliesTo",
        type: "PageSetup.BorderAppliesToEnum",
    },
    {
        name: "borderDistanceFrom",
        baseName: "BorderDistanceFrom",
        type: "PageSetup.BorderDistanceFromEnum",
    },
    {
        name: "bottomMargin",
        baseName: "BottomMargin",
        type: "number",
    },
    {
        name: "differentFirstPageHeaderFooter",
        baseName: "DifferentFirstPageHeaderFooter",
        type: "boolean",
    },
    {
        name: "firstPageTray",
        baseName: "FirstPageTray",
        type: "number",
    },
    {
        name: "footerDistance",
        baseName: "FooterDistance",
        type: "number",
    },
    {
        name: "gutter",
        baseName: "Gutter",
        type: "number",
    },
    {
        name: "headerDistance",
        baseName: "HeaderDistance",
        type: "number",
    },
    {
        name: "leftMargin",
        baseName: "LeftMargin",
        type: "number",
    },
    {
        name: "lineNumberCountBy",
        baseName: "LineNumberCountBy",
        type: "number",
    },
    {
        name: "lineNumberDistanceFromText",
        baseName: "LineNumberDistanceFromText",
        type: "number",
    },
    {
        name: "lineNumberRestartMode",
        baseName: "LineNumberRestartMode",
        type: "PageSetup.LineNumberRestartModeEnum",
    },
    {
        name: "lineStartingNumber",
        baseName: "LineStartingNumber",
        type: "number",
    },
    {
        name: "orientation",
        baseName: "Orientation",
        type: "PageSetup.OrientationEnum",
    },
    {
        name: "otherPagesTray",
        baseName: "OtherPagesTray",
        type: "number",
    },
    {
        name: "pageHeight",
        baseName: "PageHeight",
        type: "number",
    },
    {
        name: "pageNumberStyle",
        baseName: "PageNumberStyle",
        type: "PageSetup.PageNumberStyleEnum",
    },
    {
        name: "pageStartingNumber",
        baseName: "PageStartingNumber",
        type: "number",
    },
    {
        name: "pageWidth",
        baseName: "PageWidth",
        type: "number",
    },
    {
        name: "paperSize",
        baseName: "PaperSize",
        type: "PageSetup.PaperSizeEnum",
    },
    {
        name: "restartPageNumbering",
        baseName: "RestartPageNumbering",
        type: "boolean",
    },
    {
        name: "rightMargin",
        baseName: "RightMargin",
        type: "number",
    },
    {
        name: "rtlGutter",
        baseName: "RtlGutter",
        type: "boolean",
    },
    {
        name: "sectionStart",
        baseName: "SectionStart",
        type: "PageSetup.SectionStartEnum",
    },
    {
        name: "suppressEndnotes",
        baseName: "SuppressEndnotes",
        type: "boolean",
    },
    {
        name: "topMargin",
        baseName: "TopMargin",
        type: "number",
    },
    {
        name: "verticalAlignment",
        baseName: "VerticalAlignment",
        type: "PageSetup.VerticalAlignmentEnum",
    }
];
/**
 * Enums for PageSetup
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (PageSetup) {
    let BorderAppliesToEnum;
    (function (BorderAppliesToEnum) {
        BorderAppliesToEnum[BorderAppliesToEnum["AllPages"] = 'AllPages'] = "AllPages";
        BorderAppliesToEnum[BorderAppliesToEnum["FirstPage"] = 'FirstPage'] = "FirstPage";
        BorderAppliesToEnum[BorderAppliesToEnum["OtherPages"] = 'OtherPages'] = "OtherPages";
    })(BorderAppliesToEnum = PageSetup.BorderAppliesToEnum || (PageSetup.BorderAppliesToEnum = {}));
    let BorderDistanceFromEnum;
    (function (BorderDistanceFromEnum) {
        BorderDistanceFromEnum[BorderDistanceFromEnum["Text"] = 'Text'] = "Text";
        BorderDistanceFromEnum[BorderDistanceFromEnum["PageEdge"] = 'PageEdge'] = "PageEdge";
    })(BorderDistanceFromEnum = PageSetup.BorderDistanceFromEnum || (PageSetup.BorderDistanceFromEnum = {}));
    let LineNumberRestartModeEnum;
    (function (LineNumberRestartModeEnum) {
        LineNumberRestartModeEnum[LineNumberRestartModeEnum["RestartPage"] = 'RestartPage'] = "RestartPage";
        LineNumberRestartModeEnum[LineNumberRestartModeEnum["RestartSection"] = 'RestartSection'] = "RestartSection";
        LineNumberRestartModeEnum[LineNumberRestartModeEnum["Continuous"] = 'Continuous'] = "Continuous";
    })(LineNumberRestartModeEnum = PageSetup.LineNumberRestartModeEnum || (PageSetup.LineNumberRestartModeEnum = {}));
    let OrientationEnum;
    (function (OrientationEnum) {
        OrientationEnum[OrientationEnum["Portrait"] = 'Portrait'] = "Portrait";
        OrientationEnum[OrientationEnum["Landscape"] = 'Landscape'] = "Landscape";
    })(OrientationEnum = PageSetup.OrientationEnum || (PageSetup.OrientationEnum = {}));
    let PageNumberStyleEnum;
    (function (PageNumberStyleEnum) {
        PageNumberStyleEnum[PageNumberStyleEnum["Arabic"] = 'Arabic'] = "Arabic";
        PageNumberStyleEnum[PageNumberStyleEnum["UppercaseRoman"] = 'UppercaseRoman'] = "UppercaseRoman";
        PageNumberStyleEnum[PageNumberStyleEnum["LowercaseRoman"] = 'LowercaseRoman'] = "LowercaseRoman";
        PageNumberStyleEnum[PageNumberStyleEnum["UppercaseLetter"] = 'UppercaseLetter'] = "UppercaseLetter";
        PageNumberStyleEnum[PageNumberStyleEnum["LowercaseLetter"] = 'LowercaseLetter'] = "LowercaseLetter";
        PageNumberStyleEnum[PageNumberStyleEnum["Ordinal"] = 'Ordinal'] = "Ordinal";
        PageNumberStyleEnum[PageNumberStyleEnum["Number"] = 'Number'] = "Number";
        PageNumberStyleEnum[PageNumberStyleEnum["OrdinalText"] = 'OrdinalText'] = "OrdinalText";
        PageNumberStyleEnum[PageNumberStyleEnum["Hex"] = 'Hex'] = "Hex";
        PageNumberStyleEnum[PageNumberStyleEnum["ChicagoManual"] = 'ChicagoManual'] = "ChicagoManual";
        PageNumberStyleEnum[PageNumberStyleEnum["Kanji"] = 'Kanji'] = "Kanji";
        PageNumberStyleEnum[PageNumberStyleEnum["KanjiDigit"] = 'KanjiDigit'] = "KanjiDigit";
        PageNumberStyleEnum[PageNumberStyleEnum["AiueoHalfWidth"] = 'AiueoHalfWidth'] = "AiueoHalfWidth";
        PageNumberStyleEnum[PageNumberStyleEnum["IrohaHalfWidth"] = 'IrohaHalfWidth'] = "IrohaHalfWidth";
        PageNumberStyleEnum[PageNumberStyleEnum["ArabicFullWidth"] = 'ArabicFullWidth'] = "ArabicFullWidth";
        PageNumberStyleEnum[PageNumberStyleEnum["ArabicHalfWidth"] = 'ArabicHalfWidth'] = "ArabicHalfWidth";
        PageNumberStyleEnum[PageNumberStyleEnum["KanjiTraditional"] = 'KanjiTraditional'] = "KanjiTraditional";
        PageNumberStyleEnum[PageNumberStyleEnum["KanjiTraditional2"] = 'KanjiTraditional2'] = "KanjiTraditional2";
        PageNumberStyleEnum[PageNumberStyleEnum["NumberInCircle"] = 'NumberInCircle'] = "NumberInCircle";
        PageNumberStyleEnum[PageNumberStyleEnum["DecimalFullWidth"] = 'DecimalFullWidth'] = "DecimalFullWidth";
        PageNumberStyleEnum[PageNumberStyleEnum["Aiueo"] = 'Aiueo'] = "Aiueo";
        PageNumberStyleEnum[PageNumberStyleEnum["Iroha"] = 'Iroha'] = "Iroha";
        PageNumberStyleEnum[PageNumberStyleEnum["LeadingZero"] = 'LeadingZero'] = "LeadingZero";
        PageNumberStyleEnum[PageNumberStyleEnum["Bullet"] = 'Bullet'] = "Bullet";
        PageNumberStyleEnum[PageNumberStyleEnum["Ganada"] = 'Ganada'] = "Ganada";
        PageNumberStyleEnum[PageNumberStyleEnum["Chosung"] = 'Chosung'] = "Chosung";
        PageNumberStyleEnum[PageNumberStyleEnum["GB1"] = 'GB1'] = "GB1";
        PageNumberStyleEnum[PageNumberStyleEnum["GB2"] = 'GB2'] = "GB2";
        PageNumberStyleEnum[PageNumberStyleEnum["GB3"] = 'GB3'] = "GB3";
        PageNumberStyleEnum[PageNumberStyleEnum["GB4"] = 'GB4'] = "GB4";
        PageNumberStyleEnum[PageNumberStyleEnum["Zodiac1"] = 'Zodiac1'] = "Zodiac1";
        PageNumberStyleEnum[PageNumberStyleEnum["Zodiac2"] = 'Zodiac2'] = "Zodiac2";
        PageNumberStyleEnum[PageNumberStyleEnum["Zodiac3"] = 'Zodiac3'] = "Zodiac3";
        PageNumberStyleEnum[PageNumberStyleEnum["TradChinNum1"] = 'TradChinNum1'] = "TradChinNum1";
        PageNumberStyleEnum[PageNumberStyleEnum["TradChinNum2"] = 'TradChinNum2'] = "TradChinNum2";
        PageNumberStyleEnum[PageNumberStyleEnum["TradChinNum3"] = 'TradChinNum3'] = "TradChinNum3";
        PageNumberStyleEnum[PageNumberStyleEnum["TradChinNum4"] = 'TradChinNum4'] = "TradChinNum4";
        PageNumberStyleEnum[PageNumberStyleEnum["SimpChinNum1"] = 'SimpChinNum1'] = "SimpChinNum1";
        PageNumberStyleEnum[PageNumberStyleEnum["SimpChinNum2"] = 'SimpChinNum2'] = "SimpChinNum2";
        PageNumberStyleEnum[PageNumberStyleEnum["SimpChinNum3"] = 'SimpChinNum3'] = "SimpChinNum3";
        PageNumberStyleEnum[PageNumberStyleEnum["SimpChinNum4"] = 'SimpChinNum4'] = "SimpChinNum4";
        PageNumberStyleEnum[PageNumberStyleEnum["HanjaRead"] = 'HanjaRead'] = "HanjaRead";
        PageNumberStyleEnum[PageNumberStyleEnum["HanjaReadDigit"] = 'HanjaReadDigit'] = "HanjaReadDigit";
        PageNumberStyleEnum[PageNumberStyleEnum["Hangul"] = 'Hangul'] = "Hangul";
        PageNumberStyleEnum[PageNumberStyleEnum["Hanja"] = 'Hanja'] = "Hanja";
        PageNumberStyleEnum[PageNumberStyleEnum["Hebrew1"] = 'Hebrew1'] = "Hebrew1";
        PageNumberStyleEnum[PageNumberStyleEnum["Arabic1"] = 'Arabic1'] = "Arabic1";
        PageNumberStyleEnum[PageNumberStyleEnum["Hebrew2"] = 'Hebrew2'] = "Hebrew2";
        PageNumberStyleEnum[PageNumberStyleEnum["Arabic2"] = 'Arabic2'] = "Arabic2";
        PageNumberStyleEnum[PageNumberStyleEnum["HindiLetter1"] = 'HindiLetter1'] = "HindiLetter1";
        PageNumberStyleEnum[PageNumberStyleEnum["HindiLetter2"] = 'HindiLetter2'] = "HindiLetter2";
        PageNumberStyleEnum[PageNumberStyleEnum["HindiArabic"] = 'HindiArabic'] = "HindiArabic";
        PageNumberStyleEnum[PageNumberStyleEnum["HindiCardinalText"] = 'HindiCardinalText'] = "HindiCardinalText";
        PageNumberStyleEnum[PageNumberStyleEnum["ThaiLetter"] = 'ThaiLetter'] = "ThaiLetter";
        PageNumberStyleEnum[PageNumberStyleEnum["ThaiArabic"] = 'ThaiArabic'] = "ThaiArabic";
        PageNumberStyleEnum[PageNumberStyleEnum["ThaiCardinalText"] = 'ThaiCardinalText'] = "ThaiCardinalText";
        PageNumberStyleEnum[PageNumberStyleEnum["VietCardinalText"] = 'VietCardinalText'] = "VietCardinalText";
        PageNumberStyleEnum[PageNumberStyleEnum["NumberInDash"] = 'NumberInDash'] = "NumberInDash";
        PageNumberStyleEnum[PageNumberStyleEnum["LowercaseRussian"] = 'LowercaseRussian'] = "LowercaseRussian";
        PageNumberStyleEnum[PageNumberStyleEnum["UppercaseRussian"] = 'UppercaseRussian'] = "UppercaseRussian";
        PageNumberStyleEnum[PageNumberStyleEnum["None"] = 'None'] = "None";
        PageNumberStyleEnum[PageNumberStyleEnum["Custom"] = 'Custom'] = "Custom";
    })(PageNumberStyleEnum = PageSetup.PageNumberStyleEnum || (PageSetup.PageNumberStyleEnum = {}));
    let PaperSizeEnum;
    (function (PaperSizeEnum) {
        PaperSizeEnum[PaperSizeEnum["A3"] = 'A3'] = "A3";
        PaperSizeEnum[PaperSizeEnum["A4"] = 'A4'] = "A4";
        PaperSizeEnum[PaperSizeEnum["A5"] = 'A5'] = "A5";
        PaperSizeEnum[PaperSizeEnum["B4"] = 'B4'] = "B4";
        PaperSizeEnum[PaperSizeEnum["B5"] = 'B5'] = "B5";
        PaperSizeEnum[PaperSizeEnum["Executive"] = 'Executive'] = "Executive";
        PaperSizeEnum[PaperSizeEnum["Folio"] = 'Folio'] = "Folio";
        PaperSizeEnum[PaperSizeEnum["Ledger"] = 'Ledger'] = "Ledger";
        PaperSizeEnum[PaperSizeEnum["Legal"] = 'Legal'] = "Legal";
        PaperSizeEnum[PaperSizeEnum["Letter"] = 'Letter'] = "Letter";
        PaperSizeEnum[PaperSizeEnum["EnvelopeDL"] = 'EnvelopeDL'] = "EnvelopeDL";
        PaperSizeEnum[PaperSizeEnum["Quarto"] = 'Quarto'] = "Quarto";
        PaperSizeEnum[PaperSizeEnum["Statement"] = 'Statement'] = "Statement";
        PaperSizeEnum[PaperSizeEnum["Tabloid"] = 'Tabloid'] = "Tabloid";
        PaperSizeEnum[PaperSizeEnum["Paper10x14"] = 'Paper10x14'] = "Paper10x14";
        PaperSizeEnum[PaperSizeEnum["Paper11x17"] = 'Paper11x17'] = "Paper11x17";
        PaperSizeEnum[PaperSizeEnum["Custom"] = 'Custom'] = "Custom";
    })(PaperSizeEnum = PageSetup.PaperSizeEnum || (PageSetup.PaperSizeEnum = {}));
    let SectionStartEnum;
    (function (SectionStartEnum) {
        SectionStartEnum[SectionStartEnum["Continuous"] = 'Continuous'] = "Continuous";
        SectionStartEnum[SectionStartEnum["NewColumn"] = 'NewColumn'] = "NewColumn";
        SectionStartEnum[SectionStartEnum["NewPage"] = 'NewPage'] = "NewPage";
        SectionStartEnum[SectionStartEnum["EvenPage"] = 'EvenPage'] = "EvenPage";
        SectionStartEnum[SectionStartEnum["OddPage"] = 'OddPage'] = "OddPage";
    })(SectionStartEnum = PageSetup.SectionStartEnum || (PageSetup.SectionStartEnum = {}));
    let VerticalAlignmentEnum;
    (function (VerticalAlignmentEnum) {
        VerticalAlignmentEnum[VerticalAlignmentEnum["Top"] = 'Top'] = "Top";
        VerticalAlignmentEnum[VerticalAlignmentEnum["Center"] = 'Center'] = "Center";
        VerticalAlignmentEnum[VerticalAlignmentEnum["Justify"] = 'Justify'] = "Justify";
        VerticalAlignmentEnum[VerticalAlignmentEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(VerticalAlignmentEnum = PageSetup.VerticalAlignmentEnum || (PageSetup.VerticalAlignmentEnum = {}));
})(PageSetup = exports.PageSetup || (exports.PageSetup = {}));
// tslint:enable:quotemark
/**
 * Paragraph format element.
 */
class ParagraphFormat extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ParagraphFormat.attributeTypeMap);
    }
}
exports.ParagraphFormat = ParagraphFormat;
/**
 * Attribute type map
 */
ParagraphFormat.attributeTypeMap = [
    {
        name: "addSpaceBetweenFarEastAndAlpha",
        baseName: "AddSpaceBetweenFarEastAndAlpha",
        type: "boolean",
    },
    {
        name: "addSpaceBetweenFarEastAndDigit",
        baseName: "AddSpaceBetweenFarEastAndDigit",
        type: "boolean",
    },
    {
        name: "alignment",
        baseName: "Alignment",
        type: "ParagraphFormat.AlignmentEnum",
    },
    {
        name: "bidi",
        baseName: "Bidi",
        type: "boolean",
    },
    {
        name: "dropCapPosition",
        baseName: "DropCapPosition",
        type: "ParagraphFormat.DropCapPositionEnum",
    },
    {
        name: "firstLineIndent",
        baseName: "FirstLineIndent",
        type: "number",
    },
    {
        name: "isListItem",
        baseName: "IsListItem",
        type: "boolean",
    },
    {
        name: "keepTogether",
        baseName: "KeepTogether",
        type: "boolean",
    },
    {
        name: "keepWithNext",
        baseName: "KeepWithNext",
        type: "boolean",
    },
    {
        name: "leftIndent",
        baseName: "LeftIndent",
        type: "number",
    },
    {
        name: "lineSpacing",
        baseName: "LineSpacing",
        type: "number",
    },
    {
        name: "lineSpacingRule",
        baseName: "LineSpacingRule",
        type: "ParagraphFormat.LineSpacingRuleEnum",
    },
    {
        name: "linesToDrop",
        baseName: "LinesToDrop",
        type: "number",
    },
    {
        name: "noSpaceBetweenParagraphsOfSameStyle",
        baseName: "NoSpaceBetweenParagraphsOfSameStyle",
        type: "boolean",
    },
    {
        name: "outlineLevel",
        baseName: "OutlineLevel",
        type: "ParagraphFormat.OutlineLevelEnum",
    },
    {
        name: "pageBreakBefore",
        baseName: "PageBreakBefore",
        type: "boolean",
    },
    {
        name: "rightIndent",
        baseName: "RightIndent",
        type: "number",
    },
    {
        name: "spaceAfter",
        baseName: "SpaceAfter",
        type: "number",
    },
    {
        name: "spaceAfterAuto",
        baseName: "SpaceAfterAuto",
        type: "boolean",
    },
    {
        name: "spaceBefore",
        baseName: "SpaceBefore",
        type: "number",
    },
    {
        name: "spaceBeforeAuto",
        baseName: "SpaceBeforeAuto",
        type: "boolean",
    },
    {
        name: "styleIdentifier",
        baseName: "StyleIdentifier",
        type: "ParagraphFormat.StyleIdentifierEnum",
    },
    {
        name: "styleName",
        baseName: "StyleName",
        type: "string",
    },
    {
        name: "suppressAutoHyphens",
        baseName: "SuppressAutoHyphens",
        type: "boolean",
    },
    {
        name: "suppressLineNumbers",
        baseName: "SuppressLineNumbers",
        type: "boolean",
    },
    {
        name: "widowControl",
        baseName: "WidowControl",
        type: "boolean",
    }
];
/**
 * Enums for ParagraphFormat
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (ParagraphFormat) {
    let AlignmentEnum;
    (function (AlignmentEnum) {
        AlignmentEnum[AlignmentEnum["Left"] = 'Left'] = "Left";
        AlignmentEnum[AlignmentEnum["Center"] = 'Center'] = "Center";
        AlignmentEnum[AlignmentEnum["Right"] = 'Right'] = "Right";
        AlignmentEnum[AlignmentEnum["Justify"] = 'Justify'] = "Justify";
        AlignmentEnum[AlignmentEnum["Distributed"] = 'Distributed'] = "Distributed";
        AlignmentEnum[AlignmentEnum["ArabicMediumKashida"] = 'ArabicMediumKashida'] = "ArabicMediumKashida";
        AlignmentEnum[AlignmentEnum["ArabicHighKashida"] = 'ArabicHighKashida'] = "ArabicHighKashida";
        AlignmentEnum[AlignmentEnum["ArabicLowKashida"] = 'ArabicLowKashida'] = "ArabicLowKashida";
        AlignmentEnum[AlignmentEnum["ThaiDistributed"] = 'ThaiDistributed'] = "ThaiDistributed";
    })(AlignmentEnum = ParagraphFormat.AlignmentEnum || (ParagraphFormat.AlignmentEnum = {}));
    let DropCapPositionEnum;
    (function (DropCapPositionEnum) {
        DropCapPositionEnum[DropCapPositionEnum["None"] = 'None'] = "None";
        DropCapPositionEnum[DropCapPositionEnum["Normal"] = 'Normal'] = "Normal";
        DropCapPositionEnum[DropCapPositionEnum["Margin"] = 'Margin'] = "Margin";
    })(DropCapPositionEnum = ParagraphFormat.DropCapPositionEnum || (ParagraphFormat.DropCapPositionEnum = {}));
    let LineSpacingRuleEnum;
    (function (LineSpacingRuleEnum) {
        LineSpacingRuleEnum[LineSpacingRuleEnum["AtLeast"] = 'AtLeast'] = "AtLeast";
        LineSpacingRuleEnum[LineSpacingRuleEnum["Exactly"] = 'Exactly'] = "Exactly";
        LineSpacingRuleEnum[LineSpacingRuleEnum["Multiple"] = 'Multiple'] = "Multiple";
    })(LineSpacingRuleEnum = ParagraphFormat.LineSpacingRuleEnum || (ParagraphFormat.LineSpacingRuleEnum = {}));
    let OutlineLevelEnum;
    (function (OutlineLevelEnum) {
        OutlineLevelEnum[OutlineLevelEnum["Level1"] = 'Level1'] = "Level1";
        OutlineLevelEnum[OutlineLevelEnum["Level2"] = 'Level2'] = "Level2";
        OutlineLevelEnum[OutlineLevelEnum["Level3"] = 'Level3'] = "Level3";
        OutlineLevelEnum[OutlineLevelEnum["Level4"] = 'Level4'] = "Level4";
        OutlineLevelEnum[OutlineLevelEnum["Level5"] = 'Level5'] = "Level5";
        OutlineLevelEnum[OutlineLevelEnum["Level6"] = 'Level6'] = "Level6";
        OutlineLevelEnum[OutlineLevelEnum["Level7"] = 'Level7'] = "Level7";
        OutlineLevelEnum[OutlineLevelEnum["Level8"] = 'Level8'] = "Level8";
        OutlineLevelEnum[OutlineLevelEnum["Level9"] = 'Level9'] = "Level9";
        OutlineLevelEnum[OutlineLevelEnum["BodyText"] = 'BodyText'] = "BodyText";
    })(OutlineLevelEnum = ParagraphFormat.OutlineLevelEnum || (ParagraphFormat.OutlineLevelEnum = {}));
    let StyleIdentifierEnum;
    (function (StyleIdentifierEnum) {
        StyleIdentifierEnum[StyleIdentifierEnum["Normal"] = 'Normal'] = "Normal";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading1"] = 'Heading1'] = "Heading1";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading2"] = 'Heading2'] = "Heading2";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading3"] = 'Heading3'] = "Heading3";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading4"] = 'Heading4'] = "Heading4";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading5"] = 'Heading5'] = "Heading5";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading6"] = 'Heading6'] = "Heading6";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading7"] = 'Heading7'] = "Heading7";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading8"] = 'Heading8'] = "Heading8";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading9"] = 'Heading9'] = "Heading9";
        StyleIdentifierEnum[StyleIdentifierEnum["Index1"] = 'Index1'] = "Index1";
        StyleIdentifierEnum[StyleIdentifierEnum["Index2"] = 'Index2'] = "Index2";
        StyleIdentifierEnum[StyleIdentifierEnum["Index3"] = 'Index3'] = "Index3";
        StyleIdentifierEnum[StyleIdentifierEnum["Index4"] = 'Index4'] = "Index4";
        StyleIdentifierEnum[StyleIdentifierEnum["Index5"] = 'Index5'] = "Index5";
        StyleIdentifierEnum[StyleIdentifierEnum["Index6"] = 'Index6'] = "Index6";
        StyleIdentifierEnum[StyleIdentifierEnum["Index7"] = 'Index7'] = "Index7";
        StyleIdentifierEnum[StyleIdentifierEnum["Index8"] = 'Index8'] = "Index8";
        StyleIdentifierEnum[StyleIdentifierEnum["Index9"] = 'Index9'] = "Index9";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc1"] = 'Toc1'] = "Toc1";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc2"] = 'Toc2'] = "Toc2";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc3"] = 'Toc3'] = "Toc3";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc4"] = 'Toc4'] = "Toc4";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc5"] = 'Toc5'] = "Toc5";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc6"] = 'Toc6'] = "Toc6";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc7"] = 'Toc7'] = "Toc7";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc8"] = 'Toc8'] = "Toc8";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc9"] = 'Toc9'] = "Toc9";
        StyleIdentifierEnum[StyleIdentifierEnum["NormalIndent"] = 'NormalIndent'] = "NormalIndent";
        StyleIdentifierEnum[StyleIdentifierEnum["FootnoteText"] = 'FootnoteText'] = "FootnoteText";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentText"] = 'CommentText'] = "CommentText";
        StyleIdentifierEnum[StyleIdentifierEnum["Header"] = 'Header'] = "Header";
        StyleIdentifierEnum[StyleIdentifierEnum["Footer"] = 'Footer'] = "Footer";
        StyleIdentifierEnum[StyleIdentifierEnum["IndexHeading"] = 'IndexHeading'] = "IndexHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["Caption"] = 'Caption'] = "Caption";
        StyleIdentifierEnum[StyleIdentifierEnum["TableOfFigures"] = 'TableOfFigures'] = "TableOfFigures";
        StyleIdentifierEnum[StyleIdentifierEnum["EnvelopeAddress"] = 'EnvelopeAddress'] = "EnvelopeAddress";
        StyleIdentifierEnum[StyleIdentifierEnum["EnvelopeReturn"] = 'EnvelopeReturn'] = "EnvelopeReturn";
        StyleIdentifierEnum[StyleIdentifierEnum["FootnoteReference"] = 'FootnoteReference'] = "FootnoteReference";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentReference"] = 'CommentReference'] = "CommentReference";
        StyleIdentifierEnum[StyleIdentifierEnum["LineNumber"] = 'LineNumber'] = "LineNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["PageNumber"] = 'PageNumber'] = "PageNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["EndnoteReference"] = 'EndnoteReference'] = "EndnoteReference";
        StyleIdentifierEnum[StyleIdentifierEnum["EndnoteText"] = 'EndnoteText'] = "EndnoteText";
        StyleIdentifierEnum[StyleIdentifierEnum["TableOfAuthorities"] = 'TableOfAuthorities'] = "TableOfAuthorities";
        StyleIdentifierEnum[StyleIdentifierEnum["Macro"] = 'Macro'] = "Macro";
        StyleIdentifierEnum[StyleIdentifierEnum["ToaHeading"] = 'ToaHeading'] = "ToaHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["List"] = 'List'] = "List";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet"] = 'ListBullet'] = "ListBullet";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber"] = 'ListNumber'] = "ListNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["List2"] = 'List2'] = "List2";
        StyleIdentifierEnum[StyleIdentifierEnum["List3"] = 'List3'] = "List3";
        StyleIdentifierEnum[StyleIdentifierEnum["List4"] = 'List4'] = "List4";
        StyleIdentifierEnum[StyleIdentifierEnum["List5"] = 'List5'] = "List5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet2"] = 'ListBullet2'] = "ListBullet2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet3"] = 'ListBullet3'] = "ListBullet3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet4"] = 'ListBullet4'] = "ListBullet4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet5"] = 'ListBullet5'] = "ListBullet5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber2"] = 'ListNumber2'] = "ListNumber2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber3"] = 'ListNumber3'] = "ListNumber3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber4"] = 'ListNumber4'] = "ListNumber4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber5"] = 'ListNumber5'] = "ListNumber5";
        StyleIdentifierEnum[StyleIdentifierEnum["Title"] = 'Title'] = "Title";
        StyleIdentifierEnum[StyleIdentifierEnum["Closing"] = 'Closing'] = "Closing";
        StyleIdentifierEnum[StyleIdentifierEnum["Signature"] = 'Signature'] = "Signature";
        StyleIdentifierEnum[StyleIdentifierEnum["DefaultParagraphFont"] = 'DefaultParagraphFont'] = "DefaultParagraphFont";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText"] = 'BodyText'] = "BodyText";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd"] = 'BodyTextInd'] = "BodyTextInd";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue"] = 'ListContinue'] = "ListContinue";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue2"] = 'ListContinue2'] = "ListContinue2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue3"] = 'ListContinue3'] = "ListContinue3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue4"] = 'ListContinue4'] = "ListContinue4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue5"] = 'ListContinue5'] = "ListContinue5";
        StyleIdentifierEnum[StyleIdentifierEnum["MessageHeader"] = 'MessageHeader'] = "MessageHeader";
        StyleIdentifierEnum[StyleIdentifierEnum["Subtitle"] = 'Subtitle'] = "Subtitle";
        StyleIdentifierEnum[StyleIdentifierEnum["Salutation"] = 'Salutation'] = "Salutation";
        StyleIdentifierEnum[StyleIdentifierEnum["Date"] = 'Date'] = "Date";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText1I"] = 'BodyText1I'] = "BodyText1I";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText1I2"] = 'BodyText1I2'] = "BodyText1I2";
        StyleIdentifierEnum[StyleIdentifierEnum["NoteHeading"] = 'NoteHeading'] = "NoteHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText2"] = 'BodyText2'] = "BodyText2";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText3"] = 'BodyText3'] = "BodyText3";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd2"] = 'BodyTextInd2'] = "BodyTextInd2";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd3"] = 'BodyTextInd3'] = "BodyTextInd3";
        StyleIdentifierEnum[StyleIdentifierEnum["BlockText"] = 'BlockText'] = "BlockText";
        StyleIdentifierEnum[StyleIdentifierEnum["Hyperlink"] = 'Hyperlink'] = "Hyperlink";
        StyleIdentifierEnum[StyleIdentifierEnum["FollowedHyperlink"] = 'FollowedHyperlink'] = "FollowedHyperlink";
        StyleIdentifierEnum[StyleIdentifierEnum["Strong"] = 'Strong'] = "Strong";
        StyleIdentifierEnum[StyleIdentifierEnum["Emphasis"] = 'Emphasis'] = "Emphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["DocumentMap"] = 'DocumentMap'] = "DocumentMap";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainText"] = 'PlainText'] = "PlainText";
        StyleIdentifierEnum[StyleIdentifierEnum["EmailSignature"] = 'EmailSignature'] = "EmailSignature";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlTopOfForm"] = 'HtmlTopOfForm'] = "HtmlTopOfForm";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlBottomOfForm"] = 'HtmlBottomOfForm'] = "HtmlBottomOfForm";
        StyleIdentifierEnum[StyleIdentifierEnum["NormalWeb"] = 'NormalWeb'] = "NormalWeb";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlAcronym"] = 'HtmlAcronym'] = "HtmlAcronym";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlAddress"] = 'HtmlAddress'] = "HtmlAddress";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlCite"] = 'HtmlCite'] = "HtmlCite";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlCode"] = 'HtmlCode'] = "HtmlCode";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlDefinition"] = 'HtmlDefinition'] = "HtmlDefinition";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlKeyboard"] = 'HtmlKeyboard'] = "HtmlKeyboard";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlPreformatted"] = 'HtmlPreformatted'] = "HtmlPreformatted";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlSample"] = 'HtmlSample'] = "HtmlSample";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlTypewriter"] = 'HtmlTypewriter'] = "HtmlTypewriter";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlVariable"] = 'HtmlVariable'] = "HtmlVariable";
        StyleIdentifierEnum[StyleIdentifierEnum["TableNormal"] = 'TableNormal'] = "TableNormal";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentSubject"] = 'CommentSubject'] = "CommentSubject";
        StyleIdentifierEnum[StyleIdentifierEnum["NoList"] = 'NoList'] = "NoList";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList1"] = 'OutlineList1'] = "OutlineList1";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList2"] = 'OutlineList2'] = "OutlineList2";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList3"] = 'OutlineList3'] = "OutlineList3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple1"] = 'TableSimple1'] = "TableSimple1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple2"] = 'TableSimple2'] = "TableSimple2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple3"] = 'TableSimple3'] = "TableSimple3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic1"] = 'TableClassic1'] = "TableClassic1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic2"] = 'TableClassic2'] = "TableClassic2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic3"] = 'TableClassic3'] = "TableClassic3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic4"] = 'TableClassic4'] = "TableClassic4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful1"] = 'TableColorful1'] = "TableColorful1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful2"] = 'TableColorful2'] = "TableColorful2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful3"] = 'TableColorful3'] = "TableColorful3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns1"] = 'TableColumns1'] = "TableColumns1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns2"] = 'TableColumns2'] = "TableColumns2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns3"] = 'TableColumns3'] = "TableColumns3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns4"] = 'TableColumns4'] = "TableColumns4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns5"] = 'TableColumns5'] = "TableColumns5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid1"] = 'TableGrid1'] = "TableGrid1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid2"] = 'TableGrid2'] = "TableGrid2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid3"] = 'TableGrid3'] = "TableGrid3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid4"] = 'TableGrid4'] = "TableGrid4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid5"] = 'TableGrid5'] = "TableGrid5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid6"] = 'TableGrid6'] = "TableGrid6";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid7"] = 'TableGrid7'] = "TableGrid7";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid8"] = 'TableGrid8'] = "TableGrid8";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList1"] = 'TableList1'] = "TableList1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList2"] = 'TableList2'] = "TableList2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList3"] = 'TableList3'] = "TableList3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList4"] = 'TableList4'] = "TableList4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList5"] = 'TableList5'] = "TableList5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList6"] = 'TableList6'] = "TableList6";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList7"] = 'TableList7'] = "TableList7";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList8"] = 'TableList8'] = "TableList8";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects1"] = 'Table3DEffects1'] = "Table3DEffects1";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects2"] = 'Table3DEffects2'] = "Table3DEffects2";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects3"] = 'Table3DEffects3'] = "Table3DEffects3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableContemporary"] = 'TableContemporary'] = "TableContemporary";
        StyleIdentifierEnum[StyleIdentifierEnum["TableElegant"] = 'TableElegant'] = "TableElegant";
        StyleIdentifierEnum[StyleIdentifierEnum["TableProfessional"] = 'TableProfessional'] = "TableProfessional";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSubtle1"] = 'TableSubtle1'] = "TableSubtle1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSubtle2"] = 'TableSubtle2'] = "TableSubtle2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb1"] = 'TableWeb1'] = "TableWeb1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb2"] = 'TableWeb2'] = "TableWeb2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb3"] = 'TableWeb3'] = "TableWeb3";
        StyleIdentifierEnum[StyleIdentifierEnum["BalloonText"] = 'BalloonText'] = "BalloonText";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid"] = 'TableGrid'] = "TableGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["TableTheme"] = 'TableTheme'] = "TableTheme";
        StyleIdentifierEnum[StyleIdentifierEnum["PlaceholderText"] = 'PlaceholderText'] = "PlaceholderText";
        StyleIdentifierEnum[StyleIdentifierEnum["NoSpacing"] = 'NoSpacing'] = "NoSpacing";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShading"] = 'LightShading'] = "LightShading";
        StyleIdentifierEnum[StyleIdentifierEnum["LightList"] = 'LightList'] = "LightList";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGrid"] = 'LightGrid'] = "LightGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1"] = 'MediumShading1'] = "MediumShading1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2"] = 'MediumShading2'] = "MediumShading2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1"] = 'MediumList1'] = "MediumList1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2"] = 'MediumList2'] = "MediumList2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1"] = 'MediumGrid1'] = "MediumGrid1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2"] = 'MediumGrid2'] = "MediumGrid2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3"] = 'MediumGrid3'] = "MediumGrid3";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkList"] = 'DarkList'] = "DarkList";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShading"] = 'ColorfulShading'] = "ColorfulShading";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulList"] = 'ColorfulList'] = "ColorfulList";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGrid"] = 'ColorfulGrid'] = "ColorfulGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent1"] = 'LightShadingAccent1'] = "LightShadingAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent1"] = 'LightListAccent1'] = "LightListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent1"] = 'LightGridAccent1'] = "LightGridAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent1"] = 'MediumShading1Accent1'] = "MediumShading1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent1"] = 'MediumShading2Accent1'] = "MediumShading2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent1"] = 'MediumList1Accent1'] = "MediumList1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["Revision"] = 'Revision'] = "Revision";
        StyleIdentifierEnum[StyleIdentifierEnum["ListParagraph"] = 'ListParagraph'] = "ListParagraph";
        StyleIdentifierEnum[StyleIdentifierEnum["Quote"] = 'Quote'] = "Quote";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseQuote"] = 'IntenseQuote'] = "IntenseQuote";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent1"] = 'MediumList2Accent1'] = "MediumList2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent1"] = 'MediumGrid1Accent1'] = "MediumGrid1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent1"] = 'MediumGrid2Accent1'] = "MediumGrid2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent1"] = 'MediumGrid3Accent1'] = "MediumGrid3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent1"] = 'DarkListAccent1'] = "DarkListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent1"] = 'ColorfulShadingAccent1'] = "ColorfulShadingAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent1"] = 'ColorfulListAccent1'] = "ColorfulListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent1"] = 'ColorfulGridAccent1'] = "ColorfulGridAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent2"] = 'LightShadingAccent2'] = "LightShadingAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent2"] = 'LightListAccent2'] = "LightListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent2"] = 'LightGridAccent2'] = "LightGridAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent2"] = 'MediumShading1Accent2'] = "MediumShading1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent2"] = 'MediumShading2Accent2'] = "MediumShading2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent2"] = 'MediumList1Accent2'] = "MediumList1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent2"] = 'MediumList2Accent2'] = "MediumList2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent2"] = 'MediumGrid1Accent2'] = "MediumGrid1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent2"] = 'MediumGrid2Accent2'] = "MediumGrid2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent2"] = 'MediumGrid3Accent2'] = "MediumGrid3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent2"] = 'DarkListAccent2'] = "DarkListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent2"] = 'ColorfulShadingAccent2'] = "ColorfulShadingAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent2"] = 'ColorfulListAccent2'] = "ColorfulListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent2"] = 'ColorfulGridAccent2'] = "ColorfulGridAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent3"] = 'LightShadingAccent3'] = "LightShadingAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent3"] = 'LightListAccent3'] = "LightListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent3"] = 'LightGridAccent3'] = "LightGridAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent3"] = 'MediumShading1Accent3'] = "MediumShading1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent3"] = 'MediumShading2Accent3'] = "MediumShading2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent3"] = 'MediumList1Accent3'] = "MediumList1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent3"] = 'MediumList2Accent3'] = "MediumList2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent3"] = 'MediumGrid1Accent3'] = "MediumGrid1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent3"] = 'MediumGrid2Accent3'] = "MediumGrid2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent3"] = 'MediumGrid3Accent3'] = "MediumGrid3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent3"] = 'DarkListAccent3'] = "DarkListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent3"] = 'ColorfulShadingAccent3'] = "ColorfulShadingAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent3"] = 'ColorfulListAccent3'] = "ColorfulListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent3"] = 'ColorfulGridAccent3'] = "ColorfulGridAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent4"] = 'LightShadingAccent4'] = "LightShadingAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent4"] = 'LightListAccent4'] = "LightListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent4"] = 'LightGridAccent4'] = "LightGridAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent4"] = 'MediumShading1Accent4'] = "MediumShading1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent4"] = 'MediumShading2Accent4'] = "MediumShading2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent4"] = 'MediumList1Accent4'] = "MediumList1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent4"] = 'MediumList2Accent4'] = "MediumList2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent4"] = 'MediumGrid1Accent4'] = "MediumGrid1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent4"] = 'MediumGrid2Accent4'] = "MediumGrid2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent4"] = 'MediumGrid3Accent4'] = "MediumGrid3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent4"] = 'DarkListAccent4'] = "DarkListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent4"] = 'ColorfulShadingAccent4'] = "ColorfulShadingAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent4"] = 'ColorfulListAccent4'] = "ColorfulListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent4"] = 'ColorfulGridAccent4'] = "ColorfulGridAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent5"] = 'LightShadingAccent5'] = "LightShadingAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent5"] = 'LightListAccent5'] = "LightListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent5"] = 'LightGridAccent5'] = "LightGridAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent5"] = 'MediumShading1Accent5'] = "MediumShading1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent5"] = 'MediumShading2Accent5'] = "MediumShading2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent5"] = 'MediumList1Accent5'] = "MediumList1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent5"] = 'MediumList2Accent5'] = "MediumList2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent5"] = 'MediumGrid1Accent5'] = "MediumGrid1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent5"] = 'MediumGrid2Accent5'] = "MediumGrid2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent5"] = 'MediumGrid3Accent5'] = "MediumGrid3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent5"] = 'DarkListAccent5'] = "DarkListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent5"] = 'ColorfulShadingAccent5'] = "ColorfulShadingAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent5"] = 'ColorfulListAccent5'] = "ColorfulListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent5"] = 'ColorfulGridAccent5'] = "ColorfulGridAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent6"] = 'LightShadingAccent6'] = "LightShadingAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent6"] = 'LightListAccent6'] = "LightListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent6"] = 'LightGridAccent6'] = "LightGridAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent6"] = 'MediumShading1Accent6'] = "MediumShading1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent6"] = 'MediumShading2Accent6'] = "MediumShading2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent6"] = 'MediumList1Accent6'] = "MediumList1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent6"] = 'MediumList2Accent6'] = "MediumList2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent6"] = 'MediumGrid1Accent6'] = "MediumGrid1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent6"] = 'MediumGrid2Accent6'] = "MediumGrid2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent6"] = 'MediumGrid3Accent6'] = "MediumGrid3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent6"] = 'DarkListAccent6'] = "DarkListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent6"] = 'ColorfulShadingAccent6'] = "ColorfulShadingAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent6"] = 'ColorfulListAccent6'] = "ColorfulListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent6"] = 'ColorfulGridAccent6'] = "ColorfulGridAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["SubtleEmphasis"] = 'SubtleEmphasis'] = "SubtleEmphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseEmphasis"] = 'IntenseEmphasis'] = "IntenseEmphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["SubtleReference"] = 'SubtleReference'] = "SubtleReference";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseReference"] = 'IntenseReference'] = "IntenseReference";
        StyleIdentifierEnum[StyleIdentifierEnum["BookTitle"] = 'BookTitle'] = "BookTitle";
        StyleIdentifierEnum[StyleIdentifierEnum["Bibliography"] = 'Bibliography'] = "Bibliography";
        StyleIdentifierEnum[StyleIdentifierEnum["TocHeading"] = 'TocHeading'] = "TocHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable1"] = 'PlainTable1'] = "PlainTable1";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable2"] = 'PlainTable2'] = "PlainTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable3"] = 'PlainTable3'] = "PlainTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable4"] = 'PlainTable4'] = "PlainTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable5"] = 'PlainTable5'] = "PlainTable5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGridLight"] = 'TableGridLight'] = "TableGridLight";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1Light"] = 'GridTable1Light'] = "GridTable1Light";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2"] = 'GridTable2'] = "GridTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3"] = 'GridTable3'] = "GridTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4"] = 'GridTable4'] = "GridTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5Dark"] = 'GridTable5Dark'] = "GridTable5Dark";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6Colorful"] = 'GridTable6Colorful'] = "GridTable6Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7Colorful"] = 'GridTable7Colorful'] = "GridTable7Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent1"] = 'GridTable1LightAccent1'] = "GridTable1LightAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent1"] = 'GridTable2Accent1'] = "GridTable2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent1"] = 'GridTable3Accent1'] = "GridTable3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent1"] = 'GridTable4Accent1'] = "GridTable4Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent1"] = 'GridTable5DarkAccent1'] = "GridTable5DarkAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent1"] = 'GridTable6ColorfulAccent1'] = "GridTable6ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent1"] = 'GridTable7ColorfulAccent1'] = "GridTable7ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent2"] = 'GridTable1LightAccent2'] = "GridTable1LightAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent2"] = 'GridTable2Accent2'] = "GridTable2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent2"] = 'GridTable3Accent2'] = "GridTable3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent2"] = 'GridTable4Accent2'] = "GridTable4Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent2"] = 'GridTable5DarkAccent2'] = "GridTable5DarkAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent2"] = 'GridTable6ColorfulAccent2'] = "GridTable6ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent2"] = 'GridTable7ColorfulAccent2'] = "GridTable7ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent3"] = 'GridTable1LightAccent3'] = "GridTable1LightAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent3"] = 'GridTable2Accent3'] = "GridTable2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent3"] = 'GridTable3Accent3'] = "GridTable3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent3"] = 'GridTable4Accent3'] = "GridTable4Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent3"] = 'GridTable5DarkAccent3'] = "GridTable5DarkAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent3"] = 'GridTable6ColorfulAccent3'] = "GridTable6ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent3"] = 'GridTable7ColorfulAccent3'] = "GridTable7ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent4"] = 'GridTable1LightAccent4'] = "GridTable1LightAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent4"] = 'GridTable2Accent4'] = "GridTable2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent4"] = 'GridTable3Accent4'] = "GridTable3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent4"] = 'GridTable4Accent4'] = "GridTable4Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent4"] = 'GridTable5DarkAccent4'] = "GridTable5DarkAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent4"] = 'GridTable6ColorfulAccent4'] = "GridTable6ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent4"] = 'GridTable7ColorfulAccent4'] = "GridTable7ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent5"] = 'GridTable1LightAccent5'] = "GridTable1LightAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent5"] = 'GridTable2Accent5'] = "GridTable2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent5"] = 'GridTable3Accent5'] = "GridTable3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent5"] = 'GridTable4Accent5'] = "GridTable4Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent5"] = 'GridTable5DarkAccent5'] = "GridTable5DarkAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent5"] = 'GridTable6ColorfulAccent5'] = "GridTable6ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent5"] = 'GridTable7ColorfulAccent5'] = "GridTable7ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent6"] = 'GridTable1LightAccent6'] = "GridTable1LightAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent6"] = 'GridTable2Accent6'] = "GridTable2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent6"] = 'GridTable3Accent6'] = "GridTable3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent6"] = 'GridTable4Accent6'] = "GridTable4Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent6"] = 'GridTable5DarkAccent6'] = "GridTable5DarkAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent6"] = 'GridTable6ColorfulAccent6'] = "GridTable6ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent6"] = 'GridTable7ColorfulAccent6'] = "GridTable7ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1Light"] = 'ListTable1Light'] = "ListTable1Light";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2"] = 'ListTable2'] = "ListTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3"] = 'ListTable3'] = "ListTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4"] = 'ListTable4'] = "ListTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5Dark"] = 'ListTable5Dark'] = "ListTable5Dark";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6Colorful"] = 'ListTable6Colorful'] = "ListTable6Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7Colorful"] = 'ListTable7Colorful'] = "ListTable7Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent1"] = 'ListTable1LightAccent1'] = "ListTable1LightAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent1"] = 'ListTable2Accent1'] = "ListTable2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent1"] = 'ListTable3Accent1'] = "ListTable3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent1"] = 'ListTable4Accent1'] = "ListTable4Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent1"] = 'ListTable5DarkAccent1'] = "ListTable5DarkAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent1"] = 'ListTable6ColorfulAccent1'] = "ListTable6ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent1"] = 'ListTable7ColorfulAccent1'] = "ListTable7ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent2"] = 'ListTable1LightAccent2'] = "ListTable1LightAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent2"] = 'ListTable2Accent2'] = "ListTable2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent2"] = 'ListTable3Accent2'] = "ListTable3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent2"] = 'ListTable4Accent2'] = "ListTable4Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent2"] = 'ListTable5DarkAccent2'] = "ListTable5DarkAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent2"] = 'ListTable6ColorfulAccent2'] = "ListTable6ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent2"] = 'ListTable7ColorfulAccent2'] = "ListTable7ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent3"] = 'ListTable1LightAccent3'] = "ListTable1LightAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent3"] = 'ListTable2Accent3'] = "ListTable2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent3"] = 'ListTable3Accent3'] = "ListTable3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent3"] = 'ListTable4Accent3'] = "ListTable4Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent3"] = 'ListTable5DarkAccent3'] = "ListTable5DarkAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent3"] = 'ListTable6ColorfulAccent3'] = "ListTable6ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent3"] = 'ListTable7ColorfulAccent3'] = "ListTable7ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent4"] = 'ListTable1LightAccent4'] = "ListTable1LightAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent4"] = 'ListTable2Accent4'] = "ListTable2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent4"] = 'ListTable3Accent4'] = "ListTable3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent4"] = 'ListTable4Accent4'] = "ListTable4Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent4"] = 'ListTable5DarkAccent4'] = "ListTable5DarkAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent4"] = 'ListTable6ColorfulAccent4'] = "ListTable6ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent4"] = 'ListTable7ColorfulAccent4'] = "ListTable7ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent5"] = 'ListTable1LightAccent5'] = "ListTable1LightAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent5"] = 'ListTable2Accent5'] = "ListTable2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent5"] = 'ListTable3Accent5'] = "ListTable3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent5"] = 'ListTable4Accent5'] = "ListTable4Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent5"] = 'ListTable5DarkAccent5'] = "ListTable5DarkAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent5"] = 'ListTable6ColorfulAccent5'] = "ListTable6ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent5"] = 'ListTable7ColorfulAccent5'] = "ListTable7ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent6"] = 'ListTable1LightAccent6'] = "ListTable1LightAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent6"] = 'ListTable2Accent6'] = "ListTable2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent6"] = 'ListTable3Accent6'] = "ListTable3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent6"] = 'ListTable4Accent6'] = "ListTable4Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent6"] = 'ListTable5DarkAccent6'] = "ListTable5DarkAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent6"] = 'ListTable6ColorfulAccent6'] = "ListTable6ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent6"] = 'ListTable7ColorfulAccent6'] = "ListTable7ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["User"] = 'User'] = "User";
        StyleIdentifierEnum[StyleIdentifierEnum["Nil"] = 'Nil'] = "Nil";
    })(StyleIdentifierEnum = ParagraphFormat.StyleIdentifierEnum || (ParagraphFormat.StyleIdentifierEnum = {}));
})(ParagraphFormat = exports.ParagraphFormat || (exports.ParagraphFormat = {}));
// tslint:enable:quotemark
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/paragraphs/{0}/format.
 */
class ParagraphFormatResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ParagraphFormatResponse.attributeTypeMap);
    }
}
exports.ParagraphFormatResponse = ParagraphFormatResponse;
/**
 * Attribute type map
 */
ParagraphFormatResponse.attributeTypeMap = [
    {
        name: "paragraphFormat",
        baseName: "ParagraphFormat",
        type: "ParagraphFormat",
    }
];
/**
 * Collection of links to paragraphs.
 */
class ParagraphLinkCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ParagraphLinkCollection.attributeTypeMap);
    }
}
exports.ParagraphLinkCollection = ParagraphLinkCollection;
/**
 * Attribute type map
 */
ParagraphLinkCollection.attributeTypeMap = [
    {
        name: "paragraphLinkList",
        baseName: "ParagraphLinkList",
        type: "Array<ParagraphLink>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/paragraphs.
 */
class ParagraphLinkCollectionResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ParagraphLinkCollectionResponse.attributeTypeMap);
    }
}
exports.ParagraphLinkCollectionResponse = ParagraphLinkCollectionResponse;
/**
 * Attribute type map
 */
ParagraphLinkCollectionResponse.attributeTypeMap = [
    {
        name: "paragraphs",
        baseName: "Paragraphs",
        type: "ParagraphLinkCollection",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/paragraphs/{0}.
 */
class ParagraphResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ParagraphResponse.attributeTypeMap);
    }
}
exports.ParagraphResponse = ParagraphResponse;
/**
 * Attribute type map
 */
ParagraphResponse.attributeTypeMap = [
    {
        name: "paragraph",
        baseName: "Paragraph",
        type: "Paragraph",
    }
];
/**
 * Response for the request of data about protection.
 */
class ProtectionDataResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ProtectionDataResponse.attributeTypeMap);
    }
}
exports.ProtectionDataResponse = ProtectionDataResponse;
/**
 * Attribute type map
 */
ProtectionDataResponse.attributeTypeMap = [
    {
        name: "documentLink",
        baseName: "DocumentLink",
        type: "FileLink",
    },
    {
        name: "protectionData",
        baseName: "ProtectionData",
        type: "ProtectionData",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/range/{0}/{1}/.
 */
class RangeTextResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RangeTextResponse.attributeTypeMap);
    }
}
exports.RangeTextResponse = RangeTextResponse;
/**
 * Attribute type map
 */
RangeTextResponse.attributeTypeMap = [
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Response for \"Replace text\" action.
 */
class ReplaceTextResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ReplaceTextResponse.attributeTypeMap);
    }
}
exports.ReplaceTextResponse = ReplaceTextResponse;
/**
 * Attribute type map
 */
ReplaceTextResponse.attributeTypeMap = [
    {
        name: "documentLink",
        baseName: "DocumentLink",
        type: "FileLink",
    },
    {
        name: "matches",
        baseName: "Matches",
        type: "number",
    }
];
/**
 * response of the modification operations for the revisions collection (now these are acceptAll and rejectAll).
 */
class RevisionsModificationResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RevisionsModificationResponse.attributeTypeMap);
    }
}
exports.RevisionsModificationResponse = RevisionsModificationResponse;
/**
 * Attribute type map
 */
RevisionsModificationResponse.attributeTypeMap = [
    {
        name: "result",
        baseName: "Result",
        type: "ModificationOperationResult",
    }
];
/**
 * container class for rtf save options.
 */
class RtfSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RtfSaveOptionsData.attributeTypeMap);
    }
}
exports.RtfSaveOptionsData = RtfSaveOptionsData;
/**
 * Attribute type map
 */
RtfSaveOptionsData.attributeTypeMap = [
    {
        name: "exportCompactSize",
        baseName: "ExportCompactSize",
        type: "boolean",
    },
    {
        name: "exportImagesForOldReaders",
        baseName: "ExportImagesForOldReaders",
        type: "boolean",
    },
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/paragraphs/{0}/runs/{1}.
 */
class RunResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RunResponse.attributeTypeMap);
    }
}
exports.RunResponse = RunResponse;
/**
 * Attribute type map
 */
RunResponse.attributeTypeMap = [
    {
        name: "run",
        baseName: "Run",
        type: "Run",
    }
];
/**
 * Represents DTO for collection of runs.
 */
class Runs extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Runs.attributeTypeMap);
    }
}
exports.Runs = Runs;
/**
 * Attribute type map
 */
Runs.attributeTypeMap = [
    {
        name: "list",
        baseName: "List",
        type: "Array<Run>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/{paragraphPath}/runs.
 */
class RunsResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RunsResponse.attributeTypeMap);
    }
}
exports.RunsResponse = RunsResponse;
/**
 * Attribute type map
 */
RunsResponse.attributeTypeMap = [
    {
        name: "runs",
        baseName: "Runs",
        type: "Runs",
    }
];
/**
 * Save response.
 */
class SaveResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SaveResponse.attributeTypeMap);
    }
}
exports.SaveResponse = SaveResponse;
/**
 * Attribute type map
 */
SaveResponse.attributeTypeMap = [
    {
        name: "saveResult",
        baseName: "SaveResult",
        type: "SaveResult",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/search.
 */
class SearchResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SearchResponse.attributeTypeMap);
    }
}
exports.SearchResponse = SearchResponse;
/**
 * Attribute type map
 */
SearchResponse.attributeTypeMap = [
    {
        name: "searchingPattern",
        baseName: "SearchingPattern",
        type: "string",
    },
    {
        name: "searchResults",
        baseName: "SearchResults",
        type: "SearchResultsCollection",
    }
];
/**
 * Collection of search results.
 */
class SearchResultsCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SearchResultsCollection.attributeTypeMap);
    }
}
exports.SearchResultsCollection = SearchResultsCollection;
/**
 * Attribute type map
 */
SearchResultsCollection.attributeTypeMap = [
    {
        name: "resultsList",
        baseName: "ResultsList",
        type: "Array<SearchResult>",
    }
];
/**
 * Section element.
 */
class Section extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Section.attributeTypeMap);
    }
}
exports.Section = Section;
/**
 * Attribute type map
 */
Section.attributeTypeMap = [
    {
        name: "childNodes",
        baseName: "ChildNodes",
        type: "Array<NodeLink>",
    },
    {
        name: "headerFooters",
        baseName: "HeaderFooters",
        type: "LinkElement",
    },
    {
        name: "pageSetup",
        baseName: "PageSetup",
        type: "LinkElement",
    },
    {
        name: "paragraphs",
        baseName: "Paragraphs",
        type: "LinkElement",
    },
    {
        name: "tables",
        baseName: "Tables",
        type: "LinkElement",
    }
];
/**
 * Collection of links to sections.
 */
class SectionLinkCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SectionLinkCollection.attributeTypeMap);
    }
}
exports.SectionLinkCollection = SectionLinkCollection;
/**
 * Attribute type map
 */
SectionLinkCollection.attributeTypeMap = [
    {
        name: "sectionLinkList",
        baseName: "SectionLinkList",
        type: "Array<SectionLink>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/sections.
 */
class SectionLinkCollectionResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SectionLinkCollectionResponse.attributeTypeMap);
    }
}
exports.SectionLinkCollectionResponse = SectionLinkCollectionResponse;
/**
 * Attribute type map
 */
SectionLinkCollectionResponse.attributeTypeMap = [
    {
        name: "sections",
        baseName: "Sections",
        type: "SectionLinkCollection",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/sections/{0}/PageSetup.
 */
class SectionPageSetupResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SectionPageSetupResponse.attributeTypeMap);
    }
}
exports.SectionPageSetupResponse = SectionPageSetupResponse;
/**
 * Attribute type map
 */
SectionPageSetupResponse.attributeTypeMap = [
    {
        name: "pageSetup",
        baseName: "PageSetup",
        type: "PageSetup",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/sections/{0}.
 */
class SectionResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SectionResponse.attributeTypeMap);
    }
}
exports.SectionResponse = SectionResponse;
/**
 * Attribute type map
 */
SectionResponse.attributeTypeMap = [
    {
        name: "section",
        baseName: "Section",
        type: "Section",
    }
];
/**
 * This response should be returned by the service when handling:  POST /{name}/split .
 */
class SplitDocumentResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SplitDocumentResponse.attributeTypeMap);
    }
}
exports.SplitDocumentResponse = SplitDocumentResponse;
/**
 * Attribute type map
 */
SplitDocumentResponse.attributeTypeMap = [
    {
        name: "splitResult",
        baseName: "SplitResult",
        type: "SplitDocumentResult",
    }
];
/**
 * Response for the request of the document's statistical data.
 */
class StatDataResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(StatDataResponse.attributeTypeMap);
    }
}
exports.StatDataResponse = StatDataResponse;
/**
 * Attribute type map
 */
StatDataResponse.attributeTypeMap = [
    {
        name: "documentLink",
        baseName: "DocumentLink",
        type: "FileLink",
    },
    {
        name: "statData",
        baseName: "StatData",
        type: "DocumentStatData",
    }
];
/**
 * Represents all formatting for a table row.
 */
class TableCellFormat extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableCellFormat.attributeTypeMap);
    }
}
exports.TableCellFormat = TableCellFormat;
/**
 * Attribute type map
 */
TableCellFormat.attributeTypeMap = [
    {
        name: "bottomPadding",
        baseName: "BottomPadding",
        type: "number",
    },
    {
        name: "fitText",
        baseName: "FitText",
        type: "boolean",
    },
    {
        name: "horizontalMerge",
        baseName: "HorizontalMerge",
        type: "TableCellFormat.HorizontalMergeEnum",
    },
    {
        name: "leftPadding",
        baseName: "LeftPadding",
        type: "number",
    },
    {
        name: "orientation",
        baseName: "Orientation",
        type: "TableCellFormat.OrientationEnum",
    },
    {
        name: "preferredWidth",
        baseName: "PreferredWidth",
        type: "PreferredWidth",
    },
    {
        name: "rightPadding",
        baseName: "RightPadding",
        type: "number",
    },
    {
        name: "topPadding",
        baseName: "TopPadding",
        type: "number",
    },
    {
        name: "verticalAlignment",
        baseName: "VerticalAlignment",
        type: "TableCellFormat.VerticalAlignmentEnum",
    },
    {
        name: "verticalMerge",
        baseName: "VerticalMerge",
        type: "TableCellFormat.VerticalMergeEnum",
    },
    {
        name: "width",
        baseName: "Width",
        type: "number",
    },
    {
        name: "wrapText",
        baseName: "WrapText",
        type: "boolean",
    }
];
/**
 * Enums for TableCellFormat
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (TableCellFormat) {
    let HorizontalMergeEnum;
    (function (HorizontalMergeEnum) {
        HorizontalMergeEnum[HorizontalMergeEnum["None"] = 'None'] = "None";
        HorizontalMergeEnum[HorizontalMergeEnum["First"] = 'First'] = "First";
        HorizontalMergeEnum[HorizontalMergeEnum["Previous"] = 'Previous'] = "Previous";
    })(HorizontalMergeEnum = TableCellFormat.HorizontalMergeEnum || (TableCellFormat.HorizontalMergeEnum = {}));
    let OrientationEnum;
    (function (OrientationEnum) {
        OrientationEnum[OrientationEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        OrientationEnum[OrientationEnum["Downward"] = 'Downward'] = "Downward";
        OrientationEnum[OrientationEnum["Upward"] = 'Upward'] = "Upward";
        OrientationEnum[OrientationEnum["HorizontalRotatedFarEast"] = 'HorizontalRotatedFarEast'] = "HorizontalRotatedFarEast";
        OrientationEnum[OrientationEnum["VerticalFarEast"] = 'VerticalFarEast'] = "VerticalFarEast";
        OrientationEnum[OrientationEnum["VerticalRotatedFarEast"] = 'VerticalRotatedFarEast'] = "VerticalRotatedFarEast";
    })(OrientationEnum = TableCellFormat.OrientationEnum || (TableCellFormat.OrientationEnum = {}));
    let VerticalAlignmentEnum;
    (function (VerticalAlignmentEnum) {
        VerticalAlignmentEnum[VerticalAlignmentEnum["Top"] = 'Top'] = "Top";
        VerticalAlignmentEnum[VerticalAlignmentEnum["Center"] = 'Center'] = "Center";
        VerticalAlignmentEnum[VerticalAlignmentEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(VerticalAlignmentEnum = TableCellFormat.VerticalAlignmentEnum || (TableCellFormat.VerticalAlignmentEnum = {}));
    let VerticalMergeEnum;
    (function (VerticalMergeEnum) {
        VerticalMergeEnum[VerticalMergeEnum["None"] = 'None'] = "None";
        VerticalMergeEnum[VerticalMergeEnum["First"] = 'First'] = "First";
        VerticalMergeEnum[VerticalMergeEnum["Previous"] = 'Previous'] = "Previous";
    })(VerticalMergeEnum = TableCellFormat.VerticalMergeEnum || (TableCellFormat.VerticalMergeEnum = {}));
})(TableCellFormat = exports.TableCellFormat || (exports.TableCellFormat = {}));
// tslint:enable:quotemark
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/tables/{0}/rows/{1}/cells/{2}/cellformat.
 */
class TableCellFormatResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableCellFormatResponse.attributeTypeMap);
    }
}
exports.TableCellFormatResponse = TableCellFormatResponse;
/**
 * Attribute type map
 */
TableCellFormatResponse.attributeTypeMap = [
    {
        name: "cellFormat",
        baseName: "CellFormat",
        type: "TableCellFormat",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/tables/{0}.
 */
class TableCellResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableCellResponse.attributeTypeMap);
    }
}
exports.TableCellResponse = TableCellResponse;
/**
 * Attribute type map
 */
TableCellResponse.attributeTypeMap = [
    {
        name: "cell",
        baseName: "Cell",
        type: "TableCell",
    }
];
/**
 * Collection of links to tables.
 */
class TableLinkCollection extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableLinkCollection.attributeTypeMap);
    }
}
exports.TableLinkCollection = TableLinkCollection;
/**
 * Attribute type map
 */
TableLinkCollection.attributeTypeMap = [
    {
        name: "tableLinkList",
        baseName: "TableLinkList",
        type: "Array<TableLink>",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/tables.
 */
class TableLinkCollectionResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableLinkCollectionResponse.attributeTypeMap);
    }
}
exports.TableLinkCollectionResponse = TableLinkCollectionResponse;
/**
 * Attribute type map
 */
TableLinkCollectionResponse.attributeTypeMap = [
    {
        name: "tables",
        baseName: "Tables",
        type: "TableLinkCollection",
    }
];
/**
 * Represents the table properties.
 */
class TableProperties extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableProperties.attributeTypeMap);
    }
}
exports.TableProperties = TableProperties;
/**
 * Attribute type map
 */
TableProperties.attributeTypeMap = [
    {
        name: "alignment",
        baseName: "Alignment",
        type: "TableProperties.AlignmentEnum",
    },
    {
        name: "allowAutoFit",
        baseName: "AllowAutoFit",
        type: "boolean",
    },
    {
        name: "bidi",
        baseName: "Bidi",
        type: "boolean",
    },
    {
        name: "bottomPadding",
        baseName: "BottomPadding",
        type: "number",
    },
    {
        name: "cellSpacing",
        baseName: "CellSpacing",
        type: "number",
    },
    {
        name: "leftIndent",
        baseName: "LeftIndent",
        type: "number",
    },
    {
        name: "leftPadding",
        baseName: "LeftPadding",
        type: "number",
    },
    {
        name: "preferredWidth",
        baseName: "PreferredWidth",
        type: "PreferredWidth",
    },
    {
        name: "rightPadding",
        baseName: "RightPadding",
        type: "number",
    },
    {
        name: "styleIdentifier",
        baseName: "StyleIdentifier",
        type: "TableProperties.StyleIdentifierEnum",
    },
    {
        name: "styleName",
        baseName: "StyleName",
        type: "string",
    },
    {
        name: "styleOptions",
        baseName: "StyleOptions",
        type: "TableProperties.StyleOptionsEnum",
    },
    {
        name: "textWrapping",
        baseName: "TextWrapping",
        type: "TableProperties.TextWrappingEnum",
    },
    {
        name: "topPadding",
        baseName: "TopPadding",
        type: "number",
    }
];
/**
 * Enums for TableProperties
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (TableProperties) {
    let AlignmentEnum;
    (function (AlignmentEnum) {
        AlignmentEnum[AlignmentEnum["Left"] = 'Left'] = "Left";
        AlignmentEnum[AlignmentEnum["Center"] = 'Center'] = "Center";
        AlignmentEnum[AlignmentEnum["Right"] = 'Right'] = "Right";
    })(AlignmentEnum = TableProperties.AlignmentEnum || (TableProperties.AlignmentEnum = {}));
    let StyleIdentifierEnum;
    (function (StyleIdentifierEnum) {
        StyleIdentifierEnum[StyleIdentifierEnum["Normal"] = 'Normal'] = "Normal";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading1"] = 'Heading1'] = "Heading1";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading2"] = 'Heading2'] = "Heading2";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading3"] = 'Heading3'] = "Heading3";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading4"] = 'Heading4'] = "Heading4";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading5"] = 'Heading5'] = "Heading5";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading6"] = 'Heading6'] = "Heading6";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading7"] = 'Heading7'] = "Heading7";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading8"] = 'Heading8'] = "Heading8";
        StyleIdentifierEnum[StyleIdentifierEnum["Heading9"] = 'Heading9'] = "Heading9";
        StyleIdentifierEnum[StyleIdentifierEnum["Index1"] = 'Index1'] = "Index1";
        StyleIdentifierEnum[StyleIdentifierEnum["Index2"] = 'Index2'] = "Index2";
        StyleIdentifierEnum[StyleIdentifierEnum["Index3"] = 'Index3'] = "Index3";
        StyleIdentifierEnum[StyleIdentifierEnum["Index4"] = 'Index4'] = "Index4";
        StyleIdentifierEnum[StyleIdentifierEnum["Index5"] = 'Index5'] = "Index5";
        StyleIdentifierEnum[StyleIdentifierEnum["Index6"] = 'Index6'] = "Index6";
        StyleIdentifierEnum[StyleIdentifierEnum["Index7"] = 'Index7'] = "Index7";
        StyleIdentifierEnum[StyleIdentifierEnum["Index8"] = 'Index8'] = "Index8";
        StyleIdentifierEnum[StyleIdentifierEnum["Index9"] = 'Index9'] = "Index9";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc1"] = 'Toc1'] = "Toc1";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc2"] = 'Toc2'] = "Toc2";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc3"] = 'Toc3'] = "Toc3";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc4"] = 'Toc4'] = "Toc4";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc5"] = 'Toc5'] = "Toc5";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc6"] = 'Toc6'] = "Toc6";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc7"] = 'Toc7'] = "Toc7";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc8"] = 'Toc8'] = "Toc8";
        StyleIdentifierEnum[StyleIdentifierEnum["Toc9"] = 'Toc9'] = "Toc9";
        StyleIdentifierEnum[StyleIdentifierEnum["NormalIndent"] = 'NormalIndent'] = "NormalIndent";
        StyleIdentifierEnum[StyleIdentifierEnum["FootnoteText"] = 'FootnoteText'] = "FootnoteText";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentText"] = 'CommentText'] = "CommentText";
        StyleIdentifierEnum[StyleIdentifierEnum["Header"] = 'Header'] = "Header";
        StyleIdentifierEnum[StyleIdentifierEnum["Footer"] = 'Footer'] = "Footer";
        StyleIdentifierEnum[StyleIdentifierEnum["IndexHeading"] = 'IndexHeading'] = "IndexHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["Caption"] = 'Caption'] = "Caption";
        StyleIdentifierEnum[StyleIdentifierEnum["TableOfFigures"] = 'TableOfFigures'] = "TableOfFigures";
        StyleIdentifierEnum[StyleIdentifierEnum["EnvelopeAddress"] = 'EnvelopeAddress'] = "EnvelopeAddress";
        StyleIdentifierEnum[StyleIdentifierEnum["EnvelopeReturn"] = 'EnvelopeReturn'] = "EnvelopeReturn";
        StyleIdentifierEnum[StyleIdentifierEnum["FootnoteReference"] = 'FootnoteReference'] = "FootnoteReference";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentReference"] = 'CommentReference'] = "CommentReference";
        StyleIdentifierEnum[StyleIdentifierEnum["LineNumber"] = 'LineNumber'] = "LineNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["PageNumber"] = 'PageNumber'] = "PageNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["EndnoteReference"] = 'EndnoteReference'] = "EndnoteReference";
        StyleIdentifierEnum[StyleIdentifierEnum["EndnoteText"] = 'EndnoteText'] = "EndnoteText";
        StyleIdentifierEnum[StyleIdentifierEnum["TableOfAuthorities"] = 'TableOfAuthorities'] = "TableOfAuthorities";
        StyleIdentifierEnum[StyleIdentifierEnum["Macro"] = 'Macro'] = "Macro";
        StyleIdentifierEnum[StyleIdentifierEnum["ToaHeading"] = 'ToaHeading'] = "ToaHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["List"] = 'List'] = "List";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet"] = 'ListBullet'] = "ListBullet";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber"] = 'ListNumber'] = "ListNumber";
        StyleIdentifierEnum[StyleIdentifierEnum["List2"] = 'List2'] = "List2";
        StyleIdentifierEnum[StyleIdentifierEnum["List3"] = 'List3'] = "List3";
        StyleIdentifierEnum[StyleIdentifierEnum["List4"] = 'List4'] = "List4";
        StyleIdentifierEnum[StyleIdentifierEnum["List5"] = 'List5'] = "List5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet2"] = 'ListBullet2'] = "ListBullet2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet3"] = 'ListBullet3'] = "ListBullet3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet4"] = 'ListBullet4'] = "ListBullet4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListBullet5"] = 'ListBullet5'] = "ListBullet5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber2"] = 'ListNumber2'] = "ListNumber2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber3"] = 'ListNumber3'] = "ListNumber3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber4"] = 'ListNumber4'] = "ListNumber4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListNumber5"] = 'ListNumber5'] = "ListNumber5";
        StyleIdentifierEnum[StyleIdentifierEnum["Title"] = 'Title'] = "Title";
        StyleIdentifierEnum[StyleIdentifierEnum["Closing"] = 'Closing'] = "Closing";
        StyleIdentifierEnum[StyleIdentifierEnum["Signature"] = 'Signature'] = "Signature";
        StyleIdentifierEnum[StyleIdentifierEnum["DefaultParagraphFont"] = 'DefaultParagraphFont'] = "DefaultParagraphFont";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText"] = 'BodyText'] = "BodyText";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd"] = 'BodyTextInd'] = "BodyTextInd";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue"] = 'ListContinue'] = "ListContinue";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue2"] = 'ListContinue2'] = "ListContinue2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue3"] = 'ListContinue3'] = "ListContinue3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue4"] = 'ListContinue4'] = "ListContinue4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListContinue5"] = 'ListContinue5'] = "ListContinue5";
        StyleIdentifierEnum[StyleIdentifierEnum["MessageHeader"] = 'MessageHeader'] = "MessageHeader";
        StyleIdentifierEnum[StyleIdentifierEnum["Subtitle"] = 'Subtitle'] = "Subtitle";
        StyleIdentifierEnum[StyleIdentifierEnum["Salutation"] = 'Salutation'] = "Salutation";
        StyleIdentifierEnum[StyleIdentifierEnum["Date"] = 'Date'] = "Date";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText1I"] = 'BodyText1I'] = "BodyText1I";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText1I2"] = 'BodyText1I2'] = "BodyText1I2";
        StyleIdentifierEnum[StyleIdentifierEnum["NoteHeading"] = 'NoteHeading'] = "NoteHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText2"] = 'BodyText2'] = "BodyText2";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyText3"] = 'BodyText3'] = "BodyText3";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd2"] = 'BodyTextInd2'] = "BodyTextInd2";
        StyleIdentifierEnum[StyleIdentifierEnum["BodyTextInd3"] = 'BodyTextInd3'] = "BodyTextInd3";
        StyleIdentifierEnum[StyleIdentifierEnum["BlockText"] = 'BlockText'] = "BlockText";
        StyleIdentifierEnum[StyleIdentifierEnum["Hyperlink"] = 'Hyperlink'] = "Hyperlink";
        StyleIdentifierEnum[StyleIdentifierEnum["FollowedHyperlink"] = 'FollowedHyperlink'] = "FollowedHyperlink";
        StyleIdentifierEnum[StyleIdentifierEnum["Strong"] = 'Strong'] = "Strong";
        StyleIdentifierEnum[StyleIdentifierEnum["Emphasis"] = 'Emphasis'] = "Emphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["DocumentMap"] = 'DocumentMap'] = "DocumentMap";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainText"] = 'PlainText'] = "PlainText";
        StyleIdentifierEnum[StyleIdentifierEnum["EmailSignature"] = 'EmailSignature'] = "EmailSignature";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlTopOfForm"] = 'HtmlTopOfForm'] = "HtmlTopOfForm";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlBottomOfForm"] = 'HtmlBottomOfForm'] = "HtmlBottomOfForm";
        StyleIdentifierEnum[StyleIdentifierEnum["NormalWeb"] = 'NormalWeb'] = "NormalWeb";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlAcronym"] = 'HtmlAcronym'] = "HtmlAcronym";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlAddress"] = 'HtmlAddress'] = "HtmlAddress";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlCite"] = 'HtmlCite'] = "HtmlCite";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlCode"] = 'HtmlCode'] = "HtmlCode";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlDefinition"] = 'HtmlDefinition'] = "HtmlDefinition";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlKeyboard"] = 'HtmlKeyboard'] = "HtmlKeyboard";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlPreformatted"] = 'HtmlPreformatted'] = "HtmlPreformatted";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlSample"] = 'HtmlSample'] = "HtmlSample";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlTypewriter"] = 'HtmlTypewriter'] = "HtmlTypewriter";
        StyleIdentifierEnum[StyleIdentifierEnum["HtmlVariable"] = 'HtmlVariable'] = "HtmlVariable";
        StyleIdentifierEnum[StyleIdentifierEnum["TableNormal"] = 'TableNormal'] = "TableNormal";
        StyleIdentifierEnum[StyleIdentifierEnum["CommentSubject"] = 'CommentSubject'] = "CommentSubject";
        StyleIdentifierEnum[StyleIdentifierEnum["NoList"] = 'NoList'] = "NoList";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList1"] = 'OutlineList1'] = "OutlineList1";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList2"] = 'OutlineList2'] = "OutlineList2";
        StyleIdentifierEnum[StyleIdentifierEnum["OutlineList3"] = 'OutlineList3'] = "OutlineList3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple1"] = 'TableSimple1'] = "TableSimple1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple2"] = 'TableSimple2'] = "TableSimple2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSimple3"] = 'TableSimple3'] = "TableSimple3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic1"] = 'TableClassic1'] = "TableClassic1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic2"] = 'TableClassic2'] = "TableClassic2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic3"] = 'TableClassic3'] = "TableClassic3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableClassic4"] = 'TableClassic4'] = "TableClassic4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful1"] = 'TableColorful1'] = "TableColorful1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful2"] = 'TableColorful2'] = "TableColorful2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColorful3"] = 'TableColorful3'] = "TableColorful3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns1"] = 'TableColumns1'] = "TableColumns1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns2"] = 'TableColumns2'] = "TableColumns2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns3"] = 'TableColumns3'] = "TableColumns3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns4"] = 'TableColumns4'] = "TableColumns4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableColumns5"] = 'TableColumns5'] = "TableColumns5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid1"] = 'TableGrid1'] = "TableGrid1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid2"] = 'TableGrid2'] = "TableGrid2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid3"] = 'TableGrid3'] = "TableGrid3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid4"] = 'TableGrid4'] = "TableGrid4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid5"] = 'TableGrid5'] = "TableGrid5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid6"] = 'TableGrid6'] = "TableGrid6";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid7"] = 'TableGrid7'] = "TableGrid7";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid8"] = 'TableGrid8'] = "TableGrid8";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList1"] = 'TableList1'] = "TableList1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList2"] = 'TableList2'] = "TableList2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList3"] = 'TableList3'] = "TableList3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList4"] = 'TableList4'] = "TableList4";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList5"] = 'TableList5'] = "TableList5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList6"] = 'TableList6'] = "TableList6";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList7"] = 'TableList7'] = "TableList7";
        StyleIdentifierEnum[StyleIdentifierEnum["TableList8"] = 'TableList8'] = "TableList8";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects1"] = 'Table3DEffects1'] = "Table3DEffects1";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects2"] = 'Table3DEffects2'] = "Table3DEffects2";
        StyleIdentifierEnum[StyleIdentifierEnum["Table3DEffects3"] = 'Table3DEffects3'] = "Table3DEffects3";
        StyleIdentifierEnum[StyleIdentifierEnum["TableContemporary"] = 'TableContemporary'] = "TableContemporary";
        StyleIdentifierEnum[StyleIdentifierEnum["TableElegant"] = 'TableElegant'] = "TableElegant";
        StyleIdentifierEnum[StyleIdentifierEnum["TableProfessional"] = 'TableProfessional'] = "TableProfessional";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSubtle1"] = 'TableSubtle1'] = "TableSubtle1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableSubtle2"] = 'TableSubtle2'] = "TableSubtle2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb1"] = 'TableWeb1'] = "TableWeb1";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb2"] = 'TableWeb2'] = "TableWeb2";
        StyleIdentifierEnum[StyleIdentifierEnum["TableWeb3"] = 'TableWeb3'] = "TableWeb3";
        StyleIdentifierEnum[StyleIdentifierEnum["BalloonText"] = 'BalloonText'] = "BalloonText";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGrid"] = 'TableGrid'] = "TableGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["TableTheme"] = 'TableTheme'] = "TableTheme";
        StyleIdentifierEnum[StyleIdentifierEnum["PlaceholderText"] = 'PlaceholderText'] = "PlaceholderText";
        StyleIdentifierEnum[StyleIdentifierEnum["NoSpacing"] = 'NoSpacing'] = "NoSpacing";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShading"] = 'LightShading'] = "LightShading";
        StyleIdentifierEnum[StyleIdentifierEnum["LightList"] = 'LightList'] = "LightList";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGrid"] = 'LightGrid'] = "LightGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1"] = 'MediumShading1'] = "MediumShading1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2"] = 'MediumShading2'] = "MediumShading2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1"] = 'MediumList1'] = "MediumList1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2"] = 'MediumList2'] = "MediumList2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1"] = 'MediumGrid1'] = "MediumGrid1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2"] = 'MediumGrid2'] = "MediumGrid2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3"] = 'MediumGrid3'] = "MediumGrid3";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkList"] = 'DarkList'] = "DarkList";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShading"] = 'ColorfulShading'] = "ColorfulShading";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulList"] = 'ColorfulList'] = "ColorfulList";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGrid"] = 'ColorfulGrid'] = "ColorfulGrid";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent1"] = 'LightShadingAccent1'] = "LightShadingAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent1"] = 'LightListAccent1'] = "LightListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent1"] = 'LightGridAccent1'] = "LightGridAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent1"] = 'MediumShading1Accent1'] = "MediumShading1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent1"] = 'MediumShading2Accent1'] = "MediumShading2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent1"] = 'MediumList1Accent1'] = "MediumList1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["Revision"] = 'Revision'] = "Revision";
        StyleIdentifierEnum[StyleIdentifierEnum["ListParagraph"] = 'ListParagraph'] = "ListParagraph";
        StyleIdentifierEnum[StyleIdentifierEnum["Quote"] = 'Quote'] = "Quote";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseQuote"] = 'IntenseQuote'] = "IntenseQuote";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent1"] = 'MediumList2Accent1'] = "MediumList2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent1"] = 'MediumGrid1Accent1'] = "MediumGrid1Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent1"] = 'MediumGrid2Accent1'] = "MediumGrid2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent1"] = 'MediumGrid3Accent1'] = "MediumGrid3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent1"] = 'DarkListAccent1'] = "DarkListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent1"] = 'ColorfulShadingAccent1'] = "ColorfulShadingAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent1"] = 'ColorfulListAccent1'] = "ColorfulListAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent1"] = 'ColorfulGridAccent1'] = "ColorfulGridAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent2"] = 'LightShadingAccent2'] = "LightShadingAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent2"] = 'LightListAccent2'] = "LightListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent2"] = 'LightGridAccent2'] = "LightGridAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent2"] = 'MediumShading1Accent2'] = "MediumShading1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent2"] = 'MediumShading2Accent2'] = "MediumShading2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent2"] = 'MediumList1Accent2'] = "MediumList1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent2"] = 'MediumList2Accent2'] = "MediumList2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent2"] = 'MediumGrid1Accent2'] = "MediumGrid1Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent2"] = 'MediumGrid2Accent2'] = "MediumGrid2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent2"] = 'MediumGrid3Accent2'] = "MediumGrid3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent2"] = 'DarkListAccent2'] = "DarkListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent2"] = 'ColorfulShadingAccent2'] = "ColorfulShadingAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent2"] = 'ColorfulListAccent2'] = "ColorfulListAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent2"] = 'ColorfulGridAccent2'] = "ColorfulGridAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent3"] = 'LightShadingAccent3'] = "LightShadingAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent3"] = 'LightListAccent3'] = "LightListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent3"] = 'LightGridAccent3'] = "LightGridAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent3"] = 'MediumShading1Accent3'] = "MediumShading1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent3"] = 'MediumShading2Accent3'] = "MediumShading2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent3"] = 'MediumList1Accent3'] = "MediumList1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent3"] = 'MediumList2Accent3'] = "MediumList2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent3"] = 'MediumGrid1Accent3'] = "MediumGrid1Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent3"] = 'MediumGrid2Accent3'] = "MediumGrid2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent3"] = 'MediumGrid3Accent3'] = "MediumGrid3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent3"] = 'DarkListAccent3'] = "DarkListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent3"] = 'ColorfulShadingAccent3'] = "ColorfulShadingAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent3"] = 'ColorfulListAccent3'] = "ColorfulListAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent3"] = 'ColorfulGridAccent3'] = "ColorfulGridAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent4"] = 'LightShadingAccent4'] = "LightShadingAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent4"] = 'LightListAccent4'] = "LightListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent4"] = 'LightGridAccent4'] = "LightGridAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent4"] = 'MediumShading1Accent4'] = "MediumShading1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent4"] = 'MediumShading2Accent4'] = "MediumShading2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent4"] = 'MediumList1Accent4'] = "MediumList1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent4"] = 'MediumList2Accent4'] = "MediumList2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent4"] = 'MediumGrid1Accent4'] = "MediumGrid1Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent4"] = 'MediumGrid2Accent4'] = "MediumGrid2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent4"] = 'MediumGrid3Accent4'] = "MediumGrid3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent4"] = 'DarkListAccent4'] = "DarkListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent4"] = 'ColorfulShadingAccent4'] = "ColorfulShadingAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent4"] = 'ColorfulListAccent4'] = "ColorfulListAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent4"] = 'ColorfulGridAccent4'] = "ColorfulGridAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent5"] = 'LightShadingAccent5'] = "LightShadingAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent5"] = 'LightListAccent5'] = "LightListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent5"] = 'LightGridAccent5'] = "LightGridAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent5"] = 'MediumShading1Accent5'] = "MediumShading1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent5"] = 'MediumShading2Accent5'] = "MediumShading2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent5"] = 'MediumList1Accent5'] = "MediumList1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent5"] = 'MediumList2Accent5'] = "MediumList2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent5"] = 'MediumGrid1Accent5'] = "MediumGrid1Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent5"] = 'MediumGrid2Accent5'] = "MediumGrid2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent5"] = 'MediumGrid3Accent5'] = "MediumGrid3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent5"] = 'DarkListAccent5'] = "DarkListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent5"] = 'ColorfulShadingAccent5'] = "ColorfulShadingAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent5"] = 'ColorfulListAccent5'] = "ColorfulListAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent5"] = 'ColorfulGridAccent5'] = "ColorfulGridAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["LightShadingAccent6"] = 'LightShadingAccent6'] = "LightShadingAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["LightListAccent6"] = 'LightListAccent6'] = "LightListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["LightGridAccent6"] = 'LightGridAccent6'] = "LightGridAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading1Accent6"] = 'MediumShading1Accent6'] = "MediumShading1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumShading2Accent6"] = 'MediumShading2Accent6'] = "MediumShading2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList1Accent6"] = 'MediumList1Accent6'] = "MediumList1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumList2Accent6"] = 'MediumList2Accent6'] = "MediumList2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid1Accent6"] = 'MediumGrid1Accent6'] = "MediumGrid1Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid2Accent6"] = 'MediumGrid2Accent6'] = "MediumGrid2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["MediumGrid3Accent6"] = 'MediumGrid3Accent6'] = "MediumGrid3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["DarkListAccent6"] = 'DarkListAccent6'] = "DarkListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulShadingAccent6"] = 'ColorfulShadingAccent6'] = "ColorfulShadingAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulListAccent6"] = 'ColorfulListAccent6'] = "ColorfulListAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ColorfulGridAccent6"] = 'ColorfulGridAccent6'] = "ColorfulGridAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["SubtleEmphasis"] = 'SubtleEmphasis'] = "SubtleEmphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseEmphasis"] = 'IntenseEmphasis'] = "IntenseEmphasis";
        StyleIdentifierEnum[StyleIdentifierEnum["SubtleReference"] = 'SubtleReference'] = "SubtleReference";
        StyleIdentifierEnum[StyleIdentifierEnum["IntenseReference"] = 'IntenseReference'] = "IntenseReference";
        StyleIdentifierEnum[StyleIdentifierEnum["BookTitle"] = 'BookTitle'] = "BookTitle";
        StyleIdentifierEnum[StyleIdentifierEnum["Bibliography"] = 'Bibliography'] = "Bibliography";
        StyleIdentifierEnum[StyleIdentifierEnum["TocHeading"] = 'TocHeading'] = "TocHeading";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable1"] = 'PlainTable1'] = "PlainTable1";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable2"] = 'PlainTable2'] = "PlainTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable3"] = 'PlainTable3'] = "PlainTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable4"] = 'PlainTable4'] = "PlainTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["PlainTable5"] = 'PlainTable5'] = "PlainTable5";
        StyleIdentifierEnum[StyleIdentifierEnum["TableGridLight"] = 'TableGridLight'] = "TableGridLight";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1Light"] = 'GridTable1Light'] = "GridTable1Light";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2"] = 'GridTable2'] = "GridTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3"] = 'GridTable3'] = "GridTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4"] = 'GridTable4'] = "GridTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5Dark"] = 'GridTable5Dark'] = "GridTable5Dark";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6Colorful"] = 'GridTable6Colorful'] = "GridTable6Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7Colorful"] = 'GridTable7Colorful'] = "GridTable7Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent1"] = 'GridTable1LightAccent1'] = "GridTable1LightAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent1"] = 'GridTable2Accent1'] = "GridTable2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent1"] = 'GridTable3Accent1'] = "GridTable3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent1"] = 'GridTable4Accent1'] = "GridTable4Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent1"] = 'GridTable5DarkAccent1'] = "GridTable5DarkAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent1"] = 'GridTable6ColorfulAccent1'] = "GridTable6ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent1"] = 'GridTable7ColorfulAccent1'] = "GridTable7ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent2"] = 'GridTable1LightAccent2'] = "GridTable1LightAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent2"] = 'GridTable2Accent2'] = "GridTable2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent2"] = 'GridTable3Accent2'] = "GridTable3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent2"] = 'GridTable4Accent2'] = "GridTable4Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent2"] = 'GridTable5DarkAccent2'] = "GridTable5DarkAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent2"] = 'GridTable6ColorfulAccent2'] = "GridTable6ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent2"] = 'GridTable7ColorfulAccent2'] = "GridTable7ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent3"] = 'GridTable1LightAccent3'] = "GridTable1LightAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent3"] = 'GridTable2Accent3'] = "GridTable2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent3"] = 'GridTable3Accent3'] = "GridTable3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent3"] = 'GridTable4Accent3'] = "GridTable4Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent3"] = 'GridTable5DarkAccent3'] = "GridTable5DarkAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent3"] = 'GridTable6ColorfulAccent3'] = "GridTable6ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent3"] = 'GridTable7ColorfulAccent3'] = "GridTable7ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent4"] = 'GridTable1LightAccent4'] = "GridTable1LightAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent4"] = 'GridTable2Accent4'] = "GridTable2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent4"] = 'GridTable3Accent4'] = "GridTable3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent4"] = 'GridTable4Accent4'] = "GridTable4Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent4"] = 'GridTable5DarkAccent4'] = "GridTable5DarkAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent4"] = 'GridTable6ColorfulAccent4'] = "GridTable6ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent4"] = 'GridTable7ColorfulAccent4'] = "GridTable7ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent5"] = 'GridTable1LightAccent5'] = "GridTable1LightAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent5"] = 'GridTable2Accent5'] = "GridTable2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent5"] = 'GridTable3Accent5'] = "GridTable3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent5"] = 'GridTable4Accent5'] = "GridTable4Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent5"] = 'GridTable5DarkAccent5'] = "GridTable5DarkAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent5"] = 'GridTable6ColorfulAccent5'] = "GridTable6ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent5"] = 'GridTable7ColorfulAccent5'] = "GridTable7ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable1LightAccent6"] = 'GridTable1LightAccent6'] = "GridTable1LightAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable2Accent6"] = 'GridTable2Accent6'] = "GridTable2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable3Accent6"] = 'GridTable3Accent6'] = "GridTable3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable4Accent6"] = 'GridTable4Accent6'] = "GridTable4Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable5DarkAccent6"] = 'GridTable5DarkAccent6'] = "GridTable5DarkAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable6ColorfulAccent6"] = 'GridTable6ColorfulAccent6'] = "GridTable6ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["GridTable7ColorfulAccent6"] = 'GridTable7ColorfulAccent6'] = "GridTable7ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1Light"] = 'ListTable1Light'] = "ListTable1Light";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2"] = 'ListTable2'] = "ListTable2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3"] = 'ListTable3'] = "ListTable3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4"] = 'ListTable4'] = "ListTable4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5Dark"] = 'ListTable5Dark'] = "ListTable5Dark";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6Colorful"] = 'ListTable6Colorful'] = "ListTable6Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7Colorful"] = 'ListTable7Colorful'] = "ListTable7Colorful";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent1"] = 'ListTable1LightAccent1'] = "ListTable1LightAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent1"] = 'ListTable2Accent1'] = "ListTable2Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent1"] = 'ListTable3Accent1'] = "ListTable3Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent1"] = 'ListTable4Accent1'] = "ListTable4Accent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent1"] = 'ListTable5DarkAccent1'] = "ListTable5DarkAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent1"] = 'ListTable6ColorfulAccent1'] = "ListTable6ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent1"] = 'ListTable7ColorfulAccent1'] = "ListTable7ColorfulAccent1";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent2"] = 'ListTable1LightAccent2'] = "ListTable1LightAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent2"] = 'ListTable2Accent2'] = "ListTable2Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent2"] = 'ListTable3Accent2'] = "ListTable3Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent2"] = 'ListTable4Accent2'] = "ListTable4Accent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent2"] = 'ListTable5DarkAccent2'] = "ListTable5DarkAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent2"] = 'ListTable6ColorfulAccent2'] = "ListTable6ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent2"] = 'ListTable7ColorfulAccent2'] = "ListTable7ColorfulAccent2";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent3"] = 'ListTable1LightAccent3'] = "ListTable1LightAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent3"] = 'ListTable2Accent3'] = "ListTable2Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent3"] = 'ListTable3Accent3'] = "ListTable3Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent3"] = 'ListTable4Accent3'] = "ListTable4Accent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent3"] = 'ListTable5DarkAccent3'] = "ListTable5DarkAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent3"] = 'ListTable6ColorfulAccent3'] = "ListTable6ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent3"] = 'ListTable7ColorfulAccent3'] = "ListTable7ColorfulAccent3";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent4"] = 'ListTable1LightAccent4'] = "ListTable1LightAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent4"] = 'ListTable2Accent4'] = "ListTable2Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent4"] = 'ListTable3Accent4'] = "ListTable3Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent4"] = 'ListTable4Accent4'] = "ListTable4Accent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent4"] = 'ListTable5DarkAccent4'] = "ListTable5DarkAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent4"] = 'ListTable6ColorfulAccent4'] = "ListTable6ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent4"] = 'ListTable7ColorfulAccent4'] = "ListTable7ColorfulAccent4";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent5"] = 'ListTable1LightAccent5'] = "ListTable1LightAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent5"] = 'ListTable2Accent5'] = "ListTable2Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent5"] = 'ListTable3Accent5'] = "ListTable3Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent5"] = 'ListTable4Accent5'] = "ListTable4Accent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent5"] = 'ListTable5DarkAccent5'] = "ListTable5DarkAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent5"] = 'ListTable6ColorfulAccent5'] = "ListTable6ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent5"] = 'ListTable7ColorfulAccent5'] = "ListTable7ColorfulAccent5";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable1LightAccent6"] = 'ListTable1LightAccent6'] = "ListTable1LightAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable2Accent6"] = 'ListTable2Accent6'] = "ListTable2Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable3Accent6"] = 'ListTable3Accent6'] = "ListTable3Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable4Accent6"] = 'ListTable4Accent6'] = "ListTable4Accent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable5DarkAccent6"] = 'ListTable5DarkAccent6'] = "ListTable5DarkAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable6ColorfulAccent6"] = 'ListTable6ColorfulAccent6'] = "ListTable6ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["ListTable7ColorfulAccent6"] = 'ListTable7ColorfulAccent6'] = "ListTable7ColorfulAccent6";
        StyleIdentifierEnum[StyleIdentifierEnum["User"] = 'User'] = "User";
        StyleIdentifierEnum[StyleIdentifierEnum["Nil"] = 'Nil'] = "Nil";
    })(StyleIdentifierEnum = TableProperties.StyleIdentifierEnum || (TableProperties.StyleIdentifierEnum = {}));
    let StyleOptionsEnum;
    (function (StyleOptionsEnum) {
        StyleOptionsEnum[StyleOptionsEnum["None"] = 'None'] = "None";
        StyleOptionsEnum[StyleOptionsEnum["FirstRow"] = 'FirstRow'] = "FirstRow";
        StyleOptionsEnum[StyleOptionsEnum["LastRow"] = 'LastRow'] = "LastRow";
        StyleOptionsEnum[StyleOptionsEnum["FirstColumn"] = 'FirstColumn'] = "FirstColumn";
        StyleOptionsEnum[StyleOptionsEnum["LastColumn"] = 'LastColumn'] = "LastColumn";
        StyleOptionsEnum[StyleOptionsEnum["RowBands"] = 'RowBands'] = "RowBands";
        StyleOptionsEnum[StyleOptionsEnum["Default"] = 'Default'] = "Default";
        StyleOptionsEnum[StyleOptionsEnum["ColumnBands"] = 'ColumnBands'] = "ColumnBands";
        StyleOptionsEnum[StyleOptionsEnum["Default2003"] = 'Default2003'] = "Default2003";
    })(StyleOptionsEnum = TableProperties.StyleOptionsEnum || (TableProperties.StyleOptionsEnum = {}));
    let TextWrappingEnum;
    (function (TextWrappingEnum) {
        TextWrappingEnum[TextWrappingEnum["Default"] = 'Default'] = "Default";
        TextWrappingEnum[TextWrappingEnum["None"] = 'None'] = "None";
        TextWrappingEnum[TextWrappingEnum["Around"] = 'Around'] = "Around";
    })(TextWrappingEnum = TableProperties.TextWrappingEnum || (TableProperties.TextWrappingEnum = {}));
})(TableProperties = exports.TableProperties || (exports.TableProperties = {}));
// tslint:enable:quotemark
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/tables/{0}/properties.
 */
class TablePropertiesResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TablePropertiesResponse.attributeTypeMap);
    }
}
exports.TablePropertiesResponse = TablePropertiesResponse;
/**
 * Attribute type map
 */
TablePropertiesResponse.attributeTypeMap = [
    {
        name: "properties",
        baseName: "Properties",
        type: "TableProperties",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/tables/{0}.
 */
class TableResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableResponse.attributeTypeMap);
    }
}
exports.TableResponse = TableResponse;
/**
 * Attribute type map
 */
TableResponse.attributeTypeMap = [
    {
        name: "table",
        baseName: "Table",
        type: "Table",
    }
];
/**
 * Represents all formatting for a table row.
 */
class TableRowFormat extends LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableRowFormat.attributeTypeMap);
    }
}
exports.TableRowFormat = TableRowFormat;
/**
 * Attribute type map
 */
TableRowFormat.attributeTypeMap = [
    {
        name: "allowBreakAcrossPages",
        baseName: "AllowBreakAcrossPages",
        type: "boolean",
    },
    {
        name: "headingFormat",
        baseName: "HeadingFormat",
        type: "boolean",
    },
    {
        name: "height",
        baseName: "Height",
        type: "number",
    },
    {
        name: "heightRule",
        baseName: "HeightRule",
        type: "TableRowFormat.HeightRuleEnum",
    }
];
/**
 * Enums for TableRowFormat
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (TableRowFormat) {
    let HeightRuleEnum;
    (function (HeightRuleEnum) {
        HeightRuleEnum[HeightRuleEnum["AtLeast"] = 'AtLeast'] = "AtLeast";
        HeightRuleEnum[HeightRuleEnum["Exactly"] = 'Exactly'] = "Exactly";
        HeightRuleEnum[HeightRuleEnum["Auto"] = 'Auto'] = "Auto";
    })(HeightRuleEnum = TableRowFormat.HeightRuleEnum || (TableRowFormat.HeightRuleEnum = {}));
})(TableRowFormat = exports.TableRowFormat || (exports.TableRowFormat = {}));
// tslint:enable:quotemark
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/tables/{0}/rows/{1}/rowformat.
 */
class TableRowFormatResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableRowFormatResponse.attributeTypeMap);
    }
}
exports.TableRowFormatResponse = TableRowFormatResponse;
/**
 * Attribute type map
 */
TableRowFormatResponse.attributeTypeMap = [
    {
        name: "rowFormat",
        baseName: "RowFormat",
        type: "TableRowFormat",
    }
];
/**
 * This response should be returned by the service when handling: GET http://api.aspose.com/v4.0/words/Test.doc/tables/{0}.
 */
class TableRowResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableRowResponse.attributeTypeMap);
    }
}
exports.TableRowResponse = TableRowResponse;
/**
 * Attribute type map
 */
TableRowResponse.attributeTypeMap = [
    {
        name: "row",
        baseName: "Row",
        type: "TableRow",
    }
];
/**
 * Container class for text save options.
 */
class TextSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TextSaveOptionsData.attributeTypeMap);
    }
}
exports.TextSaveOptionsData = TextSaveOptionsData;
/**
 * Attribute type map
 */
TextSaveOptionsData.attributeTypeMap = [
    {
        name: "addBidiMarks",
        baseName: "AddBidiMarks",
        type: "boolean",
    },
    {
        name: "encoding",
        baseName: "Encoding",
        type: "string",
    },
    {
        name: "exportHeadersFootersMode",
        baseName: "ExportHeadersFootersMode",
        type: "TextSaveOptionsData.ExportHeadersFootersModeEnum",
    },
    {
        name: "forcePageBreaks",
        baseName: "ForcePageBreaks",
        type: "boolean",
    },
    {
        name: "paragraphBreak",
        baseName: "ParagraphBreak",
        type: "string",
    },
    {
        name: "preserveTableLayout",
        baseName: "PreserveTableLayout",
        type: "boolean",
    },
    {
        name: "simplifyListLabels",
        baseName: "SimplifyListLabels",
        type: "boolean",
    }
];
/**
 * Enums for TextSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (TextSaveOptionsData) {
    let ExportHeadersFootersModeEnum;
    (function (ExportHeadersFootersModeEnum) {
        ExportHeadersFootersModeEnum[ExportHeadersFootersModeEnum["None"] = 'None'] = "None";
        ExportHeadersFootersModeEnum[ExportHeadersFootersModeEnum["PrimaryOnly"] = 'PrimaryOnly'] = "PrimaryOnly";
        ExportHeadersFootersModeEnum[ExportHeadersFootersModeEnum["AllAtEnd"] = 'AllAtEnd'] = "AllAtEnd";
    })(ExportHeadersFootersModeEnum = TextSaveOptionsData.ExportHeadersFootersModeEnum || (TextSaveOptionsData.ExportHeadersFootersModeEnum = {}));
})(TextSaveOptionsData = exports.TextSaveOptionsData || (exports.TextSaveOptionsData = {}));
// tslint:enable:quotemark
/**
 * container class for wml save options.
 */
class WordMLSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WordMLSaveOptionsData.attributeTypeMap);
    }
}
exports.WordMLSaveOptionsData = WordMLSaveOptionsData;
/**
 * Attribute type map
 */
WordMLSaveOptionsData.attributeTypeMap = [
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    }
];
/**
 * Response for Api error.
 */
class WordsApiErrorResponse extends WordsResponse {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WordsApiErrorResponse.attributeTypeMap);
    }
}
exports.WordsApiErrorResponse = WordsApiErrorResponse;
/**
 * Attribute type map
 */
WordsApiErrorResponse.attributeTypeMap = [
    {
        name: "error",
        baseName: "Error",
        type: "ApiError",
    }
];
/**
 * Provides information for the words api resource link.
 */
class WordsApiLink extends Link {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WordsApiLink.attributeTypeMap);
    }
}
exports.WordsApiLink = WordsApiLink;
/**
 * Attribute type map
 */
WordsApiLink.attributeTypeMap = [];
/**
 * container class for xaml flow save options.
 */
class XamlFlowSaveOptionsData extends SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XamlFlowSaveOptionsData.attributeTypeMap);
    }
}
exports.XamlFlowSaveOptionsData = XamlFlowSaveOptionsData;
/**
 * Attribute type map
 */
XamlFlowSaveOptionsData.attributeTypeMap = [
    {
        name: "imagesFolder",
        baseName: "ImagesFolder",
        type: "string",
    },
    {
        name: "imagesFolderAlias",
        baseName: "ImagesFolderAlias",
        type: "string",
    }
];
/**
 * Comment.
 */
class Comment extends CommentLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Comment.attributeTypeMap);
    }
}
exports.Comment = Comment;
/**
 * Attribute type map
 */
Comment.attributeTypeMap = [
    {
        name: "author",
        baseName: "Author",
        type: "string",
    },
    {
        name: "content",
        baseName: "Content",
        type: "StoryChildNodes",
    },
    {
        name: "dateTime",
        baseName: "DateTime",
        type: "Date",
    },
    {
        name: "initial",
        baseName: "Initial",
        type: "string",
    },
    {
        name: "rangeEnd",
        baseName: "RangeEnd",
        type: "DocumentPosition",
    },
    {
        name: "rangeStart",
        baseName: "RangeStart",
        type: "DocumentPosition",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Represents link for Drawing Object DTO.
 */
class DrawingObjectLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DrawingObjectLink.attributeTypeMap);
    }
}
exports.DrawingObjectLink = DrawingObjectLink;
/**
 * Attribute type map
 */
DrawingObjectLink.attributeTypeMap = [];
/**
 * Container class for epub save options.
 */
class EpubSaveOptionsData extends HtmlSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EpubSaveOptionsData.attributeTypeMap);
    }
}
exports.EpubSaveOptionsData = EpubSaveOptionsData;
/**
 * Attribute type map
 */
EpubSaveOptionsData.attributeTypeMap = [
    {
        name: "epubNavigationMapLevel",
        baseName: "EpubNavigationMapLevel",
        type: "number",
    }
];
// tslint:enable:quotemark
/**
 * Field link.
 */
class FieldLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FieldLink.attributeTypeMap);
    }
}
exports.FieldLink = FieldLink;
/**
 * Attribute type map
 */
FieldLink.attributeTypeMap = [
    {
        name: "fieldCode",
        baseName: "FieldCode",
        type: "string",
    }
];
/**
 * Footnote link.
 */
class FootnoteLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FootnoteLink.attributeTypeMap);
    }
}
exports.FootnoteLink = FootnoteLink;
/**
 * Attribute type map
 */
FootnoteLink.attributeTypeMap = [];
/**
 * FromField.
 */
class FormField extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormField.attributeTypeMap);
    }
}
exports.FormField = FormField;
/**
 * Attribute type map
 */
FormField.attributeTypeMap = [
    {
        name: "calculateOnExit",
        baseName: "CalculateOnExit",
        type: "boolean",
    },
    {
        name: "enabled",
        baseName: "Enabled",
        type: "boolean",
    },
    {
        name: "entryMacro",
        baseName: "EntryMacro",
        type: "string",
    },
    {
        name: "exitMacro",
        baseName: "ExitMacro",
        type: "string",
    },
    {
        name: "helpText",
        baseName: "HelpText",
        type: "string",
    },
    {
        name: "name",
        baseName: "Name",
        type: "string",
    },
    {
        name: "ownHelp",
        baseName: "OwnHelp",
        type: "boolean",
    },
    {
        name: "ownStatus",
        baseName: "OwnStatus",
        type: "boolean",
    },
    {
        name: "statusText",
        baseName: "StatusText",
        type: "string",
    }
];
/**
 * Section element.
 */
class HeaderFooter extends HeaderFooterLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HeaderFooter.attributeTypeMap);
    }
}
exports.HeaderFooter = HeaderFooter;
/**
 * Attribute type map
 */
HeaderFooter.attributeTypeMap = [
    {
        name: "childNodes",
        baseName: "ChildNodes",
        type: "Array<NodeLink>",
    },
    {
        name: "drawingObjects",
        baseName: "DrawingObjects",
        type: "LinkElement",
    },
    {
        name: "paragraphs",
        baseName: "Paragraphs",
        type: "LinkElement",
    }
];
// tslint:enable:quotemark
/**
 * container class for fixed html save options.
 */
class HtmlFixedSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HtmlFixedSaveOptionsData.attributeTypeMap);
    }
}
exports.HtmlFixedSaveOptionsData = HtmlFixedSaveOptionsData;
/**
 * Attribute type map
 */
HtmlFixedSaveOptionsData.attributeTypeMap = [
    {
        name: "cssClassNamesPrefix",
        baseName: "CssClassNamesPrefix",
        type: "string",
    },
    {
        name: "encoding",
        baseName: "Encoding",
        type: "string",
    },
    {
        name: "exportEmbeddedCss",
        baseName: "ExportEmbeddedCss",
        type: "boolean",
    },
    {
        name: "exportEmbeddedFonts",
        baseName: "ExportEmbeddedFonts",
        type: "boolean",
    },
    {
        name: "exportEmbeddedImages",
        baseName: "ExportEmbeddedImages",
        type: "boolean",
    },
    {
        name: "exportFormFields",
        baseName: "ExportFormFields",
        type: "boolean",
    },
    {
        name: "fontFormat",
        baseName: "FontFormat",
        type: "string",
    },
    {
        name: "pageHorizontalAlignment",
        baseName: "PageHorizontalAlignment",
        type: "string",
    },
    {
        name: "pageMargins",
        baseName: "PageMargins",
        type: "number",
    },
    {
        name: "resourcesFolder",
        baseName: "ResourcesFolder",
        type: "string",
    },
    {
        name: "resourcesFolderAlias",
        baseName: "ResourcesFolderAlias",
        type: "string",
    },
    {
        name: "saveFontFaceCssSeparately",
        baseName: "SaveFontFaceCssSeparately",
        type: "boolean",
    },
    {
        name: "showPageBorder",
        baseName: "ShowPageBorder",
        type: "boolean",
    }
];
/**
 * Container abstract class for image save options.
 */
class ImageSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImageSaveOptionsData.attributeTypeMap);
    }
}
exports.ImageSaveOptionsData = ImageSaveOptionsData;
/**
 * Attribute type map
 */
ImageSaveOptionsData.attributeTypeMap = [
    {
        name: "graphicsQualityOptions",
        baseName: "GraphicsQualityOptions",
        type: "GraphicsQualityOptionsData",
    },
    {
        name: "horizontalResolution",
        baseName: "HorizontalResolution",
        type: "number",
    },
    {
        name: "imageBrightness",
        baseName: "ImageBrightness",
        type: "number",
    },
    {
        name: "imageColorMode",
        baseName: "ImageColorMode",
        type: "string",
    },
    {
        name: "imageContrast",
        baseName: "ImageContrast",
        type: "number",
    },
    {
        name: "paperColor",
        baseName: "PaperColor",
        type: "string",
    },
    {
        name: "pixelFormat",
        baseName: "PixelFormat",
        type: "string",
    },
    {
        name: "resolution",
        baseName: "Resolution",
        type: "number",
    },
    {
        name: "scale",
        baseName: "Scale",
        type: "number",
    },
    {
        name: "useAntiAliasing",
        baseName: "UseAntiAliasing",
        type: "boolean",
    },
    {
        name: "useGdiEmfRenderer",
        baseName: "UseGdiEmfRenderer",
        type: "boolean",
    },
    {
        name: "useHighQualityRendering",
        baseName: "UseHighQualityRendering",
        type: "boolean",
    },
    {
        name: "verticalResolution",
        baseName: "VerticalResolution",
        type: "number",
    }
];
/**
 * Container class for mhtml save options.
 */
class MhtmlSaveOptionsData extends HtmlSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(MhtmlSaveOptionsData.attributeTypeMap);
    }
}
exports.MhtmlSaveOptionsData = MhtmlSaveOptionsData;
/**
 * Attribute type map
 */
MhtmlSaveOptionsData.attributeTypeMap = [
    {
        name: "exportCidUrlsForMhtmlResources",
        baseName: "ExportCidUrlsForMhtmlResources",
        type: "boolean",
    }
];
// tslint:enable:quotemark
/**
 * OfficeMath object link element.
 */
class OfficeMathLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OfficeMathLink.attributeTypeMap);
    }
}
exports.OfficeMathLink = OfficeMathLink;
/**
 * Attribute type map
 */
OfficeMathLink.attributeTypeMap = [];
/**
 * Paragraph element.
 */
class Paragraph extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Paragraph.attributeTypeMap);
    }
}
exports.Paragraph = Paragraph;
/**
 * Attribute type map
 */
Paragraph.attributeTypeMap = [
    {
        name: "childNodes",
        baseName: "ChildNodes",
        type: "Array<NodeLink>",
    }
];
/**
 * Paragraph link element.
 */
class ParagraphLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ParagraphLink.attributeTypeMap);
    }
}
exports.ParagraphLink = ParagraphLink;
/**
 * Attribute type map
 */
ParagraphLink.attributeTypeMap = [
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Container class for pcl save options.
 */
class PclSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PclSaveOptionsData.attributeTypeMap);
    }
}
exports.PclSaveOptionsData = PclSaveOptionsData;
/**
 * Attribute type map
 */
PclSaveOptionsData.attributeTypeMap = [
    {
        name: "falllbackFontName",
        baseName: "FalllbackFontName",
        type: "string",
    },
    {
        name: "rasterizeTransformedElements",
        baseName: "RasterizeTransformedElements",
        type: "boolean",
    }
];
/**
 * container class for pdf save options.
 */
class PdfSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PdfSaveOptionsData.attributeTypeMap);
    }
}
exports.PdfSaveOptionsData = PdfSaveOptionsData;
/**
 * Attribute type map
 */
PdfSaveOptionsData.attributeTypeMap = [
    {
        name: "compliance",
        baseName: "Compliance",
        type: "string",
    },
    {
        name: "createNoteHyperlinks",
        baseName: "CreateNoteHyperlinks",
        type: "boolean",
    },
    {
        name: "customPropertiesExport",
        baseName: "CustomPropertiesExport",
        type: "string",
    },
    {
        name: "digitalSignatureDetails",
        baseName: "DigitalSignatureDetails",
        type: "PdfDigitalSignatureDetailsData",
    },
    {
        name: "displayDocTitle",
        baseName: "DisplayDocTitle",
        type: "boolean",
    },
    {
        name: "downsampleOptions",
        baseName: "DownsampleOptions",
        type: "DownsampleOptionsData",
    },
    {
        name: "embedFullFonts",
        baseName: "EmbedFullFonts",
        type: "boolean",
    },
    {
        name: "encryptionDetails",
        baseName: "EncryptionDetails",
        type: "PdfEncryptionDetailsData",
    },
    {
        name: "escapeUri",
        baseName: "EscapeUri",
        type: "boolean",
    },
    {
        name: "exportDocumentStructure",
        baseName: "ExportDocumentStructure",
        type: "boolean",
    },
    {
        name: "fontEmbeddingMode",
        baseName: "FontEmbeddingMode",
        type: "string",
    },
    {
        name: "headerFooterBookmarksExportMode",
        baseName: "HeaderFooterBookmarksExportMode",
        type: "PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum",
    },
    {
        name: "imageColorSpaceExportMode",
        baseName: "ImageColorSpaceExportMode",
        type: "string",
    },
    {
        name: "imageCompression",
        baseName: "ImageCompression",
        type: "string",
    },
    {
        name: "openHyperlinksInNewWindow",
        baseName: "OpenHyperlinksInNewWindow",
        type: "boolean",
    },
    {
        name: "outlineOptions",
        baseName: "OutlineOptions",
        type: "OutlineOptionsData",
    },
    {
        name: "pageMode",
        baseName: "PageMode",
        type: "string",
    },
    {
        name: "preblendImages",
        baseName: "PreblendImages",
        type: "boolean",
    },
    {
        name: "preserveFormFields",
        baseName: "PreserveFormFields",
        type: "boolean",
    },
    {
        name: "textCompression",
        baseName: "TextCompression",
        type: "string",
    },
    {
        name: "useBookFoldPrintingSettings",
        baseName: "UseBookFoldPrintingSettings",
        type: "boolean",
    },
    {
        name: "useCoreFonts",
        baseName: "UseCoreFonts",
        type: "boolean",
    },
    {
        name: "zoomBehavior",
        baseName: "ZoomBehavior",
        type: "string",
    },
    {
        name: "zoomFactor",
        baseName: "ZoomFactor",
        type: "number",
    }
];
/**
 * Enums for PdfSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (PdfSaveOptionsData) {
    let HeaderFooterBookmarksExportModeEnum;
    (function (HeaderFooterBookmarksExportModeEnum) {
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["None"] = 'None'] = "None";
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["First"] = 'First'] = "First";
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["All"] = 'All'] = "All";
    })(HeaderFooterBookmarksExportModeEnum = PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum || (PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum = {}));
})(PdfSaveOptionsData = exports.PdfSaveOptionsData || (exports.PdfSaveOptionsData = {}));
// tslint:enable:quotemark
/**
 * container class for ps save options.
 */
class PsSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PsSaveOptionsData.attributeTypeMap);
    }
}
exports.PsSaveOptionsData = PsSaveOptionsData;
/**
 * Attribute type map
 */
PsSaveOptionsData.attributeTypeMap = [
    {
        name: "useBookFoldPrintingSettings",
        baseName: "UseBookFoldPrintingSettings",
        type: "boolean",
    }
];
/**
 * Run link element.
 */
class RunLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RunLink.attributeTypeMap);
    }
}
exports.RunLink = RunLink;
/**
 * Attribute type map
 */
RunLink.attributeTypeMap = [
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Section link element.
 */
class SectionLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SectionLink.attributeTypeMap);
    }
}
exports.SectionLink = SectionLink;
/**
 * Attribute type map
 */
SectionLink.attributeTypeMap = [];
/**
 * container class for svg save options.
 */
class SvgSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SvgSaveOptionsData.attributeTypeMap);
    }
}
exports.SvgSaveOptionsData = SvgSaveOptionsData;
/**
 * Attribute type map
 */
SvgSaveOptionsData.attributeTypeMap = [
    {
        name: "exportEmbeddedImages",
        baseName: "ExportEmbeddedImages",
        type: "boolean",
    },
    {
        name: "fitToViewPort",
        baseName: "FitToViewPort",
        type: "boolean",
    },
    {
        name: "resourcesFolder",
        baseName: "ResourcesFolder",
        type: "string",
    },
    {
        name: "resourcesFolderAlias",
        baseName: "ResourcesFolderAlias",
        type: "string",
    },
    {
        name: "showPageBorder",
        baseName: "ShowPageBorder",
        type: "boolean",
    },
    {
        name: "textOutputMode",
        baseName: "TextOutputMode",
        type: "string",
    }
];
/**
 * Table element.
 */
class Table extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Table.attributeTypeMap);
    }
}
exports.Table = Table;
/**
 * Attribute type map
 */
Table.attributeTypeMap = [
    {
        name: "tableProperties",
        baseName: "TableProperties",
        type: "TableProperties",
    },
    {
        name: "tableRowList",
        baseName: "TableRowList",
        type: "Array<TableRow>",
    }
];
/**
 * Table cell element.
 */
class TableCell extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableCell.attributeTypeMap);
    }
}
exports.TableCell = TableCell;
/**
 * Attribute type map
 */
TableCell.attributeTypeMap = [
    {
        name: "childNodes",
        baseName: "ChildNodes",
        type: "Array<NodeLink>",
    }
];
/**
 * Table link element.
 */
class TableLink extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableLink.attributeTypeMap);
    }
}
exports.TableLink = TableLink;
/**
 * Attribute type map
 */
TableLink.attributeTypeMap = [];
/**
 * Table row element.
 */
class TableRow extends NodeLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableRow.attributeTypeMap);
    }
}
exports.TableRow = TableRow;
/**
 * Attribute type map
 */
TableRow.attributeTypeMap = [
    {
        name: "rowFormat",
        baseName: "RowFormat",
        type: "TableRowFormat",
    },
    {
        name: "tableCellList",
        baseName: "TableCellList",
        type: "Array<TableCell>",
    }
];
/**
 * container class for xaml fixed save options.
 */
class XamlFixedSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XamlFixedSaveOptionsData.attributeTypeMap);
    }
}
exports.XamlFixedSaveOptionsData = XamlFixedSaveOptionsData;
/**
 * Attribute type map
 */
XamlFixedSaveOptionsData.attributeTypeMap = [
    {
        name: "resourcesFolder",
        baseName: "ResourcesFolder",
        type: "string",
    },
    {
        name: "resourcesFolderAlias",
        baseName: "ResourcesFolderAlias",
        type: "string",
    }
];
/**
 * Container class for xps save options.
 */
class XpsSaveOptionsData extends FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XpsSaveOptionsData.attributeTypeMap);
    }
}
exports.XpsSaveOptionsData = XpsSaveOptionsData;
/**
 * Attribute type map
 */
XpsSaveOptionsData.attributeTypeMap = [
    {
        name: "bookmarksOutlineLevel",
        baseName: "BookmarksOutlineLevel",
        type: "number",
    },
    {
        name: "headingsOutlineLevels",
        baseName: "HeadingsOutlineLevels",
        type: "number",
    },
    {
        name: "outlineOptions",
        baseName: "OutlineOptions",
        type: "OutlineOptionsData",
    },
    {
        name: "useBookFoldPrintingSettings",
        baseName: "UseBookFoldPrintingSettings",
        type: "boolean",
    }
];
/**
 * Container class for bmp save options.
 */
class BmpSaveOptionsData extends ImageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BmpSaveOptionsData.attributeTypeMap);
    }
}
exports.BmpSaveOptionsData = BmpSaveOptionsData;
/**
 * Attribute type map
 */
BmpSaveOptionsData.attributeTypeMap = [];
/**
 * Represents Drawing Object DTO.
 */
class DrawingObject extends DrawingObjectLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DrawingObject.attributeTypeMap);
    }
}
exports.DrawingObject = DrawingObject;
/**
 * Attribute type map
 */
DrawingObject.attributeTypeMap = [
    {
        name: "height",
        baseName: "Height",
        type: "number",
    },
    {
        name: "imageDataLink",
        baseName: "ImageDataLink",
        type: "WordsApiLink",
    },
    {
        name: "left",
        baseName: "Left",
        type: "number",
    },
    {
        name: "oleDataLink",
        baseName: "OleDataLink",
        type: "WordsApiLink",
    },
    {
        name: "relativeHorizontalPosition",
        baseName: "RelativeHorizontalPosition",
        type: "DrawingObject.RelativeHorizontalPositionEnum",
    },
    {
        name: "relativeVerticalPosition",
        baseName: "RelativeVerticalPosition",
        type: "DrawingObject.RelativeVerticalPositionEnum",
    },
    {
        name: "renderLinks",
        baseName: "RenderLinks",
        type: "Array<WordsApiLink>",
    },
    {
        name: "top",
        baseName: "Top",
        type: "number",
    },
    {
        name: "width",
        baseName: "Width",
        type: "number",
    },
    {
        name: "wrapType",
        baseName: "WrapType",
        type: "DrawingObject.WrapTypeEnum",
    }
];
/**
 * Enums for DrawingObject
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (DrawingObject) {
    let RelativeHorizontalPositionEnum;
    (function (RelativeHorizontalPositionEnum) {
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Margin"] = 'Margin'] = "Margin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Page"] = 'Page'] = "Page";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Column"] = 'Column'] = "Column";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Default"] = 'Default'] = "Default";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Character"] = 'Character'] = "Character";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["LeftMargin"] = 'LeftMargin'] = "LeftMargin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["RightMargin"] = 'RightMargin'] = "RightMargin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["InsideMargin"] = 'InsideMargin'] = "InsideMargin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["OutsideMargin"] = 'OutsideMargin'] = "OutsideMargin";
    })(RelativeHorizontalPositionEnum = DrawingObject.RelativeHorizontalPositionEnum || (DrawingObject.RelativeHorizontalPositionEnum = {}));
    let RelativeVerticalPositionEnum;
    (function (RelativeVerticalPositionEnum) {
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Margin"] = 'Margin'] = "Margin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["TableDefault"] = 'TableDefault'] = "TableDefault";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Page"] = 'Page'] = "Page";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Paragraph"] = 'Paragraph'] = "Paragraph";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["TextFrameDefault"] = 'TextFrameDefault'] = "TextFrameDefault";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Line"] = 'Line'] = "Line";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["TopMargin"] = 'TopMargin'] = "TopMargin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["BottomMargin"] = 'BottomMargin'] = "BottomMargin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["InsideMargin"] = 'InsideMargin'] = "InsideMargin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["OutsideMargin"] = 'OutsideMargin'] = "OutsideMargin";
    })(RelativeVerticalPositionEnum = DrawingObject.RelativeVerticalPositionEnum || (DrawingObject.RelativeVerticalPositionEnum = {}));
    let WrapTypeEnum;
    (function (WrapTypeEnum) {
        WrapTypeEnum[WrapTypeEnum["Inline"] = 'Inline'] = "Inline";
        WrapTypeEnum[WrapTypeEnum["TopBottom"] = 'TopBottom'] = "TopBottom";
        WrapTypeEnum[WrapTypeEnum["Square"] = 'Square'] = "Square";
        WrapTypeEnum[WrapTypeEnum["None"] = 'None'] = "None";
        WrapTypeEnum[WrapTypeEnum["Tight"] = 'Tight'] = "Tight";
        WrapTypeEnum[WrapTypeEnum["Through"] = 'Through'] = "Through";
    })(WrapTypeEnum = DrawingObject.WrapTypeEnum || (DrawingObject.WrapTypeEnum = {}));
})(DrawingObject = exports.DrawingObject || (exports.DrawingObject = {}));
// tslint:enable:quotemark
/**
 * Container class for emf save options.
 */
class EmfSaveOptionsData extends ImageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EmfSaveOptionsData.attributeTypeMap);
    }
}
exports.EmfSaveOptionsData = EmfSaveOptionsData;
/**
 * Attribute type map
 */
EmfSaveOptionsData.attributeTypeMap = [];
/**
 * Field.
 */
class Field extends FieldLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Field.attributeTypeMap);
    }
}
exports.Field = Field;
/**
 * Attribute type map
 */
Field.attributeTypeMap = [
    {
        name: "localeId",
        baseName: "LocaleId",
        type: "string",
    },
    {
        name: "result",
        baseName: "Result",
        type: "string",
    }
];
/**
 * Footnote.
 */
class Footnote extends FootnoteLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Footnote.attributeTypeMap);
    }
}
exports.Footnote = Footnote;
/**
 * Attribute type map
 */
Footnote.attributeTypeMap = [
    {
        name: "content",
        baseName: "Content",
        type: "StoryChildNodes",
    },
    {
        name: "footnoteType",
        baseName: "FootnoteType",
        type: "Footnote.FootnoteTypeEnum",
    },
    {
        name: "position",
        baseName: "Position",
        type: "DocumentPosition",
    },
    {
        name: "referenceMark",
        baseName: "ReferenceMark",
        type: "string",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Enums for Footnote
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (Footnote) {
    let FootnoteTypeEnum;
    (function (FootnoteTypeEnum) {
        FootnoteTypeEnum[FootnoteTypeEnum["Footnote"] = 'Footnote'] = "Footnote";
        FootnoteTypeEnum[FootnoteTypeEnum["Endnote"] = 'Endnote'] = "Endnote";
    })(FootnoteTypeEnum = Footnote.FootnoteTypeEnum || (Footnote.FootnoteTypeEnum = {}));
})(Footnote = exports.Footnote || (exports.Footnote = {}));
// tslint:enable:quotemark
/**
 * FormField checkbox element.
 */
class FormFieldCheckbox extends FormField {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormFieldCheckbox.attributeTypeMap);
    }
}
exports.FormFieldCheckbox = FormFieldCheckbox;
/**
 * Attribute type map
 */
FormFieldCheckbox.attributeTypeMap = [
    {
        name: "checkBoxSize",
        baseName: "CheckBoxSize",
        type: "number",
    },
    {
        name: "checked",
        baseName: "Checked",
        type: "boolean",
    },
    {
        name: "isCheckBoxExactSize",
        baseName: "IsCheckBoxExactSize",
        type: "boolean",
    }
];
/**
 * FormField dropdownlist element.
 */
class FormFieldDropDown extends FormField {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormFieldDropDown.attributeTypeMap);
    }
}
exports.FormFieldDropDown = FormFieldDropDown;
/**
 * Attribute type map
 */
FormFieldDropDown.attributeTypeMap = [
    {
        name: "dropDownItems",
        baseName: "DropDownItems",
        type: "Array<string>",
    },
    {
        name: "dropDownSelectedIndex",
        baseName: "DropDownSelectedIndex",
        type: "number",
    }
];
/**
 * FormField text input element.
 */
class FormFieldTextInput extends FormField {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormFieldTextInput.attributeTypeMap);
    }
}
exports.FormFieldTextInput = FormFieldTextInput;
/**
 * Attribute type map
 */
FormFieldTextInput.attributeTypeMap = [
    {
        name: "maxLength",
        baseName: "MaxLength",
        type: "number",
    },
    {
        name: "textInputDefault",
        baseName: "TextInputDefault",
        type: "string",
    },
    {
        name: "textInputFormat",
        baseName: "TextInputFormat",
        type: "string",
    },
    {
        name: "textInputType",
        baseName: "TextInputType",
        type: "FormFieldTextInput.TextInputTypeEnum",
    }
];
/**
 * Enums for FormFieldTextInput
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (FormFieldTextInput) {
    let TextInputTypeEnum;
    (function (TextInputTypeEnum) {
        TextInputTypeEnum[TextInputTypeEnum["Regular"] = 'Regular'] = "Regular";
        TextInputTypeEnum[TextInputTypeEnum["Number"] = 'Number'] = "Number";
        TextInputTypeEnum[TextInputTypeEnum["Date"] = 'Date'] = "Date";
        TextInputTypeEnum[TextInputTypeEnum["CurrentDate"] = 'CurrentDate'] = "CurrentDate";
        TextInputTypeEnum[TextInputTypeEnum["CurrentTime"] = 'CurrentTime'] = "CurrentTime";
        TextInputTypeEnum[TextInputTypeEnum["Calculated"] = 'Calculated'] = "Calculated";
    })(TextInputTypeEnum = FormFieldTextInput.TextInputTypeEnum || (FormFieldTextInput.TextInputTypeEnum = {}));
})(FormFieldTextInput = exports.FormFieldTextInput || (exports.FormFieldTextInput = {}));
// tslint:enable:quotemark
/**
 * Container class for gif save options.
 */
class GifSaveOptionsData extends ImageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(GifSaveOptionsData.attributeTypeMap);
    }
}
exports.GifSaveOptionsData = GifSaveOptionsData;
/**
 * Attribute type map
 */
GifSaveOptionsData.attributeTypeMap = [];
/**
 * container class for jpeg save options.
 */
class JpegSaveOptionsData extends ImageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpegSaveOptionsData.attributeTypeMap);
    }
}
exports.JpegSaveOptionsData = JpegSaveOptionsData;
/**
 * Attribute type map
 */
JpegSaveOptionsData.attributeTypeMap = [];
/**
 * OfficeMath object.
 */
class OfficeMathObject extends OfficeMathLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OfficeMathObject.attributeTypeMap);
    }
}
exports.OfficeMathObject = OfficeMathObject;
/**
 * Attribute type map
 */
OfficeMathObject.attributeTypeMap = [
    {
        name: "content",
        baseName: "Content",
        type: "StoryChildNodes",
    },
    {
        name: "displayType",
        baseName: "DisplayType",
        type: "OfficeMathObject.DisplayTypeEnum",
    },
    {
        name: "justification",
        baseName: "Justification",
        type: "OfficeMathObject.JustificationEnum",
    },
    {
        name: "mathObjectType",
        baseName: "MathObjectType",
        type: "OfficeMathObject.MathObjectTypeEnum",
    }
];
/**
 * Enums for OfficeMathObject
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (OfficeMathObject) {
    let DisplayTypeEnum;
    (function (DisplayTypeEnum) {
        DisplayTypeEnum[DisplayTypeEnum["Display"] = 'Display'] = "Display";
        DisplayTypeEnum[DisplayTypeEnum["Inline"] = 'Inline'] = "Inline";
    })(DisplayTypeEnum = OfficeMathObject.DisplayTypeEnum || (OfficeMathObject.DisplayTypeEnum = {}));
    let JustificationEnum;
    (function (JustificationEnum) {
        JustificationEnum[JustificationEnum["CenterGroup"] = 'CenterGroup'] = "CenterGroup";
        JustificationEnum[JustificationEnum["Default"] = 'Default'] = "Default";
        JustificationEnum[JustificationEnum["Center"] = 'Center'] = "Center";
        JustificationEnum[JustificationEnum["Left"] = 'Left'] = "Left";
        JustificationEnum[JustificationEnum["Right"] = 'Right'] = "Right";
        JustificationEnum[JustificationEnum["Inline"] = 'Inline'] = "Inline";
    })(JustificationEnum = OfficeMathObject.JustificationEnum || (OfficeMathObject.JustificationEnum = {}));
    let MathObjectTypeEnum;
    (function (MathObjectTypeEnum) {
        MathObjectTypeEnum[MathObjectTypeEnum["OMath"] = 'OMath'] = "OMath";
        MathObjectTypeEnum[MathObjectTypeEnum["OMathPara"] = 'OMathPara'] = "OMathPara";
        MathObjectTypeEnum[MathObjectTypeEnum["Accent"] = 'Accent'] = "Accent";
        MathObjectTypeEnum[MathObjectTypeEnum["Bar"] = 'Bar'] = "Bar";
        MathObjectTypeEnum[MathObjectTypeEnum["BorderBox"] = 'BorderBox'] = "BorderBox";
        MathObjectTypeEnum[MathObjectTypeEnum["Box"] = 'Box'] = "Box";
        MathObjectTypeEnum[MathObjectTypeEnum["Delimiter"] = 'Delimiter'] = "Delimiter";
        MathObjectTypeEnum[MathObjectTypeEnum["Degree"] = 'Degree'] = "Degree";
        MathObjectTypeEnum[MathObjectTypeEnum["Argument"] = 'Argument'] = "Argument";
        MathObjectTypeEnum[MathObjectTypeEnum["Array"] = 'Array'] = "Array";
        MathObjectTypeEnum[MathObjectTypeEnum["Fraction"] = 'Fraction'] = "Fraction";
        MathObjectTypeEnum[MathObjectTypeEnum["Denominator"] = 'Denominator'] = "Denominator";
        MathObjectTypeEnum[MathObjectTypeEnum["Numerator"] = 'Numerator'] = "Numerator";
        MathObjectTypeEnum[MathObjectTypeEnum["Function"] = 'Function'] = "Function";
        MathObjectTypeEnum[MathObjectTypeEnum["FunctionName"] = 'FunctionName'] = "FunctionName";
        MathObjectTypeEnum[MathObjectTypeEnum["GroupCharacter"] = 'GroupCharacter'] = "GroupCharacter";
        MathObjectTypeEnum[MathObjectTypeEnum["Limit"] = 'Limit'] = "Limit";
        MathObjectTypeEnum[MathObjectTypeEnum["LowerLimit"] = 'LowerLimit'] = "LowerLimit";
        MathObjectTypeEnum[MathObjectTypeEnum["UpperLimit"] = 'UpperLimit'] = "UpperLimit";
        MathObjectTypeEnum[MathObjectTypeEnum["Matrix"] = 'Matrix'] = "Matrix";
        MathObjectTypeEnum[MathObjectTypeEnum["MatrixRow"] = 'MatrixRow'] = "MatrixRow";
        MathObjectTypeEnum[MathObjectTypeEnum["NAry"] = 'NAry'] = "NAry";
        MathObjectTypeEnum[MathObjectTypeEnum["Phantom"] = 'Phantom'] = "Phantom";
        MathObjectTypeEnum[MathObjectTypeEnum["Radical"] = 'Radical'] = "Radical";
        MathObjectTypeEnum[MathObjectTypeEnum["SubscriptPart"] = 'SubscriptPart'] = "SubscriptPart";
        MathObjectTypeEnum[MathObjectTypeEnum["SuperscriptPart"] = 'SuperscriptPart'] = "SuperscriptPart";
        MathObjectTypeEnum[MathObjectTypeEnum["PreSubSuperscript"] = 'PreSubSuperscript'] = "PreSubSuperscript";
        MathObjectTypeEnum[MathObjectTypeEnum["Subscript"] = 'Subscript'] = "Subscript";
        MathObjectTypeEnum[MathObjectTypeEnum["SubSuperscript"] = 'SubSuperscript'] = "SubSuperscript";
        MathObjectTypeEnum[MathObjectTypeEnum["Supercript"] = 'Supercript'] = "Supercript";
    })(MathObjectTypeEnum = OfficeMathObject.MathObjectTypeEnum || (OfficeMathObject.MathObjectTypeEnum = {}));
})(OfficeMathObject = exports.OfficeMathObject || (exports.OfficeMathObject = {}));
// tslint:enable:quotemark
/**
 * container class for png save options.
 */
class PngSaveOptionsData extends ImageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PngSaveOptionsData.attributeTypeMap);
    }
}
exports.PngSaveOptionsData = PngSaveOptionsData;
/**
 * Attribute type map
 */
PngSaveOptionsData.attributeTypeMap = [];
/**
 * Run element.
 */
class Run extends RunLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Run.attributeTypeMap);
    }
}
exports.Run = Run;
/**
 * Attribute type map
 */
Run.attributeTypeMap = [];
/**
 * Container class for tiff save options.
 */
class TiffSaveOptionsData extends ImageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TiffSaveOptionsData.attributeTypeMap);
    }
}
exports.TiffSaveOptionsData = TiffSaveOptionsData;
/**
 * Attribute type map
 */
TiffSaveOptionsData.attributeTypeMap = [
    {
        name: "thresholdForFloydSteinbergDithering",
        baseName: "ThresholdForFloydSteinbergDithering",
        type: "number",
    },
    {
        name: "tiffBinarizationMethod",
        baseName: "TiffBinarizationMethod",
        type: "string",
    },
    {
        name: "tiffCompression",
        baseName: "TiffCompression",
        type: "string",
    }
];
const enumsMap = {
    "Document.SourceFormatEnum": Document.SourceFormatEnum,
    "GraphicsQualityOptionsData.CompositingModeEnum": GraphicsQualityOptionsData.CompositingModeEnum,
    "GraphicsQualityOptionsData.CompositingQualityEnum": GraphicsQualityOptionsData.CompositingQualityEnum,
    "GraphicsQualityOptionsData.InterpolationModeEnum": GraphicsQualityOptionsData.InterpolationModeEnum,
    "GraphicsQualityOptionsData.SmoothingModeEnum": GraphicsQualityOptionsData.SmoothingModeEnum,
    "GraphicsQualityOptionsData.TextRenderingHintEnum": GraphicsQualityOptionsData.TextRenderingHintEnum,
    "PreferredWidth.TypeEnum": PreferredWidth.TypeEnum,
    "ReplaceRange.TextTypeEnum": ReplaceRange.TextTypeEnum,
    "StringFormatData.AlignmentEnum": StringFormatData.AlignmentEnum,
    "StringFormatData.FormatFlagsEnum": StringFormatData.FormatFlagsEnum,
    "StringFormatData.HotkeyPrefixEnum": StringFormatData.HotkeyPrefixEnum,
    "StringFormatData.LineAlignmentEnum": StringFormatData.LineAlignmentEnum,
    "StringFormatData.TrimmingEnum": StringFormatData.TrimmingEnum,
    "Border.BorderTypeEnum": Border.BorderTypeEnum,
    "Border.LineStyleEnum": Border.LineStyleEnum,
    "Font.StyleIdentifierEnum": Font.StyleIdentifierEnum,
    "Font.TextEffectEnum": Font.TextEffectEnum,
    "Font.UnderlineEnum": Font.UnderlineEnum,
    "HeaderFooterLink.TypeEnum": HeaderFooterLink.TypeEnum,
    "HtmlSaveOptionsData.HtmlVersionEnum": HtmlSaveOptionsData.HtmlVersionEnum,
    "HtmlSaveOptionsData.MetafileFormatEnum": HtmlSaveOptionsData.MetafileFormatEnum,
    "HtmlSaveOptionsData.OfficeMathOutputModeEnum": HtmlSaveOptionsData.OfficeMathOutputModeEnum,
    "OdtSaveOptionsData.MeasureUnitEnum": OdtSaveOptionsData.MeasureUnitEnum,
    "PageSetup.BorderAppliesToEnum": PageSetup.BorderAppliesToEnum,
    "PageSetup.BorderDistanceFromEnum": PageSetup.BorderDistanceFromEnum,
    "PageSetup.LineNumberRestartModeEnum": PageSetup.LineNumberRestartModeEnum,
    "PageSetup.OrientationEnum": PageSetup.OrientationEnum,
    "PageSetup.PageNumberStyleEnum": PageSetup.PageNumberStyleEnum,
    "PageSetup.PaperSizeEnum": PageSetup.PaperSizeEnum,
    "PageSetup.SectionStartEnum": PageSetup.SectionStartEnum,
    "PageSetup.VerticalAlignmentEnum": PageSetup.VerticalAlignmentEnum,
    "ParagraphFormat.AlignmentEnum": ParagraphFormat.AlignmentEnum,
    "ParagraphFormat.DropCapPositionEnum": ParagraphFormat.DropCapPositionEnum,
    "ParagraphFormat.LineSpacingRuleEnum": ParagraphFormat.LineSpacingRuleEnum,
    "ParagraphFormat.OutlineLevelEnum": ParagraphFormat.OutlineLevelEnum,
    "ParagraphFormat.StyleIdentifierEnum": ParagraphFormat.StyleIdentifierEnum,
    "TableCellFormat.HorizontalMergeEnum": TableCellFormat.HorizontalMergeEnum,
    "TableCellFormat.OrientationEnum": TableCellFormat.OrientationEnum,
    "TableCellFormat.VerticalAlignmentEnum": TableCellFormat.VerticalAlignmentEnum,
    "TableCellFormat.VerticalMergeEnum": TableCellFormat.VerticalMergeEnum,
    "TableProperties.AlignmentEnum": TableProperties.AlignmentEnum,
    "TableProperties.StyleIdentifierEnum": TableProperties.StyleIdentifierEnum,
    "TableProperties.StyleOptionsEnum": TableProperties.StyleOptionsEnum,
    "TableProperties.TextWrappingEnum": TableProperties.TextWrappingEnum,
    "TableRowFormat.HeightRuleEnum": TableRowFormat.HeightRuleEnum,
    "TextSaveOptionsData.ExportHeadersFootersModeEnum": TextSaveOptionsData.ExportHeadersFootersModeEnum,
    "PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum": PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum,
    "DrawingObject.RelativeHorizontalPositionEnum": DrawingObject.RelativeHorizontalPositionEnum,
    "DrawingObject.RelativeVerticalPositionEnum": DrawingObject.RelativeVerticalPositionEnum,
    "DrawingObject.WrapTypeEnum": DrawingObject.WrapTypeEnum,
    "Footnote.FootnoteTypeEnum": Footnote.FootnoteTypeEnum,
    "FormFieldTextInput.TextInputTypeEnum": FormFieldTextInput.TextInputTypeEnum,
    "OfficeMathObject.DisplayTypeEnum": OfficeMathObject.DisplayTypeEnum,
    "OfficeMathObject.JustificationEnum": OfficeMathObject.JustificationEnum,
    "OfficeMathObject.MathObjectTypeEnum": OfficeMathObject.MathObjectTypeEnum,
};
exports.enumsMap = enumsMap;
const typeMap = {
    ApiError,
    BookmarkData,
    BookmarksOutlineLevelData,
    ClassificationResult,
    CompareData,
    Document,
    DocumentEntry,
    DocumentEntryList,
    DocumentPosition,
    DocumentStatData,
    DownsampleOptionsData,
    ErrorDetails,
    FilesList,
    FilesUploadResult,
    FontInfo,
    FootnotesStatData,
    GraphicsQualityOptionsData,
    Link,
    LinkElement,
    LoadWebDocumentData,
    MetafileRenderingOptionsData,
    ModificationOperationResult,
    OutlineOptionsData,
    PageNumber,
    PageStatData,
    ParagraphInsert,
    PdfDigitalSignatureDetailsData,
    PdfEncryptionDetailsData,
    PreferredWidth,
    ProtectionData,
    ProtectionRequest,
    RangeDocument,
    ReplaceRange,
    ReplaceTextParameters,
    SaveOptionsData,
    SaveResult,
    SearchResult,
    SplitDocumentResult,
    StorageApiError,
    StorageFile,
    StoryChildNodes,
    StringFormatData,
    TableCellInsert,
    TableInsert,
    TableRowInsert,
    WatermarkText,
    WordsResponse,
    XmlColor,
    AvailableFontsResponse,
    Bookmark,
    BookmarkResponse,
    Bookmarks,
    BookmarksResponse,
    Border,
    BorderResponse,
    BordersCollection,
    BordersResponse,
    ClassificationResponse,
    CommentLink,
    CommentResponse,
    CommentsCollection,
    CommentsResponse,
    DocSaveOptionsData,
    DocumentProperties,
    DocumentPropertiesResponse,
    DocumentProperty,
    DocumentPropertyResponse,
    DocumentResponse,
    DrawingObjectCollection,
    DrawingObjectResponse,
    DrawingObjectsResponse,
    FieldCollection,
    FieldNames,
    FieldNamesResponse,
    FieldResponse,
    FieldsResponse,
    FileLink,
    FixedPageSaveOptionsData,
    Font,
    FontResponse,
    FootnoteCollection,
    FootnoteResponse,
    FootnotesResponse,
    FormFieldCollection,
    FormFieldResponse,
    FormFieldsResponse,
    HeaderFooterLink,
    HeaderFooterLinkCollection,
    HeaderFooterResponse,
    HeaderFootersResponse,
    HtmlSaveOptionsData,
    Hyperlink,
    HyperlinkResponse,
    Hyperlinks,
    HyperlinksResponse,
    NodeLink,
    OdtSaveOptionsData,
    OfficeMathObjectResponse,
    OfficeMathObjectsCollection,
    OfficeMathObjectsResponse,
    OoxmlSaveOptionsData,
    PageSetup,
    ParagraphFormat,
    ParagraphFormatResponse,
    ParagraphLinkCollection,
    ParagraphLinkCollectionResponse,
    ParagraphResponse,
    ProtectionDataResponse,
    RangeTextResponse,
    ReplaceTextResponse,
    RevisionsModificationResponse,
    RtfSaveOptionsData,
    RunResponse,
    Runs,
    RunsResponse,
    SaveResponse,
    SearchResponse,
    SearchResultsCollection,
    Section,
    SectionLinkCollection,
    SectionLinkCollectionResponse,
    SectionPageSetupResponse,
    SectionResponse,
    SplitDocumentResponse,
    StatDataResponse,
    TableCellFormat,
    TableCellFormatResponse,
    TableCellResponse,
    TableLinkCollection,
    TableLinkCollectionResponse,
    TableProperties,
    TablePropertiesResponse,
    TableResponse,
    TableRowFormat,
    TableRowFormatResponse,
    TableRowResponse,
    TextSaveOptionsData,
    WordMLSaveOptionsData,
    WordsApiErrorResponse,
    WordsApiLink,
    XamlFlowSaveOptionsData,
    Comment,
    DrawingObjectLink,
    EpubSaveOptionsData,
    FieldLink,
    FootnoteLink,
    FormField,
    HeaderFooter,
    HtmlFixedSaveOptionsData,
    ImageSaveOptionsData,
    MhtmlSaveOptionsData,
    OfficeMathLink,
    Paragraph,
    ParagraphLink,
    PclSaveOptionsData,
    PdfSaveOptionsData,
    PsSaveOptionsData,
    RunLink,
    SectionLink,
    SvgSaveOptionsData,
    Table,
    TableCell,
    TableLink,
    TableRow,
    XamlFixedSaveOptionsData,
    XpsSaveOptionsData,
    BmpSaveOptionsData,
    DrawingObject,
    EmfSaveOptionsData,
    Field,
    Footnote,
    FormFieldCheckbox,
    FormFieldDropDown,
    FormFieldTextInput,
    GifSaveOptionsData,
    JpegSaveOptionsData,
    OfficeMathObject,
    PngSaveOptionsData,
    Run,
    TiffSaveOptionsData,
};
exports.typeMap = typeMap;
/**
 * Request model for AcceptAllRevisions operation.
 */
class AcceptAllRevisionsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.AcceptAllRevisionsRequest = AcceptAllRevisionsRequest;
/**
 * Request model for AppendDocument operation.
 */
class AppendDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.AppendDocumentRequest = AppendDocumentRequest;
/**
 * Request model for Classify operation.
 */
class ClassifyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ClassifyRequest = ClassifyRequest;
/**
 * Request model for ClassifyDocument operation.
 */
class ClassifyDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ClassifyDocumentRequest = ClassifyDocumentRequest;
/**
 * Request model for CompareDocument operation.
 */
class CompareDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CompareDocumentRequest = CompareDocumentRequest;
/**
 * Request model for ConvertDocument operation.
 */
class ConvertDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ConvertDocumentRequest = ConvertDocumentRequest;
/**
 * Request model for CopyFile operation.
 */
class CopyFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CopyFileRequest = CopyFileRequest;
/**
 * Request model for CopyFolder operation.
 */
class CopyFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CopyFolderRequest = CopyFolderRequest;
/**
 * Request model for CreateDocument operation.
 */
class CreateDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CreateDocumentRequest = CreateDocumentRequest;
/**
 * Request model for CreateFolder operation.
 */
class CreateFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CreateFolderRequest = CreateFolderRequest;
/**
 * Request model for CreateOrUpdateDocumentProperty operation.
 */
class CreateOrUpdateDocumentPropertyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CreateOrUpdateDocumentPropertyRequest = CreateOrUpdateDocumentPropertyRequest;
/**
 * Request model for DeleteBorder operation.
 */
class DeleteBorderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteBorderRequest = DeleteBorderRequest;
/**
 * Request model for DeleteBorders operation.
 */
class DeleteBordersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteBordersRequest = DeleteBordersRequest;
/**
 * Request model for DeleteComment operation.
 */
class DeleteCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteCommentRequest = DeleteCommentRequest;
/**
 * Request model for DeleteDocumentProperty operation.
 */
class DeleteDocumentPropertyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteDocumentPropertyRequest = DeleteDocumentPropertyRequest;
/**
 * Request model for DeleteDrawingObject operation.
 */
class DeleteDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteDrawingObjectRequest = DeleteDrawingObjectRequest;
/**
 * Request model for DeleteDrawingObjectWithoutNodePath operation.
 */
class DeleteDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteDrawingObjectWithoutNodePathRequest = DeleteDrawingObjectWithoutNodePathRequest;
/**
 * Request model for DeleteField operation.
 */
class DeleteFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldRequest = DeleteFieldRequest;
/**
 * Request model for DeleteFieldWithoutNodePath operation.
 */
class DeleteFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldWithoutNodePathRequest = DeleteFieldWithoutNodePathRequest;
/**
 * Request model for DeleteFields operation.
 */
class DeleteFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldsRequest = DeleteFieldsRequest;
/**
 * Request model for DeleteFieldsWithoutNodePath operation.
 */
class DeleteFieldsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldsWithoutNodePathRequest = DeleteFieldsWithoutNodePathRequest;
/**
 * Request model for DeleteFile operation.
 */
class DeleteFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFileRequest = DeleteFileRequest;
/**
 * Request model for DeleteFolder operation.
 */
class DeleteFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFolderRequest = DeleteFolderRequest;
/**
 * Request model for DeleteFootnote operation.
 */
class DeleteFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFootnoteRequest = DeleteFootnoteRequest;
/**
 * Request model for DeleteFootnoteWithoutNodePath operation.
 */
class DeleteFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFootnoteWithoutNodePathRequest = DeleteFootnoteWithoutNodePathRequest;
/**
 * Request model for DeleteFormField operation.
 */
class DeleteFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFormFieldRequest = DeleteFormFieldRequest;
/**
 * Request model for DeleteFormFieldWithoutNodePath operation.
 */
class DeleteFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFormFieldWithoutNodePathRequest = DeleteFormFieldWithoutNodePathRequest;
/**
 * Request model for DeleteHeaderFooter operation.
 */
class DeleteHeaderFooterRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteHeaderFooterRequest = DeleteHeaderFooterRequest;
/**
 * Request model for DeleteHeadersFooters operation.
 */
class DeleteHeadersFootersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteHeadersFootersRequest = DeleteHeadersFootersRequest;
/**
 * Request model for DeleteMacros operation.
 */
class DeleteMacrosRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteMacrosRequest = DeleteMacrosRequest;
/**
 * Request model for DeleteOfficeMathObject operation.
 */
class DeleteOfficeMathObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteOfficeMathObjectRequest = DeleteOfficeMathObjectRequest;
/**
 * Request model for DeleteOfficeMathObjectWithoutNodePath operation.
 */
class DeleteOfficeMathObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteOfficeMathObjectWithoutNodePathRequest = DeleteOfficeMathObjectWithoutNodePathRequest;
/**
 * Request model for DeleteParagraph operation.
 */
class DeleteParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphRequest = DeleteParagraphRequest;
/**
 * Request model for DeleteParagraphWithoutNodePath operation.
 */
class DeleteParagraphWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphWithoutNodePathRequest = DeleteParagraphWithoutNodePathRequest;
/**
 * Request model for DeleteRun operation.
 */
class DeleteRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteRunRequest = DeleteRunRequest;
/**
 * Request model for DeleteSection operation.
 */
class DeleteSectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteSectionRequest = DeleteSectionRequest;
/**
 * Request model for DeleteTable operation.
 */
class DeleteTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableRequest = DeleteTableRequest;
/**
 * Request model for DeleteTableCell operation.
 */
class DeleteTableCellRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableCellRequest = DeleteTableCellRequest;
/**
 * Request model for DeleteTableRow operation.
 */
class DeleteTableRowRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableRowRequest = DeleteTableRowRequest;
/**
 * Request model for DeleteTableWithoutNodePath operation.
 */
class DeleteTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableWithoutNodePathRequest = DeleteTableWithoutNodePathRequest;
/**
 * Request model for DeleteWatermark operation.
 */
class DeleteWatermarkRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteWatermarkRequest = DeleteWatermarkRequest;
/**
 * Request model for DownloadFile operation.
 */
class DownloadFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DownloadFileRequest = DownloadFileRequest;
/**
 * Request model for ExecuteMailMerge operation.
 */
class ExecuteMailMergeRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ExecuteMailMergeRequest = ExecuteMailMergeRequest;
/**
 * Request model for ExecuteMailMergeOnline operation.
 */
class ExecuteMailMergeOnlineRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ExecuteMailMergeOnlineRequest = ExecuteMailMergeOnlineRequest;
/**
 * Request model for GetAvailableFonts operation.
 */
class GetAvailableFontsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetAvailableFontsRequest = GetAvailableFontsRequest;
/**
 * Request model for GetBookmarkByName operation.
 */
class GetBookmarkByNameRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBookmarkByNameRequest = GetBookmarkByNameRequest;
/**
 * Request model for GetBookmarks operation.
 */
class GetBookmarksRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBookmarksRequest = GetBookmarksRequest;
/**
 * Request model for GetBorder operation.
 */
class GetBorderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBorderRequest = GetBorderRequest;
/**
 * Request model for GetBorders operation.
 */
class GetBordersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBordersRequest = GetBordersRequest;
/**
 * Request model for GetComment operation.
 */
class GetCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetCommentRequest = GetCommentRequest;
/**
 * Request model for GetComments operation.
 */
class GetCommentsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetCommentsRequest = GetCommentsRequest;
/**
 * Request model for GetDocument operation.
 */
class GetDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentRequest = GetDocumentRequest;
/**
 * Request model for GetDocumentDrawingObjectByIndex operation.
 */
class GetDocumentDrawingObjectByIndexRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectByIndexRequest = GetDocumentDrawingObjectByIndexRequest;
/**
 * Request model for GetDocumentDrawingObjectByIndexWithoutNodePath operation.
 */
class GetDocumentDrawingObjectByIndexWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectByIndexWithoutNodePathRequest = GetDocumentDrawingObjectByIndexWithoutNodePathRequest;
/**
 * Request model for GetDocumentDrawingObjectImageData operation.
 */
class GetDocumentDrawingObjectImageDataRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectImageDataRequest = GetDocumentDrawingObjectImageDataRequest;
/**
 * Request model for GetDocumentDrawingObjectImageDataWithoutNodePath operation.
 */
class GetDocumentDrawingObjectImageDataWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectImageDataWithoutNodePathRequest = GetDocumentDrawingObjectImageDataWithoutNodePathRequest;
/**
 * Request model for GetDocumentDrawingObjectOleData operation.
 */
class GetDocumentDrawingObjectOleDataRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectOleDataRequest = GetDocumentDrawingObjectOleDataRequest;
/**
 * Request model for GetDocumentDrawingObjectOleDataWithoutNodePath operation.
 */
class GetDocumentDrawingObjectOleDataWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectOleDataWithoutNodePathRequest = GetDocumentDrawingObjectOleDataWithoutNodePathRequest;
/**
 * Request model for GetDocumentDrawingObjects operation.
 */
class GetDocumentDrawingObjectsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectsRequest = GetDocumentDrawingObjectsRequest;
/**
 * Request model for GetDocumentDrawingObjectsWithoutNodePath operation.
 */
class GetDocumentDrawingObjectsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectsWithoutNodePathRequest = GetDocumentDrawingObjectsWithoutNodePathRequest;
/**
 * Request model for GetDocumentFieldNames operation.
 */
class GetDocumentFieldNamesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentFieldNamesRequest = GetDocumentFieldNamesRequest;
/**
 * Request model for GetDocumentFieldNamesOnline operation.
 */
class GetDocumentFieldNamesOnlineRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentFieldNamesOnlineRequest = GetDocumentFieldNamesOnlineRequest;
/**
 * Request model for GetDocumentHyperlinkByIndex operation.
 */
class GetDocumentHyperlinkByIndexRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentHyperlinkByIndexRequest = GetDocumentHyperlinkByIndexRequest;
/**
 * Request model for GetDocumentHyperlinks operation.
 */
class GetDocumentHyperlinksRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentHyperlinksRequest = GetDocumentHyperlinksRequest;
/**
 * Request model for GetDocumentProperties operation.
 */
class GetDocumentPropertiesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentPropertiesRequest = GetDocumentPropertiesRequest;
/**
 * Request model for GetDocumentProperty operation.
 */
class GetDocumentPropertyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentPropertyRequest = GetDocumentPropertyRequest;
/**
 * Request model for GetDocumentProtection operation.
 */
class GetDocumentProtectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentProtectionRequest = GetDocumentProtectionRequest;
/**
 * Request model for GetDocumentStatistics operation.
 */
class GetDocumentStatisticsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentStatisticsRequest = GetDocumentStatisticsRequest;
/**
 * Request model for GetDocumentWithFormat operation.
 */
class GetDocumentWithFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentWithFormatRequest = GetDocumentWithFormatRequest;
/**
 * Request model for GetField operation.
 */
class GetFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldRequest = GetFieldRequest;
/**
 * Request model for GetFieldWithoutNodePath operation.
 */
class GetFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldWithoutNodePathRequest = GetFieldWithoutNodePathRequest;
/**
 * Request model for GetFields operation.
 */
class GetFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldsRequest = GetFieldsRequest;
/**
 * Request model for GetFieldsWithoutNodePath operation.
 */
class GetFieldsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldsWithoutNodePathRequest = GetFieldsWithoutNodePathRequest;
/**
 * Request model for GetFilesList operation.
 */
class GetFilesListRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFilesListRequest = GetFilesListRequest;
/**
 * Request model for GetFootnote operation.
 */
class GetFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnoteRequest = GetFootnoteRequest;
/**
 * Request model for GetFootnoteWithoutNodePath operation.
 */
class GetFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnoteWithoutNodePathRequest = GetFootnoteWithoutNodePathRequest;
/**
 * Request model for GetFootnotes operation.
 */
class GetFootnotesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnotesRequest = GetFootnotesRequest;
/**
 * Request model for GetFootnotesWithoutNodePath operation.
 */
class GetFootnotesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnotesWithoutNodePathRequest = GetFootnotesWithoutNodePathRequest;
/**
 * Request model for GetFormField operation.
 */
class GetFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldRequest = GetFormFieldRequest;
/**
 * Request model for GetFormFieldWithoutNodePath operation.
 */
class GetFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldWithoutNodePathRequest = GetFormFieldWithoutNodePathRequest;
/**
 * Request model for GetFormFields operation.
 */
class GetFormFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldsRequest = GetFormFieldsRequest;
/**
 * Request model for GetFormFieldsWithoutNodePath operation.
 */
class GetFormFieldsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldsWithoutNodePathRequest = GetFormFieldsWithoutNodePathRequest;
/**
 * Request model for GetHeaderFooter operation.
 */
class GetHeaderFooterRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetHeaderFooterRequest = GetHeaderFooterRequest;
/**
 * Request model for GetHeaderFooterOfSection operation.
 */
class GetHeaderFooterOfSectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetHeaderFooterOfSectionRequest = GetHeaderFooterOfSectionRequest;
/**
 * Request model for GetHeaderFooters operation.
 */
class GetHeaderFootersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetHeaderFootersRequest = GetHeaderFootersRequest;
/**
 * Request model for GetOfficeMathObject operation.
 */
class GetOfficeMathObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectRequest = GetOfficeMathObjectRequest;
/**
 * Request model for GetOfficeMathObjectWithoutNodePath operation.
 */
class GetOfficeMathObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectWithoutNodePathRequest = GetOfficeMathObjectWithoutNodePathRequest;
/**
 * Request model for GetOfficeMathObjects operation.
 */
class GetOfficeMathObjectsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectsRequest = GetOfficeMathObjectsRequest;
/**
 * Request model for GetOfficeMathObjectsWithoutNodePath operation.
 */
class GetOfficeMathObjectsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectsWithoutNodePathRequest = GetOfficeMathObjectsWithoutNodePathRequest;
/**
 * Request model for GetParagraph operation.
 */
class GetParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphRequest = GetParagraphRequest;
/**
 * Request model for GetParagraphFormat operation.
 */
class GetParagraphFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphFormatRequest = GetParagraphFormatRequest;
/**
 * Request model for GetParagraphFormatWithoutNodePath operation.
 */
class GetParagraphFormatWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphFormatWithoutNodePathRequest = GetParagraphFormatWithoutNodePathRequest;
/**
 * Request model for GetParagraphWithoutNodePath operation.
 */
class GetParagraphWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphWithoutNodePathRequest = GetParagraphWithoutNodePathRequest;
/**
 * Request model for GetParagraphs operation.
 */
class GetParagraphsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphsRequest = GetParagraphsRequest;
/**
 * Request model for GetParagraphsWithoutNodePath operation.
 */
class GetParagraphsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphsWithoutNodePathRequest = GetParagraphsWithoutNodePathRequest;
/**
 * Request model for GetRangeText operation.
 */
class GetRangeTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRangeTextRequest = GetRangeTextRequest;
/**
 * Request model for GetRun operation.
 */
class GetRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRunRequest = GetRunRequest;
/**
 * Request model for GetRunFont operation.
 */
class GetRunFontRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRunFontRequest = GetRunFontRequest;
/**
 * Request model for GetRuns operation.
 */
class GetRunsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRunsRequest = GetRunsRequest;
/**
 * Request model for GetSection operation.
 */
class GetSectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetSectionRequest = GetSectionRequest;
/**
 * Request model for GetSectionPageSetup operation.
 */
class GetSectionPageSetupRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetSectionPageSetupRequest = GetSectionPageSetupRequest;
/**
 * Request model for GetSections operation.
 */
class GetSectionsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetSectionsRequest = GetSectionsRequest;
/**
 * Request model for GetTable operation.
 */
class GetTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableRequest = GetTableRequest;
/**
 * Request model for GetTableCell operation.
 */
class GetTableCellRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableCellRequest = GetTableCellRequest;
/**
 * Request model for GetTableCellFormat operation.
 */
class GetTableCellFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableCellFormatRequest = GetTableCellFormatRequest;
/**
 * Request model for GetTableProperties operation.
 */
class GetTablePropertiesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablePropertiesRequest = GetTablePropertiesRequest;
/**
 * Request model for GetTablePropertiesWithoutNodePath operation.
 */
class GetTablePropertiesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablePropertiesWithoutNodePathRequest = GetTablePropertiesWithoutNodePathRequest;
/**
 * Request model for GetTableRow operation.
 */
class GetTableRowRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableRowRequest = GetTableRowRequest;
/**
 * Request model for GetTableRowFormat operation.
 */
class GetTableRowFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableRowFormatRequest = GetTableRowFormatRequest;
/**
 * Request model for GetTableWithoutNodePath operation.
 */
class GetTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableWithoutNodePathRequest = GetTableWithoutNodePathRequest;
/**
 * Request model for GetTables operation.
 */
class GetTablesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablesRequest = GetTablesRequest;
/**
 * Request model for GetTablesWithoutNodePath operation.
 */
class GetTablesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablesWithoutNodePathRequest = GetTablesWithoutNodePathRequest;
/**
 * Request model for InsertComment operation.
 */
class InsertCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertCommentRequest = InsertCommentRequest;
/**
 * Request model for InsertDrawingObject operation.
 */
class InsertDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertDrawingObjectRequest = InsertDrawingObjectRequest;
/**
 * Request model for InsertDrawingObjectWithoutNodePath operation.
 */
class InsertDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertDrawingObjectWithoutNodePathRequest = InsertDrawingObjectWithoutNodePathRequest;
/**
 * Request model for InsertField operation.
 */
class InsertFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFieldRequest = InsertFieldRequest;
/**
 * Request model for InsertFieldWithoutNodePath operation.
 */
class InsertFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFieldWithoutNodePathRequest = InsertFieldWithoutNodePathRequest;
/**
 * Request model for InsertFootnote operation.
 */
class InsertFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFootnoteRequest = InsertFootnoteRequest;
/**
 * Request model for InsertFootnoteWithoutNodePath operation.
 */
class InsertFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFootnoteWithoutNodePathRequest = InsertFootnoteWithoutNodePathRequest;
/**
 * Request model for InsertFormField operation.
 */
class InsertFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFormFieldRequest = InsertFormFieldRequest;
/**
 * Request model for InsertFormFieldWithoutNodePath operation.
 */
class InsertFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFormFieldWithoutNodePathRequest = InsertFormFieldWithoutNodePathRequest;
/**
 * Request model for InsertHeaderFooter operation.
 */
class InsertHeaderFooterRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertHeaderFooterRequest = InsertHeaderFooterRequest;
/**
 * Request model for InsertPageNumbers operation.
 */
class InsertPageNumbersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertPageNumbersRequest = InsertPageNumbersRequest;
/**
 * Request model for InsertParagraph operation.
 */
class InsertParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertParagraphRequest = InsertParagraphRequest;
/**
 * Request model for InsertRun operation.
 */
class InsertRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertRunRequest = InsertRunRequest;
/**
 * Request model for InsertTable operation.
 */
class InsertTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableRequest = InsertTableRequest;
/**
 * Request model for InsertTableCell operation.
 */
class InsertTableCellRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableCellRequest = InsertTableCellRequest;
/**
 * Request model for InsertTableRow operation.
 */
class InsertTableRowRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableRowRequest = InsertTableRowRequest;
/**
 * Request model for InsertTableWithoutNodePath operation.
 */
class InsertTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableWithoutNodePathRequest = InsertTableWithoutNodePathRequest;
/**
 * Request model for InsertWatermarkImage operation.
 */
class InsertWatermarkImageRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertWatermarkImageRequest = InsertWatermarkImageRequest;
/**
 * Request model for InsertWatermarkText operation.
 */
class InsertWatermarkTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertWatermarkTextRequest = InsertWatermarkTextRequest;
/**
 * Request model for LoadWebDocument operation.
 */
class LoadWebDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.LoadWebDocumentRequest = LoadWebDocumentRequest;
/**
 * Request model for MoveFile operation.
 */
class MoveFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.MoveFileRequest = MoveFileRequest;
/**
 * Request model for MoveFolder operation.
 */
class MoveFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.MoveFolderRequest = MoveFolderRequest;
/**
 * Request model for ProtectDocument operation.
 */
class ProtectDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ProtectDocumentRequest = ProtectDocumentRequest;
/**
 * Request model for RejectAllRevisions operation.
 */
class RejectAllRevisionsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RejectAllRevisionsRequest = RejectAllRevisionsRequest;
/**
 * Request model for RemoveRange operation.
 */
class RemoveRangeRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RemoveRangeRequest = RemoveRangeRequest;
/**
 * Request model for RenderDrawingObject operation.
 */
class RenderDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderDrawingObjectRequest = RenderDrawingObjectRequest;
/**
 * Request model for RenderDrawingObjectWithoutNodePath operation.
 */
class RenderDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderDrawingObjectWithoutNodePathRequest = RenderDrawingObjectWithoutNodePathRequest;
/**
 * Request model for RenderMathObject operation.
 */
class RenderMathObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderMathObjectRequest = RenderMathObjectRequest;
/**
 * Request model for RenderMathObjectWithoutNodePath operation.
 */
class RenderMathObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderMathObjectWithoutNodePathRequest = RenderMathObjectWithoutNodePathRequest;
/**
 * Request model for RenderPage operation.
 */
class RenderPageRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderPageRequest = RenderPageRequest;
/**
 * Request model for RenderParagraph operation.
 */
class RenderParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderParagraphRequest = RenderParagraphRequest;
/**
 * Request model for RenderParagraphWithoutNodePath operation.
 */
class RenderParagraphWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderParagraphWithoutNodePathRequest = RenderParagraphWithoutNodePathRequest;
/**
 * Request model for RenderTable operation.
 */
class RenderTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderTableRequest = RenderTableRequest;
/**
 * Request model for RenderTableWithoutNodePath operation.
 */
class RenderTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderTableWithoutNodePathRequest = RenderTableWithoutNodePathRequest;
/**
 * Request model for ReplaceText operation.
 */
class ReplaceTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ReplaceTextRequest = ReplaceTextRequest;
/**
 * Request model for ReplaceWithText operation.
 */
class ReplaceWithTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ReplaceWithTextRequest = ReplaceWithTextRequest;
/**
 * Request model for ResetCache operation.
 */
class ResetCacheRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ResetCacheRequest = ResetCacheRequest;
/**
 * Request model for SaveAs operation.
 */
class SaveAsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SaveAsRequest = SaveAsRequest;
/**
 * Request model for SaveAsRange operation.
 */
class SaveAsRangeRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SaveAsRangeRequest = SaveAsRangeRequest;
/**
 * Request model for SaveAsTiff operation.
 */
class SaveAsTiffRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SaveAsTiffRequest = SaveAsTiffRequest;
/**
 * Request model for Search operation.
 */
class SearchRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SearchRequest = SearchRequest;
/**
 * Request model for SplitDocument operation.
 */
class SplitDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SplitDocumentRequest = SplitDocumentRequest;
/**
 * Request model for UnprotectDocument operation.
 */
class UnprotectDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UnprotectDocumentRequest = UnprotectDocumentRequest;
/**
 * Request model for UpdateBookmark operation.
 */
class UpdateBookmarkRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateBookmarkRequest = UpdateBookmarkRequest;
/**
 * Request model for UpdateBorder operation.
 */
class UpdateBorderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateBorderRequest = UpdateBorderRequest;
/**
 * Request model for UpdateComment operation.
 */
class UpdateCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateCommentRequest = UpdateCommentRequest;
/**
 * Request model for UpdateDrawingObject operation.
 */
class UpdateDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateDrawingObjectRequest = UpdateDrawingObjectRequest;
/**
 * Request model for UpdateDrawingObjectWithoutNodePath operation.
 */
class UpdateDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateDrawingObjectWithoutNodePathRequest = UpdateDrawingObjectWithoutNodePathRequest;
/**
 * Request model for UpdateField operation.
 */
class UpdateFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFieldRequest = UpdateFieldRequest;
/**
 * Request model for UpdateFields operation.
 */
class UpdateFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFieldsRequest = UpdateFieldsRequest;
/**
 * Request model for UpdateFootnote operation.
 */
class UpdateFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFootnoteRequest = UpdateFootnoteRequest;
/**
 * Request model for UpdateFootnoteWithoutNodePath operation.
 */
class UpdateFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFootnoteWithoutNodePathRequest = UpdateFootnoteWithoutNodePathRequest;
/**
 * Request model for UpdateFormField operation.
 */
class UpdateFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFormFieldRequest = UpdateFormFieldRequest;
/**
 * Request model for UpdateFormFieldWithoutNodePath operation.
 */
class UpdateFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFormFieldWithoutNodePathRequest = UpdateFormFieldWithoutNodePathRequest;
/**
 * Request model for UpdateParagraphFormat operation.
 */
class UpdateParagraphFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateParagraphFormatRequest = UpdateParagraphFormatRequest;
/**
 * Request model for UpdateRun operation.
 */
class UpdateRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateRunRequest = UpdateRunRequest;
/**
 * Request model for UpdateRunFont operation.
 */
class UpdateRunFontRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateRunFontRequest = UpdateRunFontRequest;
/**
 * Request model for UpdateSectionPageSetup operation.
 */
class UpdateSectionPageSetupRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateSectionPageSetupRequest = UpdateSectionPageSetupRequest;
/**
 * Request model for UpdateTableCellFormat operation.
 */
class UpdateTableCellFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTableCellFormatRequest = UpdateTableCellFormatRequest;
/**
 * Request model for UpdateTableProperties operation.
 */
class UpdateTablePropertiesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTablePropertiesRequest = UpdateTablePropertiesRequest;
/**
 * Request model for UpdateTablePropertiesWithoutNodePath operation.
 */
class UpdateTablePropertiesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTablePropertiesWithoutNodePathRequest = UpdateTablePropertiesWithoutNodePathRequest;
/**
 * Request model for UpdateTableRowFormat operation.
 */
class UpdateTableRowFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTableRowFormatRequest = UpdateTableRowFormatRequest;
/**
 * Request model for UploadFile operation.
 */
class UploadFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UploadFileRequest = UploadFileRequest;
