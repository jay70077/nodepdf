"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const annotationFlags_1 = require("./models/annotationFlags");
const annotationState_1 = require("./models/annotationState");
const annotationType_1 = require("./models/annotationType");
const antialiasingProcessingType_1 = require("./models/antialiasingProcessingType");
const asposeResponse_1 = require("./models/asposeResponse");
const border_1 = require("./models/border");
const borderCornerStyle_1 = require("./models/borderCornerStyle");
const borderEffect_1 = require("./models/borderEffect");
const borderInfo_1 = require("./models/borderInfo");
const borderStyle_1 = require("./models/borderStyle");
const boxStyle_1 = require("./models/boxStyle");
const capStyle_1 = require("./models/capStyle");
const captionPosition_1 = require("./models/captionPosition");
const caretSymbol_1 = require("./models/caretSymbol");
const cell_1 = require("./models/cell");
const cellRecognized_1 = require("./models/cellRecognized");
const color_1 = require("./models/color");
const colorDepth_1 = require("./models/colorDepth");
const columnAdjustment_1 = require("./models/columnAdjustment");
const compressionType_1 = require("./models/compressionType");
const cryptoAlgorithm_1 = require("./models/cryptoAlgorithm");
const dash_1 = require("./models/dash");
const defaultPageConfig_1 = require("./models/defaultPageConfig");
const direction_1 = require("./models/direction");
const discUsage_1 = require("./models/discUsage");
const docFormat_1 = require("./models/docFormat");
const docMDPAccessPermissionType_1 = require("./models/docMDPAccessPermissionType");
const docRecognitionMode_1 = require("./models/docRecognitionMode");
const documentConfig_1 = require("./models/documentConfig");
const documentPrivilege_1 = require("./models/documentPrivilege");
const epubRecognitionMode_1 = require("./models/epubRecognitionMode");
const errorDetails_1 = require("./models/errorDetails");
const fieldType_1 = require("./models/fieldType");
const fileIcon_1 = require("./models/fileIcon");
const fileVersions_1 = require("./models/fileVersions");
const filesList_1 = require("./models/filesList");
const filesUploadResult_1 = require("./models/filesUploadResult");
const fontEncodingRules_1 = require("./models/fontEncodingRules");
const fontSavingModes_1 = require("./models/fontSavingModes");
const fontStyles_1 = require("./models/fontStyles");
const freeTextIntent_1 = require("./models/freeTextIntent");
const graphInfo_1 = require("./models/graphInfo");
const horizontalAlignment_1 = require("./models/horizontalAlignment");
const htmlDocumentType_1 = require("./models/htmlDocumentType");
const htmlMarkupGenerationModes_1 = require("./models/htmlMarkupGenerationModes");
const imageSrcType_1 = require("./models/imageSrcType");
const imageTemplate_1 = require("./models/imageTemplate");
const imageTemplatesRequest_1 = require("./models/imageTemplatesRequest");
const justification_1 = require("./models/justification");
const lettersPositioningMethods_1 = require("./models/lettersPositioningMethods");
const lineEnding_1 = require("./models/lineEnding");
const lineIntent_1 = require("./models/lineIntent");
const lineSpacing_1 = require("./models/lineSpacing");
const link_1 = require("./models/link");
const linkActionType_1 = require("./models/linkActionType");
const linkElement_1 = require("./models/linkElement");
const linkHighlightingMode_1 = require("./models/linkHighlightingMode");
const marginInfo_1 = require("./models/marginInfo");
const mergeDocuments_1 = require("./models/mergeDocuments");
const modelError_1 = require("./models/modelError");
const objectExist_1 = require("./models/objectExist");
const optimizeOptions_1 = require("./models/optimizeOptions");
const option_1 = require("./models/option");
const pageLayout_1 = require("./models/pageLayout");
const pageMode_1 = require("./models/pageMode");
const pageWordCount_1 = require("./models/pageWordCount");
const paragraph_1 = require("./models/paragraph");
const partsEmbeddingModes_1 = require("./models/partsEmbeddingModes");
const pdfAType_1 = require("./models/pdfAType");
const permissionsFlags_1 = require("./models/permissionsFlags");
const point_1 = require("./models/point");
const polyIntent_1 = require("./models/polyIntent");
const position_1 = require("./models/position");
const rasterImagesSavingModes_1 = require("./models/rasterImagesSavingModes");
const rectangle_1 = require("./models/rectangle");
const rotation_1 = require("./models/rotation");
const row_1 = require("./models/row");
const rowRecognized_1 = require("./models/rowRecognized");
const segment_1 = require("./models/segment");
const shapeType_1 = require("./models/shapeType");
const signature_1 = require("./models/signature");
const signatureCustomAppearance_1 = require("./models/signatureCustomAppearance");
const signatureType_1 = require("./models/signatureType");
const soundEncoding_1 = require("./models/soundEncoding");
const soundIcon_1 = require("./models/soundIcon");
const splitResult_1 = require("./models/splitResult");
const stamp_1 = require("./models/stamp");
const stampIcon_1 = require("./models/stampIcon");
const stampType_1 = require("./models/stampType");
const storageExist_1 = require("./models/storageExist");
const storageFile_1 = require("./models/storageFile");
const tableBroken_1 = require("./models/tableBroken");
const textHorizontalAlignment_1 = require("./models/textHorizontalAlignment");
const textIcon_1 = require("./models/textIcon");
const textLine_1 = require("./models/textLine");
const textRect_1 = require("./models/textRect");
const textRects_1 = require("./models/textRects");
const textReplace_1 = require("./models/textReplace");
const textReplaceListRequest_1 = require("./models/textReplaceListRequest");
const textState_1 = require("./models/textState");
const textStyle_1 = require("./models/textStyle");
const timestampSettings_1 = require("./models/timestampSettings");
const verticalAlignment_1 = require("./models/verticalAlignment");
const wordCount_1 = require("./models/wordCount");
const wrapMode_1 = require("./models/wrapMode");
const annotation_1 = require("./models/annotation");
const annotationsInfo_1 = require("./models/annotationsInfo");
const annotationsInfoResponse_1 = require("./models/annotationsInfoResponse");
const attachment_1 = require("./models/attachment");
const attachmentResponse_1 = require("./models/attachmentResponse");
const attachments_1 = require("./models/attachments");
const attachmentsResponse_1 = require("./models/attachmentsResponse");
const bookmark_1 = require("./models/bookmark");
const bookmarkResponse_1 = require("./models/bookmarkResponse");
const bookmarks_1 = require("./models/bookmarks");
const bookmarksResponse_1 = require("./models/bookmarksResponse");
const caretAnnotationResponse_1 = require("./models/caretAnnotationResponse");
const caretAnnotations_1 = require("./models/caretAnnotations");
const caretAnnotationsResponse_1 = require("./models/caretAnnotationsResponse");
const checkBoxFieldResponse_1 = require("./models/checkBoxFieldResponse");
const checkBoxFields_1 = require("./models/checkBoxFields");
const checkBoxFieldsResponse_1 = require("./models/checkBoxFieldsResponse");
const circleAnnotationResponse_1 = require("./models/circleAnnotationResponse");
const circleAnnotations_1 = require("./models/circleAnnotations");
const circleAnnotationsResponse_1 = require("./models/circleAnnotationsResponse");
const comboBoxFieldResponse_1 = require("./models/comboBoxFieldResponse");
const comboBoxFields_1 = require("./models/comboBoxFields");
const comboBoxFieldsResponse_1 = require("./models/comboBoxFieldsResponse");
const displayProperties_1 = require("./models/displayProperties");
const displayPropertiesResponse_1 = require("./models/displayPropertiesResponse");
const document_1 = require("./models/document");
const documentPageResponse_1 = require("./models/documentPageResponse");
const documentPagesResponse_1 = require("./models/documentPagesResponse");
const documentProperties_1 = require("./models/documentProperties");
const documentPropertiesResponse_1 = require("./models/documentPropertiesResponse");
const documentProperty_1 = require("./models/documentProperty");
const documentPropertyResponse_1 = require("./models/documentPropertyResponse");
const documentResponse_1 = require("./models/documentResponse");
const field_1 = require("./models/field");
const fieldResponse_1 = require("./models/fieldResponse");
const fields_1 = require("./models/fields");
const fieldsResponse_1 = require("./models/fieldsResponse");
const fileAttachmentAnnotationResponse_1 = require("./models/fileAttachmentAnnotationResponse");
const fileAttachmentAnnotations_1 = require("./models/fileAttachmentAnnotations");
const fileAttachmentAnnotationsResponse_1 = require("./models/fileAttachmentAnnotationsResponse");
const fileVersion_1 = require("./models/fileVersion");
const formField_1 = require("./models/formField");
const freeTextAnnotationResponse_1 = require("./models/freeTextAnnotationResponse");
const freeTextAnnotations_1 = require("./models/freeTextAnnotations");
const freeTextAnnotationsResponse_1 = require("./models/freeTextAnnotationsResponse");
const highlightAnnotationResponse_1 = require("./models/highlightAnnotationResponse");
const highlightAnnotations_1 = require("./models/highlightAnnotations");
const highlightAnnotationsResponse_1 = require("./models/highlightAnnotationsResponse");
const image_1 = require("./models/image");
const imageResponse_1 = require("./models/imageResponse");
const images_1 = require("./models/images");
const imagesResponse_1 = require("./models/imagesResponse");
const inkAnnotationResponse_1 = require("./models/inkAnnotationResponse");
const inkAnnotations_1 = require("./models/inkAnnotations");
const inkAnnotationsResponse_1 = require("./models/inkAnnotationsResponse");
const lineAnnotationResponse_1 = require("./models/lineAnnotationResponse");
const lineAnnotations_1 = require("./models/lineAnnotations");
const lineAnnotationsResponse_1 = require("./models/lineAnnotationsResponse");
const linkAnnotation_1 = require("./models/linkAnnotation");
const linkAnnotationResponse_1 = require("./models/linkAnnotationResponse");
const linkAnnotations_1 = require("./models/linkAnnotations");
const linkAnnotationsResponse_1 = require("./models/linkAnnotationsResponse");
const listBoxFieldResponse_1 = require("./models/listBoxFieldResponse");
const listBoxFields_1 = require("./models/listBoxFields");
const listBoxFieldsResponse_1 = require("./models/listBoxFieldsResponse");
const movieAnnotationResponse_1 = require("./models/movieAnnotationResponse");
const movieAnnotations_1 = require("./models/movieAnnotations");
const movieAnnotationsResponse_1 = require("./models/movieAnnotationsResponse");
const page_1 = require("./models/page");
const pages_1 = require("./models/pages");
const polyLineAnnotationResponse_1 = require("./models/polyLineAnnotationResponse");
const polyLineAnnotations_1 = require("./models/polyLineAnnotations");
const polyLineAnnotationsResponse_1 = require("./models/polyLineAnnotationsResponse");
const polygonAnnotationResponse_1 = require("./models/polygonAnnotationResponse");
const polygonAnnotations_1 = require("./models/polygonAnnotations");
const polygonAnnotationsResponse_1 = require("./models/polygonAnnotationsResponse");
const popupAnnotationResponse_1 = require("./models/popupAnnotationResponse");
const popupAnnotations_1 = require("./models/popupAnnotations");
const popupAnnotationsResponse_1 = require("./models/popupAnnotationsResponse");
const radioButtonFieldResponse_1 = require("./models/radioButtonFieldResponse");
const radioButtonFields_1 = require("./models/radioButtonFields");
const radioButtonFieldsResponse_1 = require("./models/radioButtonFieldsResponse");
const redactionAnnotationResponse_1 = require("./models/redactionAnnotationResponse");
const redactionAnnotations_1 = require("./models/redactionAnnotations");
const redactionAnnotationsResponse_1 = require("./models/redactionAnnotationsResponse");
const screenAnnotationResponse_1 = require("./models/screenAnnotationResponse");
const screenAnnotations_1 = require("./models/screenAnnotations");
const screenAnnotationsResponse_1 = require("./models/screenAnnotationsResponse");
const signatureFieldResponse_1 = require("./models/signatureFieldResponse");
const signatureFields_1 = require("./models/signatureFields");
const signatureFieldsResponse_1 = require("./models/signatureFieldsResponse");
const signatureVerifyResponse_1 = require("./models/signatureVerifyResponse");
const soundAnnotationResponse_1 = require("./models/soundAnnotationResponse");
const soundAnnotations_1 = require("./models/soundAnnotations");
const soundAnnotationsResponse_1 = require("./models/soundAnnotationsResponse");
const splitResultDocument_1 = require("./models/splitResultDocument");
const splitResultResponse_1 = require("./models/splitResultResponse");
const squareAnnotationResponse_1 = require("./models/squareAnnotationResponse");
const squareAnnotations_1 = require("./models/squareAnnotations");
const squareAnnotationsResponse_1 = require("./models/squareAnnotationsResponse");
const squigglyAnnotationResponse_1 = require("./models/squigglyAnnotationResponse");
const squigglyAnnotations_1 = require("./models/squigglyAnnotations");
const squigglyAnnotationsResponse_1 = require("./models/squigglyAnnotationsResponse");
const stampAnnotationResponse_1 = require("./models/stampAnnotationResponse");
const stampAnnotations_1 = require("./models/stampAnnotations");
const stampAnnotationsResponse_1 = require("./models/stampAnnotationsResponse");
const stampBase_1 = require("./models/stampBase");
const stampInfo_1 = require("./models/stampInfo");
const stampsInfo_1 = require("./models/stampsInfo");
const stampsInfoResponse_1 = require("./models/stampsInfoResponse");
const strikeOutAnnotationResponse_1 = require("./models/strikeOutAnnotationResponse");
const strikeOutAnnotations_1 = require("./models/strikeOutAnnotations");
const strikeOutAnnotationsResponse_1 = require("./models/strikeOutAnnotationsResponse");
const table_1 = require("./models/table");
const tableRecognized_1 = require("./models/tableRecognized");
const tableRecognizedResponse_1 = require("./models/tableRecognizedResponse");
const tablesRecognized_1 = require("./models/tablesRecognized");
const tablesRecognizedResponse_1 = require("./models/tablesRecognizedResponse");
const textAnnotationResponse_1 = require("./models/textAnnotationResponse");
const textAnnotations_1 = require("./models/textAnnotations");
const textAnnotationsResponse_1 = require("./models/textAnnotationsResponse");
const textBoxFieldResponse_1 = require("./models/textBoxFieldResponse");
const textBoxFields_1 = require("./models/textBoxFields");
const textBoxFieldsResponse_1 = require("./models/textBoxFieldsResponse");
const textRectsResponse_1 = require("./models/textRectsResponse");
const textReplaceResponse_1 = require("./models/textReplaceResponse");
const underlineAnnotationResponse_1 = require("./models/underlineAnnotationResponse");
const underlineAnnotations_1 = require("./models/underlineAnnotations");
const underlineAnnotationsResponse_1 = require("./models/underlineAnnotationsResponse");
const wordCountResponse_1 = require("./models/wordCountResponse");
const annotationInfo_1 = require("./models/annotationInfo");
const checkBoxField_1 = require("./models/checkBoxField");
const choiceField_1 = require("./models/choiceField");
const imageFooter_1 = require("./models/imageFooter");
const imageHeader_1 = require("./models/imageHeader");
const imageStamp_1 = require("./models/imageStamp");
const markupAnnotation_1 = require("./models/markupAnnotation");
const movieAnnotation_1 = require("./models/movieAnnotation");
const pageNumberStamp_1 = require("./models/pageNumberStamp");
const pdfPageStamp_1 = require("./models/pdfPageStamp");
const popupAnnotation_1 = require("./models/popupAnnotation");
const radioButtonOptionField_1 = require("./models/radioButtonOptionField");
const redactionAnnotation_1 = require("./models/redactionAnnotation");
const screenAnnotation_1 = require("./models/screenAnnotation");
const signatureField_1 = require("./models/signatureField");
const textBoxField_1 = require("./models/textBoxField");
const textFooter_1 = require("./models/textFooter");
const textHeader_1 = require("./models/textHeader");
const textStamp_1 = require("./models/textStamp");
const caretAnnotation_1 = require("./models/caretAnnotation");
const comboBoxField_1 = require("./models/comboBoxField");
const commonFigureAnnotation_1 = require("./models/commonFigureAnnotation");
const fileAttachmentAnnotation_1 = require("./models/fileAttachmentAnnotation");
const freeTextAnnotation_1 = require("./models/freeTextAnnotation");
const highlightAnnotation_1 = require("./models/highlightAnnotation");
const inkAnnotation_1 = require("./models/inkAnnotation");
const lineAnnotation_1 = require("./models/lineAnnotation");
const listBoxField_1 = require("./models/listBoxField");
const polyAnnotation_1 = require("./models/polyAnnotation");
const popupAnnotationWithParent_1 = require("./models/popupAnnotationWithParent");
const radioButtonField_1 = require("./models/radioButtonField");
const soundAnnotation_1 = require("./models/soundAnnotation");
const squigglyAnnotation_1 = require("./models/squigglyAnnotation");
const stampAnnotation_1 = require("./models/stampAnnotation");
const strikeOutAnnotation_1 = require("./models/strikeOutAnnotation");
const textAnnotation_1 = require("./models/textAnnotation");
const underlineAnnotation_1 = require("./models/underlineAnnotation");
const circleAnnotation_1 = require("./models/circleAnnotation");
const polyLineAnnotation_1 = require("./models/polyLineAnnotation");
const polygonAnnotation_1 = require("./models/polygonAnnotation");
const squareAnnotation_1 = require("./models/squareAnnotation");
let enumsMap = {
    "AnnotationFlags": annotationFlags_1.AnnotationFlags,
    "AnnotationState": annotationState_1.AnnotationState,
    "AnnotationType": annotationType_1.AnnotationType,
    "AntialiasingProcessingType": antialiasingProcessingType_1.AntialiasingProcessingType,
    "BorderCornerStyle": borderCornerStyle_1.BorderCornerStyle,
    "BorderEffect": borderEffect_1.BorderEffect,
    "BorderStyle": borderStyle_1.BorderStyle,
    "BoxStyle": boxStyle_1.BoxStyle,
    "CapStyle": capStyle_1.CapStyle,
    "CaptionPosition": captionPosition_1.CaptionPosition,
    "CaretSymbol": caretSymbol_1.CaretSymbol,
    "ColorDepth": colorDepth_1.ColorDepth,
    "ColumnAdjustment": columnAdjustment_1.ColumnAdjustment,
    "CompressionType": compressionType_1.CompressionType,
    "CryptoAlgorithm": cryptoAlgorithm_1.CryptoAlgorithm,
    "Direction": direction_1.Direction,
    "DocFormat": docFormat_1.DocFormat,
    "DocMDPAccessPermissionType": docMDPAccessPermissionType_1.DocMDPAccessPermissionType,
    "DocRecognitionMode": docRecognitionMode_1.DocRecognitionMode,
    "EpubRecognitionMode": epubRecognitionMode_1.EpubRecognitionMode,
    "FieldType": fieldType_1.FieldType,
    "FileIcon": fileIcon_1.FileIcon,
    "FontEncodingRules": fontEncodingRules_1.FontEncodingRules,
    "FontSavingModes": fontSavingModes_1.FontSavingModes,
    "FontStyles": fontStyles_1.FontStyles,
    "FreeTextIntent": freeTextIntent_1.FreeTextIntent,
    "HorizontalAlignment": horizontalAlignment_1.HorizontalAlignment,
    "HtmlDocumentType": htmlDocumentType_1.HtmlDocumentType,
    "HtmlMarkupGenerationModes": htmlMarkupGenerationModes_1.HtmlMarkupGenerationModes,
    "ImageSrcType": imageSrcType_1.ImageSrcType,
    "Justification": justification_1.Justification,
    "LettersPositioningMethods": lettersPositioningMethods_1.LettersPositioningMethods,
    "LineEnding": lineEnding_1.LineEnding,
    "LineIntent": lineIntent_1.LineIntent,
    "LineSpacing": lineSpacing_1.LineSpacing,
    "LinkActionType": linkActionType_1.LinkActionType,
    "LinkHighlightingMode": linkHighlightingMode_1.LinkHighlightingMode,
    "PageLayout": pageLayout_1.PageLayout,
    "PageMode": pageMode_1.PageMode,
    "PartsEmbeddingModes": partsEmbeddingModes_1.PartsEmbeddingModes,
    "PdfAType": pdfAType_1.PdfAType,
    "PermissionsFlags": permissionsFlags_1.PermissionsFlags,
    "PolyIntent": polyIntent_1.PolyIntent,
    "RasterImagesSavingModes": rasterImagesSavingModes_1.RasterImagesSavingModes,
    "Rotation": rotation_1.Rotation,
    "ShapeType": shapeType_1.ShapeType,
    "SignatureType": signatureType_1.SignatureType,
    "SoundEncoding": soundEncoding_1.SoundEncoding,
    "SoundIcon": soundIcon_1.SoundIcon,
    "StampIcon": stampIcon_1.StampIcon,
    "StampType": stampType_1.StampType,
    "TableBroken": tableBroken_1.TableBroken,
    "TextHorizontalAlignment": textHorizontalAlignment_1.TextHorizontalAlignment,
    "TextIcon": textIcon_1.TextIcon,
    "VerticalAlignment": verticalAlignment_1.VerticalAlignment,
    "WrapMode": wrapMode_1.WrapMode,
};
let typeMap = {
    "AsposeResponse": asposeResponse_1.AsposeResponse,
    "Border": border_1.Border,
    "BorderInfo": borderInfo_1.BorderInfo,
    "Cell": cell_1.Cell,
    "CellRecognized": cellRecognized_1.CellRecognized,
    "Color": color_1.Color,
    "Dash": dash_1.Dash,
    "DefaultPageConfig": defaultPageConfig_1.DefaultPageConfig,
    "DiscUsage": discUsage_1.DiscUsage,
    "DocumentConfig": documentConfig_1.DocumentConfig,
    "DocumentPrivilege": documentPrivilege_1.DocumentPrivilege,
    "ErrorDetails": errorDetails_1.ErrorDetails,
    "FileVersions": fileVersions_1.FileVersions,
    "FilesList": filesList_1.FilesList,
    "FilesUploadResult": filesUploadResult_1.FilesUploadResult,
    "GraphInfo": graphInfo_1.GraphInfo,
    "ImageTemplate": imageTemplate_1.ImageTemplate,
    "ImageTemplatesRequest": imageTemplatesRequest_1.ImageTemplatesRequest,
    "Link": link_1.Link,
    "LinkElement": linkElement_1.LinkElement,
    "MarginInfo": marginInfo_1.MarginInfo,
    "MergeDocuments": mergeDocuments_1.MergeDocuments,
    "ModelError": modelError_1.ModelError,
    "ObjectExist": objectExist_1.ObjectExist,
    "OptimizeOptions": optimizeOptions_1.OptimizeOptions,
    "Option": option_1.Option,
    "PageWordCount": pageWordCount_1.PageWordCount,
    "Paragraph": paragraph_1.Paragraph,
    "Point": point_1.Point,
    "Position": position_1.Position,
    "Rectangle": rectangle_1.Rectangle,
    "Row": row_1.Row,
    "RowRecognized": rowRecognized_1.RowRecognized,
    "Segment": segment_1.Segment,
    "Signature": signature_1.Signature,
    "SignatureCustomAppearance": signatureCustomAppearance_1.SignatureCustomAppearance,
    "SplitResult": splitResult_1.SplitResult,
    "Stamp": stamp_1.Stamp,
    "StorageExist": storageExist_1.StorageExist,
    "StorageFile": storageFile_1.StorageFile,
    "TextLine": textLine_1.TextLine,
    "TextRect": textRect_1.TextRect,
    "TextRects": textRects_1.TextRects,
    "TextReplace": textReplace_1.TextReplace,
    "TextReplaceListRequest": textReplaceListRequest_1.TextReplaceListRequest,
    "TextState": textState_1.TextState,
    "TextStyle": textStyle_1.TextStyle,
    "TimestampSettings": timestampSettings_1.TimestampSettings,
    "WordCount": wordCount_1.WordCount,
    "Annotation": annotation_1.Annotation,
    "AnnotationsInfo": annotationsInfo_1.AnnotationsInfo,
    "AnnotationsInfoResponse": annotationsInfoResponse_1.AnnotationsInfoResponse,
    "Attachment": attachment_1.Attachment,
    "AttachmentResponse": attachmentResponse_1.AttachmentResponse,
    "Attachments": attachments_1.Attachments,
    "AttachmentsResponse": attachmentsResponse_1.AttachmentsResponse,
    "Bookmark": bookmark_1.Bookmark,
    "BookmarkResponse": bookmarkResponse_1.BookmarkResponse,
    "Bookmarks": bookmarks_1.Bookmarks,
    "BookmarksResponse": bookmarksResponse_1.BookmarksResponse,
    "CaretAnnotationResponse": caretAnnotationResponse_1.CaretAnnotationResponse,
    "CaretAnnotations": caretAnnotations_1.CaretAnnotations,
    "CaretAnnotationsResponse": caretAnnotationsResponse_1.CaretAnnotationsResponse,
    "CheckBoxFieldResponse": checkBoxFieldResponse_1.CheckBoxFieldResponse,
    "CheckBoxFields": checkBoxFields_1.CheckBoxFields,
    "CheckBoxFieldsResponse": checkBoxFieldsResponse_1.CheckBoxFieldsResponse,
    "CircleAnnotationResponse": circleAnnotationResponse_1.CircleAnnotationResponse,
    "CircleAnnotations": circleAnnotations_1.CircleAnnotations,
    "CircleAnnotationsResponse": circleAnnotationsResponse_1.CircleAnnotationsResponse,
    "ComboBoxFieldResponse": comboBoxFieldResponse_1.ComboBoxFieldResponse,
    "ComboBoxFields": comboBoxFields_1.ComboBoxFields,
    "ComboBoxFieldsResponse": comboBoxFieldsResponse_1.ComboBoxFieldsResponse,
    "DisplayProperties": displayProperties_1.DisplayProperties,
    "DisplayPropertiesResponse": displayPropertiesResponse_1.DisplayPropertiesResponse,
    "Document": document_1.Document,
    "DocumentPageResponse": documentPageResponse_1.DocumentPageResponse,
    "DocumentPagesResponse": documentPagesResponse_1.DocumentPagesResponse,
    "DocumentProperties": documentProperties_1.DocumentProperties,
    "DocumentPropertiesResponse": documentPropertiesResponse_1.DocumentPropertiesResponse,
    "DocumentProperty": documentProperty_1.DocumentProperty,
    "DocumentPropertyResponse": documentPropertyResponse_1.DocumentPropertyResponse,
    "DocumentResponse": documentResponse_1.DocumentResponse,
    "Field": field_1.Field,
    "FieldResponse": fieldResponse_1.FieldResponse,
    "Fields": fields_1.Fields,
    "FieldsResponse": fieldsResponse_1.FieldsResponse,
    "FileAttachmentAnnotationResponse": fileAttachmentAnnotationResponse_1.FileAttachmentAnnotationResponse,
    "FileAttachmentAnnotations": fileAttachmentAnnotations_1.FileAttachmentAnnotations,
    "FileAttachmentAnnotationsResponse": fileAttachmentAnnotationsResponse_1.FileAttachmentAnnotationsResponse,
    "FileVersion": fileVersion_1.FileVersion,
    "FormField": formField_1.FormField,
    "FreeTextAnnotationResponse": freeTextAnnotationResponse_1.FreeTextAnnotationResponse,
    "FreeTextAnnotations": freeTextAnnotations_1.FreeTextAnnotations,
    "FreeTextAnnotationsResponse": freeTextAnnotationsResponse_1.FreeTextAnnotationsResponse,
    "HighlightAnnotationResponse": highlightAnnotationResponse_1.HighlightAnnotationResponse,
    "HighlightAnnotations": highlightAnnotations_1.HighlightAnnotations,
    "HighlightAnnotationsResponse": highlightAnnotationsResponse_1.HighlightAnnotationsResponse,
    "Image": image_1.Image,
    "ImageResponse": imageResponse_1.ImageResponse,
    "Images": images_1.Images,
    "ImagesResponse": imagesResponse_1.ImagesResponse,
    "InkAnnotationResponse": inkAnnotationResponse_1.InkAnnotationResponse,
    "InkAnnotations": inkAnnotations_1.InkAnnotations,
    "InkAnnotationsResponse": inkAnnotationsResponse_1.InkAnnotationsResponse,
    "LineAnnotationResponse": lineAnnotationResponse_1.LineAnnotationResponse,
    "LineAnnotations": lineAnnotations_1.LineAnnotations,
    "LineAnnotationsResponse": lineAnnotationsResponse_1.LineAnnotationsResponse,
    "LinkAnnotation": linkAnnotation_1.LinkAnnotation,
    "LinkAnnotationResponse": linkAnnotationResponse_1.LinkAnnotationResponse,
    "LinkAnnotations": linkAnnotations_1.LinkAnnotations,
    "LinkAnnotationsResponse": linkAnnotationsResponse_1.LinkAnnotationsResponse,
    "ListBoxFieldResponse": listBoxFieldResponse_1.ListBoxFieldResponse,
    "ListBoxFields": listBoxFields_1.ListBoxFields,
    "ListBoxFieldsResponse": listBoxFieldsResponse_1.ListBoxFieldsResponse,
    "MovieAnnotationResponse": movieAnnotationResponse_1.MovieAnnotationResponse,
    "MovieAnnotations": movieAnnotations_1.MovieAnnotations,
    "MovieAnnotationsResponse": movieAnnotationsResponse_1.MovieAnnotationsResponse,
    "Page": page_1.Page,
    "Pages": pages_1.Pages,
    "PolyLineAnnotationResponse": polyLineAnnotationResponse_1.PolyLineAnnotationResponse,
    "PolyLineAnnotations": polyLineAnnotations_1.PolyLineAnnotations,
    "PolyLineAnnotationsResponse": polyLineAnnotationsResponse_1.PolyLineAnnotationsResponse,
    "PolygonAnnotationResponse": polygonAnnotationResponse_1.PolygonAnnotationResponse,
    "PolygonAnnotations": polygonAnnotations_1.PolygonAnnotations,
    "PolygonAnnotationsResponse": polygonAnnotationsResponse_1.PolygonAnnotationsResponse,
    "PopupAnnotationResponse": popupAnnotationResponse_1.PopupAnnotationResponse,
    "PopupAnnotations": popupAnnotations_1.PopupAnnotations,
    "PopupAnnotationsResponse": popupAnnotationsResponse_1.PopupAnnotationsResponse,
    "RadioButtonFieldResponse": radioButtonFieldResponse_1.RadioButtonFieldResponse,
    "RadioButtonFields": radioButtonFields_1.RadioButtonFields,
    "RadioButtonFieldsResponse": radioButtonFieldsResponse_1.RadioButtonFieldsResponse,
    "RedactionAnnotationResponse": redactionAnnotationResponse_1.RedactionAnnotationResponse,
    "RedactionAnnotations": redactionAnnotations_1.RedactionAnnotations,
    "RedactionAnnotationsResponse": redactionAnnotationsResponse_1.RedactionAnnotationsResponse,
    "ScreenAnnotationResponse": screenAnnotationResponse_1.ScreenAnnotationResponse,
    "ScreenAnnotations": screenAnnotations_1.ScreenAnnotations,
    "ScreenAnnotationsResponse": screenAnnotationsResponse_1.ScreenAnnotationsResponse,
    "SignatureFieldResponse": signatureFieldResponse_1.SignatureFieldResponse,
    "SignatureFields": signatureFields_1.SignatureFields,
    "SignatureFieldsResponse": signatureFieldsResponse_1.SignatureFieldsResponse,
    "SignatureVerifyResponse": signatureVerifyResponse_1.SignatureVerifyResponse,
    "SoundAnnotationResponse": soundAnnotationResponse_1.SoundAnnotationResponse,
    "SoundAnnotations": soundAnnotations_1.SoundAnnotations,
    "SoundAnnotationsResponse": soundAnnotationsResponse_1.SoundAnnotationsResponse,
    "SplitResultDocument": splitResultDocument_1.SplitResultDocument,
    "SplitResultResponse": splitResultResponse_1.SplitResultResponse,
    "SquareAnnotationResponse": squareAnnotationResponse_1.SquareAnnotationResponse,
    "SquareAnnotations": squareAnnotations_1.SquareAnnotations,
    "SquareAnnotationsResponse": squareAnnotationsResponse_1.SquareAnnotationsResponse,
    "SquigglyAnnotationResponse": squigglyAnnotationResponse_1.SquigglyAnnotationResponse,
    "SquigglyAnnotations": squigglyAnnotations_1.SquigglyAnnotations,
    "SquigglyAnnotationsResponse": squigglyAnnotationsResponse_1.SquigglyAnnotationsResponse,
    "StampAnnotationResponse": stampAnnotationResponse_1.StampAnnotationResponse,
    "StampAnnotations": stampAnnotations_1.StampAnnotations,
    "StampAnnotationsResponse": stampAnnotationsResponse_1.StampAnnotationsResponse,
    "StampBase": stampBase_1.StampBase,
    "StampInfo": stampInfo_1.StampInfo,
    "StampsInfo": stampsInfo_1.StampsInfo,
    "StampsInfoResponse": stampsInfoResponse_1.StampsInfoResponse,
    "StrikeOutAnnotationResponse": strikeOutAnnotationResponse_1.StrikeOutAnnotationResponse,
    "StrikeOutAnnotations": strikeOutAnnotations_1.StrikeOutAnnotations,
    "StrikeOutAnnotationsResponse": strikeOutAnnotationsResponse_1.StrikeOutAnnotationsResponse,
    "Table": table_1.Table,
    "TableRecognized": tableRecognized_1.TableRecognized,
    "TableRecognizedResponse": tableRecognizedResponse_1.TableRecognizedResponse,
    "TablesRecognized": tablesRecognized_1.TablesRecognized,
    "TablesRecognizedResponse": tablesRecognizedResponse_1.TablesRecognizedResponse,
    "TextAnnotationResponse": textAnnotationResponse_1.TextAnnotationResponse,
    "TextAnnotations": textAnnotations_1.TextAnnotations,
    "TextAnnotationsResponse": textAnnotationsResponse_1.TextAnnotationsResponse,
    "TextBoxFieldResponse": textBoxFieldResponse_1.TextBoxFieldResponse,
    "TextBoxFields": textBoxFields_1.TextBoxFields,
    "TextBoxFieldsResponse": textBoxFieldsResponse_1.TextBoxFieldsResponse,
    "TextRectsResponse": textRectsResponse_1.TextRectsResponse,
    "TextReplaceResponse": textReplaceResponse_1.TextReplaceResponse,
    "UnderlineAnnotationResponse": underlineAnnotationResponse_1.UnderlineAnnotationResponse,
    "UnderlineAnnotations": underlineAnnotations_1.UnderlineAnnotations,
    "UnderlineAnnotationsResponse": underlineAnnotationsResponse_1.UnderlineAnnotationsResponse,
    "WordCountResponse": wordCountResponse_1.WordCountResponse,
    "AnnotationInfo": annotationInfo_1.AnnotationInfo,
    "CheckBoxField": checkBoxField_1.CheckBoxField,
    "ChoiceField": choiceField_1.ChoiceField,
    "ImageFooter": imageFooter_1.ImageFooter,
    "ImageHeader": imageHeader_1.ImageHeader,
    "ImageStamp": imageStamp_1.ImageStamp,
    "MarkupAnnotation": markupAnnotation_1.MarkupAnnotation,
    "MovieAnnotation": movieAnnotation_1.MovieAnnotation,
    "PageNumberStamp": pageNumberStamp_1.PageNumberStamp,
    "PdfPageStamp": pdfPageStamp_1.PdfPageStamp,
    "PopupAnnotation": popupAnnotation_1.PopupAnnotation,
    "RadioButtonOptionField": radioButtonOptionField_1.RadioButtonOptionField,
    "RedactionAnnotation": redactionAnnotation_1.RedactionAnnotation,
    "ScreenAnnotation": screenAnnotation_1.ScreenAnnotation,
    "SignatureField": signatureField_1.SignatureField,
    "TextBoxField": textBoxField_1.TextBoxField,
    "TextFooter": textFooter_1.TextFooter,
    "TextHeader": textHeader_1.TextHeader,
    "TextStamp": textStamp_1.TextStamp,
    "CaretAnnotation": caretAnnotation_1.CaretAnnotation,
    "ComboBoxField": comboBoxField_1.ComboBoxField,
    "CommonFigureAnnotation": commonFigureAnnotation_1.CommonFigureAnnotation,
    "FileAttachmentAnnotation": fileAttachmentAnnotation_1.FileAttachmentAnnotation,
    "FreeTextAnnotation": freeTextAnnotation_1.FreeTextAnnotation,
    "HighlightAnnotation": highlightAnnotation_1.HighlightAnnotation,
    "InkAnnotation": inkAnnotation_1.InkAnnotation,
    "LineAnnotation": lineAnnotation_1.LineAnnotation,
    "ListBoxField": listBoxField_1.ListBoxField,
    "PolyAnnotation": polyAnnotation_1.PolyAnnotation,
    "PopupAnnotationWithParent": popupAnnotationWithParent_1.PopupAnnotationWithParent,
    "RadioButtonField": radioButtonField_1.RadioButtonField,
    "SoundAnnotation": soundAnnotation_1.SoundAnnotation,
    "SquigglyAnnotation": squigglyAnnotation_1.SquigglyAnnotation,
    "StampAnnotation": stampAnnotation_1.StampAnnotation,
    "StrikeOutAnnotation": strikeOutAnnotation_1.StrikeOutAnnotation,
    "TextAnnotation": textAnnotation_1.TextAnnotation,
    "UnderlineAnnotation": underlineAnnotation_1.UnderlineAnnotation,
    "CircleAnnotation": circleAnnotation_1.CircleAnnotation,
    "PolyLineAnnotation": polyLineAnnotation_1.PolyLineAnnotation,
    "PolygonAnnotation": polygonAnnotation_1.PolygonAnnotation,
    "SquareAnnotation": squareAnnotation_1.SquareAnnotation,
};
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty];
                }
                else {
                    return expectedType;
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            let regEx = /\/Date\((\d+)\+0000\)\//;
            var result = regEx.exec(data);
            if (result) {
                return new Date(parseInt(result[1]));
            }
            else {
                return null;
            }
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=objectSerializer.js.map