"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const requestHelper_1 = require("./requestHelper");
class OAuth {
    applyToRequest(requestOptions, configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.accessToken == null) {
                yield this._requestToken(configuration);
            }
            if (requestOptions && requestOptions.headers) {
                requestOptions.headers.Authorization = "Bearer " + this.accessToken;
            }
            return Promise.resolve();
        });
    }
    handle401response(configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._requestToken(configuration);
        });
    }
    _requestToken(configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                method: "POST",
                json: true,
                uri: configuration.baseUrl.replace("/v3.0", "") + "/connect/token",
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                form: {
                    grant_type: "client_credentials",
                    client_id: configuration.appSID,
                    client_secret: configuration.appKey,
                },
            };
            const response = yield requestHelper_1.invokeApiMethod(requestOptions, configuration, true);
            this.accessToken = response.body.access_token;
            return Promise.resolve();
        });
    }
}
exports.OAuth = OAuth;
//# sourceMappingURL=auth.js.map