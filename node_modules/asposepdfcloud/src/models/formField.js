"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linkElement_1 = require("./linkElement");
class FormField extends linkElement_1.LinkElement {
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FormField.attributeTypeMap);
    }
}
FormField.discriminator = undefined;
FormField.attributeTypeMap = [
    {
        "name": "partialName",
        "baseName": "PartialName",
        "type": "string"
    },
    {
        "name": "rect",
        "baseName": "Rect",
        "type": "Rectangle"
    },
    {
        "name": "value",
        "baseName": "Value",
        "type": "string"
    },
    {
        "name": "pageIndex",
        "baseName": "PageIndex",
        "type": "number"
    },
    {
        "name": "height",
        "baseName": "Height",
        "type": "number"
    },
    {
        "name": "width",
        "baseName": "Width",
        "type": "number"
    },
    {
        "name": "zIndex",
        "baseName": "ZIndex",
        "type": "number"
    },
    {
        "name": "isGroup",
        "baseName": "IsGroup",
        "type": "boolean"
    },
    {
        "name": "parent",
        "baseName": "Parent",
        "type": "FormField"
    },
    {
        "name": "isSharedField",
        "baseName": "IsSharedField",
        "type": "boolean"
    },
    {
        "name": "flags",
        "baseName": "Flags",
        "type": "Array<AnnotationFlags>"
    },
    {
        "name": "color",
        "baseName": "Color",
        "type": "Color"
    },
    {
        "name": "contents",
        "baseName": "Contents",
        "type": "string"
    },
    {
        "name": "margin",
        "baseName": "Margin",
        "type": "MarginInfo"
    },
    {
        "name": "highlighting",
        "baseName": "Highlighting",
        "type": "LinkHighlightingMode"
    },
    {
        "name": "horizontalAlignment",
        "baseName": "HorizontalAlignment",
        "type": "HorizontalAlignment"
    },
    {
        "name": "verticalAlignment",
        "baseName": "VerticalAlignment",
        "type": "VerticalAlignment"
    },
    {
        "name": "border",
        "baseName": "Border",
        "type": "Border"
    }
];
exports.FormField = FormField;
//# sourceMappingURL=formField.js.map