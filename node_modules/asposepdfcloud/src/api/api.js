"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const objectSerializer_1 = require("../objectSerializer");
const configuration_1 = require("../configuration");
const requestHelper_1 = require("../requestHelper");
let defaultBasePath = 'https://api.aspose.cloud/v3.0';
class PdfApi {
    constructor(appSID, appKey, baseUrl) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        if (baseUrl === null || baseUrl === undefined) {
            baseUrl = defaultBasePath;
        }
        this.configuration = new configuration_1.Configuration(appSID, appKey, baseUrl);
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this.configuration.baseUrl = basePath;
    }
    get basePath() {
        return this.configuration.baseUrl;
    }
    copyFile(srcPath, destPath, srcStorageName, destStorageName, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/file/copy/{srcPath}'
                .replace('{' + 'srcPath' + '}', encodeURIComponent(String(srcPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling copyFile.');
            }
            if (destPath === null || destPath === undefined) {
                throw new Error('Required parameter destPath was null or undefined when calling copyFile.');
            }
            if (destPath !== undefined && null !== destPath) {
                localVarQueryParameters['destPath'] = objectSerializer_1.ObjectSerializer.serialize(destPath, "string");
            }
            if (srcStorageName !== undefined && null !== srcStorageName) {
                localVarQueryParameters['srcStorageName'] = objectSerializer_1.ObjectSerializer.serialize(srcStorageName, "string");
            }
            if (destStorageName !== undefined && null !== destStorageName) {
                localVarQueryParameters['destStorageName'] = objectSerializer_1.ObjectSerializer.serialize(destStorageName, "string");
            }
            if (versionId !== undefined && null !== versionId) {
                localVarQueryParameters['versionId'] = objectSerializer_1.ObjectSerializer.serialize(versionId, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "");
            return Promise.resolve({ body: result, response });
        });
    }
    copyFolder(srcPath, destPath, srcStorageName, destStorageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/folder/copy/{srcPath}'
                .replace('{' + 'srcPath' + '}', encodeURIComponent(String(srcPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling copyFolder.');
            }
            if (destPath === null || destPath === undefined) {
                throw new Error('Required parameter destPath was null or undefined when calling copyFolder.');
            }
            if (destPath !== undefined && null !== destPath) {
                localVarQueryParameters['destPath'] = objectSerializer_1.ObjectSerializer.serialize(destPath, "string");
            }
            if (srcStorageName !== undefined && null !== srcStorageName) {
                localVarQueryParameters['srcStorageName'] = objectSerializer_1.ObjectSerializer.serialize(srcStorageName, "string");
            }
            if (destStorageName !== undefined && null !== destStorageName) {
                localVarQueryParameters['destStorageName'] = objectSerializer_1.ObjectSerializer.serialize(destStorageName, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "");
            return Promise.resolve({ body: result, response });
        });
    }
    createFolder(path, storageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/folder/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling createFolder.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling deleteAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteBookmark(name, bookmarkPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/bookmarks/bookmark/{bookmarkPath}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'bookmarkPath' + '}', encodeURIComponent(String(bookmarkPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteBookmark.');
            }
            if (bookmarkPath === null || bookmarkPath === undefined) {
                throw new Error('Required parameter bookmarkPath was null or undefined when calling deleteBookmark.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteDocumentAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteDocumentAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteDocumentBookmarks(name, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/bookmarks/tree'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteDocumentBookmarks.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteDocumentLinkAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/links'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteDocumentLinkAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteDocumentStamps(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/stamps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteDocumentStamps.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteDocumentTables(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/tables'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteDocumentTables.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling deleteField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteFile(path, storageName, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/file/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling deleteFile.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            if (versionId !== undefined && null !== versionId) {
                localVarQueryParameters['versionId'] = objectSerializer_1.ObjectSerializer.serialize(versionId, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteFolder(path, storageName, recursive) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/folder/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling deleteFolder.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            if (recursive !== undefined && null !== recursive) {
                localVarQueryParameters['recursive'] = objectSerializer_1.ObjectSerializer.serialize(recursive, "boolean");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteImage(name, imageId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteImage.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling deleteImage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteLinkAnnotation(name, linkId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/links/{linkId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteLinkAnnotation.');
            }
            if (linkId === null || linkId === undefined) {
                throw new Error('Required parameter linkId was null or undefined when calling deleteLinkAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deletePage(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deletePage.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling deletePage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deletePageAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deletePageAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling deletePageAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deletePageLinkAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/links'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deletePageLinkAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling deletePageLinkAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deletePageStamps(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/stamps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deletePageStamps.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling deletePageStamps.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deletePageTables(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/tables'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deletePageTables.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling deletePageTables.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteProperties(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/documentproperties'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteProperties.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteProperty(name, propertyName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/documentproperties/{propertyName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'propertyName' + '}', encodeURIComponent(String(propertyName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteProperty.');
            }
            if (propertyName === null || propertyName === undefined) {
                throw new Error('Required parameter propertyName was null or undefined when calling deleteProperty.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteStamp(name, stampId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/stamps/{stampId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'stampId' + '}', encodeURIComponent(String(stampId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteStamp.');
            }
            if (stampId === null || stampId === undefined) {
                throw new Error('Required parameter stampId was null or undefined when calling deleteStamp.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    deleteTable(name, tableId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/tables/{tableId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'tableId' + '}', encodeURIComponent(String(tableId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling deleteTable.');
            }
            if (tableId === null || tableId === undefined) {
                throw new Error('Required parameter tableId was null or undefined when calling deleteTable.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    downloadFile(path, storageName, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/file/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling downloadFile.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            if (versionId !== undefined && null !== versionId) {
                localVarQueryParameters['versionId'] = objectSerializer_1.ObjectSerializer.serialize(versionId, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getBookmark(name, bookmarkPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/bookmarks/bookmark/{bookmarkPath}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'bookmarkPath' + '}', encodeURIComponent(String(bookmarkPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getBookmark.');
            }
            if (bookmarkPath === null || bookmarkPath === undefined) {
                throw new Error('Required parameter bookmarkPath was null or undefined when calling getBookmark.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarkResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getBookmarks(name, bookmarkPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/bookmarks/list/{bookmarkPath}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'bookmarkPath' + '}', encodeURIComponent(String(bookmarkPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getBookmarks.');
            }
            if (bookmarkPath === null || bookmarkPath === undefined) {
                throw new Error('Required parameter bookmarkPath was null or undefined when calling getBookmarks.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarksResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getCaretAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/caret/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getCaretAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getCaretAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CaretAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getCheckBoxField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/checkbox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getCheckBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling getCheckBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CheckBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getCircleAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/circle/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getCircleAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getCircleAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CircleAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getComboBoxField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/combobox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getComboBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling getComboBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ComboBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDiscUsage(storageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/disc';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DiscUsage");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocument(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocument.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AnnotationsInfoResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentAttachmentByIndex(name, attachmentIndex, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/attachments/{attachmentIndex}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'attachmentIndex' + '}', encodeURIComponent(String(attachmentIndex)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentAttachmentByIndex.');
            }
            if (attachmentIndex === null || attachmentIndex === undefined) {
                throw new Error('Required parameter attachmentIndex was null or undefined when calling getDocumentAttachmentByIndex.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AttachmentResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentAttachments(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/attachments'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentAttachments.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AttachmentsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentBookmarks(name, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/bookmarks/tree'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentBookmarks.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarksResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentCaretAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/caret'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentCaretAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CaretAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentCheckBoxFields(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/checkbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentCheckBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CheckBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentCircleAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/circle'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentCircleAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CircleAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentComboBoxFields(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/combobox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentComboBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ComboBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentDisplayProperties(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/displayproperties'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentDisplayProperties.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DisplayPropertiesResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentFileAttachmentAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/fileattachment'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentFileAttachmentAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FileAttachmentAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentFreeTextAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/freetext'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentFreeTextAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FreeTextAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentHighlightAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/highlight'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentHighlightAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HighlightAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentInkAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/ink'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentInkAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "InkAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentLineAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/line'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentLineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LineAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentListBoxFields(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/listbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentListBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ListBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentMovieAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/movie'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentMovieAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "MovieAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentPolyLineAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/polyline'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentPolyLineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolyLineAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentPolygonAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/polygon'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentPolygonAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolygonAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentPopupAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/popup'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentPopupAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PopupAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentPopupAnnotationsByParent(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/{annotationId}/popup'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentPopupAnnotationsByParent.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getDocumentPopupAnnotationsByParent.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PopupAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentProperties(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/documentproperties'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentProperties.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPropertiesResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentProperty(name, propertyName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/documentproperties/{propertyName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'propertyName' + '}', encodeURIComponent(String(propertyName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentProperty.');
            }
            if (propertyName === null || propertyName === undefined) {
                throw new Error('Required parameter propertyName was null or undefined when calling getDocumentProperty.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPropertyResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentRadioButtonFields(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/radiobutton'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentRadioButtonFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RadioButtonFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentRedactionAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/redaction'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentRedactionAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RedactionAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentScreenAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/screen'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentScreenAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ScreenAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentSignatureFields(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/signature'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentSignatureFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SignatureFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentSoundAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/sound'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentSoundAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SoundAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentSquareAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/square'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentSquareAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquareAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentSquigglyAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/squiggly'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentSquigglyAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquigglyAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentStampAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/stamp'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentStampAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StampAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentStamps(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/stamps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentStamps.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StampsInfoResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentStrikeOutAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/strikeout'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentStrikeOutAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StrikeOutAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentTables(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/tables'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentTables.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TablesRecognizedResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentTextAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentTextAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentTextBoxFields(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/textbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentTextBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDocumentUnderlineAnnotations(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/underline'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDocumentUnderlineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "UnderlineAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getDownloadDocumentAttachmentByIndex(name, attachmentIndex, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/attachments/{attachmentIndex}/download'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'attachmentIndex' + '}', encodeURIComponent(String(attachmentIndex)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getDownloadDocumentAttachmentByIndex.');
            }
            if (attachmentIndex === null || attachmentIndex === undefined) {
                throw new Error('Required parameter attachmentIndex was null or undefined when calling getDownloadDocumentAttachmentByIndex.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getEpubInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/epub';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getEpubInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getExportFieldsFromPdfToFdfInStorage(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/export/fdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getExportFieldsFromPdfToFdfInStorage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getExportFieldsFromPdfToXfdfInStorage(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/export/xfdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getExportFieldsFromPdfToXfdfInStorage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getExportFieldsFromPdfToXmlInStorage(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/export/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getExportFieldsFromPdfToXmlInStorage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling getField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getFields(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getFileAttachmentAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/fileattachment/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getFileAttachmentAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getFileAttachmentAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FileAttachmentAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getFileAttachmentAnnotationData(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/fileattachment/{annotationId}/data'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getFileAttachmentAnnotationData.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getFileAttachmentAnnotationData.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getFileVersions(path, storageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/version/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling getFileVersions.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FileVersions");
            return Promise.resolve({ body: result, response });
        });
    }
    getFilesList(path, storageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/folder/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling getFilesList.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FilesList");
            return Promise.resolve({ body: result, response });
        });
    }
    getFreeTextAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/freetext/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getFreeTextAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getFreeTextAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FreeTextAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getHighlightAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/highlight/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getHighlightAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getHighlightAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HighlightAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getHtmlInStorageToPdf(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/html';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getHtmlInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (htmlFileName !== undefined && null !== htmlFileName) {
                localVarQueryParameters['htmlFileName'] = objectSerializer_1.ObjectSerializer.serialize(htmlFileName, "string");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (isLandscape !== undefined && null !== isLandscape) {
                localVarQueryParameters['isLandscape'] = objectSerializer_1.ObjectSerializer.serialize(isLandscape, "boolean");
            }
            if (marginLeft !== undefined && null !== marginLeft) {
                localVarQueryParameters['marginLeft'] = objectSerializer_1.ObjectSerializer.serialize(marginLeft, "number");
            }
            if (marginBottom !== undefined && null !== marginBottom) {
                localVarQueryParameters['marginBottom'] = objectSerializer_1.ObjectSerializer.serialize(marginBottom, "number");
            }
            if (marginRight !== undefined && null !== marginRight) {
                localVarQueryParameters['marginRight'] = objectSerializer_1.ObjectSerializer.serialize(marginRight, "number");
            }
            if (marginTop !== undefined && null !== marginTop) {
                localVarQueryParameters['marginTop'] = objectSerializer_1.ObjectSerializer.serialize(marginTop, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getImage(name, imageId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImage.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling getImage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ImageResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getImageExtractAsGif(name, imageId, width, height, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/gif'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImageExtractAsGif.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling getImageExtractAsGif.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getImageExtractAsJpeg(name, imageId, width, height, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/jpeg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImageExtractAsJpeg.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling getImageExtractAsJpeg.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getImageExtractAsPng(name, imageId, width, height, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/png'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImageExtractAsPng.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling getImageExtractAsPng.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getImageExtractAsTiff(name, imageId, width, height, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/tiff'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImageExtractAsTiff.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling getImageExtractAsTiff.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getImages(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/images'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImages.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getImages.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ImagesResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getImportFieldsFromFdfInStorage(name, fdfFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/fdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImportFieldsFromFdfInStorage.');
            }
            if (fdfFilePath === null || fdfFilePath === undefined) {
                throw new Error('Required parameter fdfFilePath was null or undefined when calling getImportFieldsFromFdfInStorage.');
            }
            if (fdfFilePath !== undefined && null !== fdfFilePath) {
                localVarQueryParameters['fdfFilePath'] = objectSerializer_1.ObjectSerializer.serialize(fdfFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getImportFieldsFromXfdfInStorage(name, xfdfFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/xfdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImportFieldsFromXfdfInStorage.');
            }
            if (xfdfFilePath === null || xfdfFilePath === undefined) {
                throw new Error('Required parameter xfdfFilePath was null or undefined when calling getImportFieldsFromXfdfInStorage.');
            }
            if (xfdfFilePath !== undefined && null !== xfdfFilePath) {
                localVarQueryParameters['xfdfFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xfdfFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getImportFieldsFromXmlInStorage(name, xmlFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getImportFieldsFromXmlInStorage.');
            }
            if (xmlFilePath === null || xmlFilePath === undefined) {
                throw new Error('Required parameter xmlFilePath was null or undefined when calling getImportFieldsFromXmlInStorage.');
            }
            if (xmlFilePath !== undefined && null !== xmlFilePath) {
                localVarQueryParameters['xmlFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xmlFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getInkAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/ink/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getInkAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getInkAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "InkAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getLaTeXInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/latex';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getLaTeXInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getLineAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/line/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getLineAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getLineAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LineAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getLinkAnnotation(name, linkId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/links/{linkId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getLinkAnnotation.');
            }
            if (linkId === null || linkId === undefined) {
                throw new Error('Required parameter linkId was null or undefined when calling getLinkAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LinkAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getListBoxField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/listbox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getListBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling getListBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ListBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getMarkdownInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/markdown';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getMarkdownInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getMhtInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/mht';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getMhtInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getMovieAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/movie/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getMovieAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getMovieAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "MovieAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPage(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPage.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPageResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AnnotationsInfoResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageCaretAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/caret'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageCaretAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageCaretAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CaretAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageCheckBoxFields(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/page/{pageNumber}/fields/checkbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageCheckBoxFields.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageCheckBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CheckBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageCircleAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/circle'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageCircleAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageCircleAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CircleAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageComboBoxFields(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/page/{pageNumber}/fields/combobox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageComboBoxFields.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageComboBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ComboBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageConvertToBmp(name, pageNumber, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/bmp'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageConvertToBmp.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageConvertToBmp.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageConvertToEmf(name, pageNumber, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/emf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageConvertToEmf.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageConvertToEmf.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageConvertToGif(name, pageNumber, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/gif'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageConvertToGif.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageConvertToGif.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageConvertToJpeg(name, pageNumber, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/jpeg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageConvertToJpeg.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageConvertToJpeg.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageConvertToPng(name, pageNumber, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/png'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageConvertToPng.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageConvertToPng.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageConvertToTiff(name, pageNumber, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/tiff'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageConvertToTiff.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageConvertToTiff.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageFileAttachmentAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/fileattachment'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageFileAttachmentAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageFileAttachmentAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FileAttachmentAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageFreeTextAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/freetext'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageFreeTextAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageFreeTextAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FreeTextAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageHighlightAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/highlight'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageHighlightAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageHighlightAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HighlightAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageInkAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/ink'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageInkAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageInkAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "InkAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageLineAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/line'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageLineAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageLineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LineAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageLinkAnnotation(name, pageNumber, linkId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/links/{linkId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'))
                .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageLinkAnnotation.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageLinkAnnotation.');
            }
            if (linkId === null || linkId === undefined) {
                throw new Error('Required parameter linkId was null or undefined when calling getPageLinkAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LinkAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageLinkAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/links'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageLinkAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageLinkAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LinkAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageListBoxFields(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/page/{pageNumber}/fields/listbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageListBoxFields.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageListBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ListBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageMovieAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/movie'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageMovieAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageMovieAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "MovieAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPagePolyLineAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/polyline'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPagePolyLineAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPagePolyLineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolyLineAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPagePolygonAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/polygon'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPagePolygonAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPagePolygonAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolygonAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPagePopupAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/popup'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPagePopupAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPagePopupAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PopupAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageRadioButtonFields(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/page/{pageNumber}/fields/radiobutton'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageRadioButtonFields.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageRadioButtonFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RadioButtonFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageRedactionAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/redaction'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageRedactionAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageRedactionAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RedactionAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageScreenAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/screen'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageScreenAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageScreenAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ScreenAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageSignatureFields(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/page/{pageNumber}/fields/signature'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageSignatureFields.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageSignatureFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SignatureFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageSoundAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/sound'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageSoundAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageSoundAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SoundAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageSquareAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/square'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageSquareAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageSquareAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquareAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageSquigglyAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/squiggly'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageSquigglyAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageSquigglyAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquigglyAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageStampAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/stamp'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageStampAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageStampAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StampAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageStamps(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/stamps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageStamps.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageStamps.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StampsInfoResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageStrikeOutAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/strikeout'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageStrikeOutAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageStrikeOutAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StrikeOutAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageTables(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/tables'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageTables.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageTables.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TablesRecognizedResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageText(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageText.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageText.');
            }
            if (LLX === null || LLX === undefined) {
                throw new Error('Required parameter LLX was null or undefined when calling getPageText.');
            }
            if (LLY === null || LLY === undefined) {
                throw new Error('Required parameter LLY was null or undefined when calling getPageText.');
            }
            if (URX === null || URX === undefined) {
                throw new Error('Required parameter URX was null or undefined when calling getPageText.');
            }
            if (URY === null || URY === undefined) {
                throw new Error('Required parameter URY was null or undefined when calling getPageText.');
            }
            if (format !== undefined && null !== format) {
                localVarQueryParameters['format'] = objectSerializer_1.ObjectSerializer.serialize(format, "Array<string>");
            }
            if (regex !== undefined && null !== regex) {
                localVarQueryParameters['regex'] = objectSerializer_1.ObjectSerializer.serialize(regex, "string");
            }
            if (splitRects !== undefined && null !== splitRects) {
                localVarQueryParameters['splitRects'] = objectSerializer_1.ObjectSerializer.serialize(splitRects, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (LLX !== undefined && null !== LLX) {
                localVarQueryParameters['LLX'] = objectSerializer_1.ObjectSerializer.serialize(LLX, "number");
            }
            if (LLY !== undefined && null !== LLY) {
                localVarQueryParameters['LLY'] = objectSerializer_1.ObjectSerializer.serialize(LLY, "number");
            }
            if (URX !== undefined && null !== URX) {
                localVarQueryParameters['URX'] = objectSerializer_1.ObjectSerializer.serialize(URX, "number");
            }
            if (URY !== undefined && null !== URY) {
                localVarQueryParameters['URY'] = objectSerializer_1.ObjectSerializer.serialize(URY, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextRectsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageTextAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageTextAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageTextAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageTextBoxFields(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/page/{pageNumber}/fields/textbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageTextBoxFields.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageTextBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextBoxFieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPageUnderlineAnnotations(name, pageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/underline'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPageUnderlineAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling getPageUnderlineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "UnderlineAnnotationsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPages(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPages.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPagesResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPclInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/pcl';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getPclInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfAInStorageToPdf(srcPath, dontOptimize, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/pdfa';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getPdfAInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dontOptimize !== undefined && null !== dontOptimize) {
                localVarQueryParameters['dontOptimize'] = objectSerializer_1.ObjectSerializer.serialize(dontOptimize, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToDoc(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/doc'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToDoc.');
            }
            if (addReturnToLineEnd !== undefined && null !== addReturnToLineEnd) {
                localVarQueryParameters['addReturnToLineEnd'] = objectSerializer_1.ObjectSerializer.serialize(addReturnToLineEnd, "boolean");
            }
            if (format !== undefined && null !== format) {
                localVarQueryParameters['format'] = objectSerializer_1.ObjectSerializer.serialize(format, "string");
            }
            if (imageResolutionX !== undefined && null !== imageResolutionX) {
                localVarQueryParameters['imageResolutionX'] = objectSerializer_1.ObjectSerializer.serialize(imageResolutionX, "number");
            }
            if (imageResolutionY !== undefined && null !== imageResolutionY) {
                localVarQueryParameters['imageResolutionY'] = objectSerializer_1.ObjectSerializer.serialize(imageResolutionY, "number");
            }
            if (maxDistanceBetweenTextLines !== undefined && null !== maxDistanceBetweenTextLines) {
                localVarQueryParameters['maxDistanceBetweenTextLines'] = objectSerializer_1.ObjectSerializer.serialize(maxDistanceBetweenTextLines, "number");
            }
            if (mode !== undefined && null !== mode) {
                localVarQueryParameters['mode'] = objectSerializer_1.ObjectSerializer.serialize(mode, "string");
            }
            if (recognizeBullets !== undefined && null !== recognizeBullets) {
                localVarQueryParameters['recognizeBullets'] = objectSerializer_1.ObjectSerializer.serialize(recognizeBullets, "boolean");
            }
            if (relativeHorizontalProximity !== undefined && null !== relativeHorizontalProximity) {
                localVarQueryParameters['relativeHorizontalProximity'] = objectSerializer_1.ObjectSerializer.serialize(relativeHorizontalProximity, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToEpub(name, contentRecognitionMode, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/epub'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToEpub.');
            }
            if (contentRecognitionMode !== undefined && null !== contentRecognitionMode) {
                localVarQueryParameters['contentRecognitionMode'] = objectSerializer_1.ObjectSerializer.serialize(contentRecognitionMode, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToHtml(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/html'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToHtml.');
            }
            if (additionalMarginWidthInPoints !== undefined && null !== additionalMarginWidthInPoints) {
                localVarQueryParameters['additionalMarginWidthInPoints'] = objectSerializer_1.ObjectSerializer.serialize(additionalMarginWidthInPoints, "number");
            }
            if (compressSvgGraphicsIfAny !== undefined && null !== compressSvgGraphicsIfAny) {
                localVarQueryParameters['compressSvgGraphicsIfAny'] = objectSerializer_1.ObjectSerializer.serialize(compressSvgGraphicsIfAny, "boolean");
            }
            if (convertMarkedContentToLayers !== undefined && null !== convertMarkedContentToLayers) {
                localVarQueryParameters['convertMarkedContentToLayers'] = objectSerializer_1.ObjectSerializer.serialize(convertMarkedContentToLayers, "boolean");
            }
            if (defaultFontName !== undefined && null !== defaultFontName) {
                localVarQueryParameters['defaultFontName'] = objectSerializer_1.ObjectSerializer.serialize(defaultFontName, "string");
            }
            if (documentType !== undefined && null !== documentType) {
                localVarQueryParameters['documentType'] = objectSerializer_1.ObjectSerializer.serialize(documentType, "string");
            }
            if (fixedLayout !== undefined && null !== fixedLayout) {
                localVarQueryParameters['fixedLayout'] = objectSerializer_1.ObjectSerializer.serialize(fixedLayout, "boolean");
            }
            if (imageResolution !== undefined && null !== imageResolution) {
                localVarQueryParameters['imageResolution'] = objectSerializer_1.ObjectSerializer.serialize(imageResolution, "number");
            }
            if (minimalLineWidth !== undefined && null !== minimalLineWidth) {
                localVarQueryParameters['minimalLineWidth'] = objectSerializer_1.ObjectSerializer.serialize(minimalLineWidth, "number");
            }
            if (preventGlyphsGrouping !== undefined && null !== preventGlyphsGrouping) {
                localVarQueryParameters['preventGlyphsGrouping'] = objectSerializer_1.ObjectSerializer.serialize(preventGlyphsGrouping, "boolean");
            }
            if (splitCssIntoPages !== undefined && null !== splitCssIntoPages) {
                localVarQueryParameters['splitCssIntoPages'] = objectSerializer_1.ObjectSerializer.serialize(splitCssIntoPages, "boolean");
            }
            if (splitIntoPages !== undefined && null !== splitIntoPages) {
                localVarQueryParameters['splitIntoPages'] = objectSerializer_1.ObjectSerializer.serialize(splitIntoPages, "boolean");
            }
            if (useZOrder !== undefined && null !== useZOrder) {
                localVarQueryParameters['useZOrder'] = objectSerializer_1.ObjectSerializer.serialize(useZOrder, "boolean");
            }
            if (antialiasingProcessing !== undefined && null !== antialiasingProcessing) {
                localVarQueryParameters['antialiasingProcessing'] = objectSerializer_1.ObjectSerializer.serialize(antialiasingProcessing, "string");
            }
            if (cssClassNamesPrefix !== undefined && null !== cssClassNamesPrefix) {
                localVarQueryParameters['cssClassNamesPrefix'] = objectSerializer_1.ObjectSerializer.serialize(cssClassNamesPrefix, "string");
            }
            if (explicitListOfSavedPages !== undefined && null !== explicitListOfSavedPages) {
                localVarQueryParameters['explicitListOfSavedPages'] = objectSerializer_1.ObjectSerializer.serialize(explicitListOfSavedPages, "Array<number>");
            }
            if (fontEncodingStrategy !== undefined && null !== fontEncodingStrategy) {
                localVarQueryParameters['fontEncodingStrategy'] = objectSerializer_1.ObjectSerializer.serialize(fontEncodingStrategy, "string");
            }
            if (fontSavingMode !== undefined && null !== fontSavingMode) {
                localVarQueryParameters['fontSavingMode'] = objectSerializer_1.ObjectSerializer.serialize(fontSavingMode, "string");
            }
            if (htmlMarkupGenerationMode !== undefined && null !== htmlMarkupGenerationMode) {
                localVarQueryParameters['htmlMarkupGenerationMode'] = objectSerializer_1.ObjectSerializer.serialize(htmlMarkupGenerationMode, "string");
            }
            if (lettersPositioningMethod !== undefined && null !== lettersPositioningMethod) {
                localVarQueryParameters['lettersPositioningMethod'] = objectSerializer_1.ObjectSerializer.serialize(lettersPositioningMethod, "string");
            }
            if (pagesFlowTypeDependsOnViewersScreenSize !== undefined && null !== pagesFlowTypeDependsOnViewersScreenSize) {
                localVarQueryParameters['pagesFlowTypeDependsOnViewersScreenSize'] = objectSerializer_1.ObjectSerializer.serialize(pagesFlowTypeDependsOnViewersScreenSize, "boolean");
            }
            if (partsEmbeddingMode !== undefined && null !== partsEmbeddingMode) {
                localVarQueryParameters['partsEmbeddingMode'] = objectSerializer_1.ObjectSerializer.serialize(partsEmbeddingMode, "string");
            }
            if (rasterImagesSavingMode !== undefined && null !== rasterImagesSavingMode) {
                localVarQueryParameters['rasterImagesSavingMode'] = objectSerializer_1.ObjectSerializer.serialize(rasterImagesSavingMode, "string");
            }
            if (removeEmptyAreasOnTopAndBottom !== undefined && null !== removeEmptyAreasOnTopAndBottom) {
                localVarQueryParameters['removeEmptyAreasOnTopAndBottom'] = objectSerializer_1.ObjectSerializer.serialize(removeEmptyAreasOnTopAndBottom, "boolean");
            }
            if (saveShadowedTextsAsTransparentTexts !== undefined && null !== saveShadowedTextsAsTransparentTexts) {
                localVarQueryParameters['saveShadowedTextsAsTransparentTexts'] = objectSerializer_1.ObjectSerializer.serialize(saveShadowedTextsAsTransparentTexts, "boolean");
            }
            if (saveTransparentTexts !== undefined && null !== saveTransparentTexts) {
                localVarQueryParameters['saveTransparentTexts'] = objectSerializer_1.ObjectSerializer.serialize(saveTransparentTexts, "boolean");
            }
            if (specialFolderForAllImages !== undefined && null !== specialFolderForAllImages) {
                localVarQueryParameters['specialFolderForAllImages'] = objectSerializer_1.ObjectSerializer.serialize(specialFolderForAllImages, "string");
            }
            if (specialFolderForSvgImages !== undefined && null !== specialFolderForSvgImages) {
                localVarQueryParameters['specialFolderForSvgImages'] = objectSerializer_1.ObjectSerializer.serialize(specialFolderForSvgImages, "string");
            }
            if (trySaveTextUnderliningAndStrikeoutingInCss !== undefined && null !== trySaveTextUnderliningAndStrikeoutingInCss) {
                localVarQueryParameters['trySaveTextUnderliningAndStrikeoutingInCss'] = objectSerializer_1.ObjectSerializer.serialize(trySaveTextUnderliningAndStrikeoutingInCss, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (flowLayoutParagraphFullWidth !== undefined && null !== flowLayoutParagraphFullWidth) {
                localVarQueryParameters['flowLayoutParagraphFullWidth'] = objectSerializer_1.ObjectSerializer.serialize(flowLayoutParagraphFullWidth, "boolean");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToLaTeX(name, pagesCount, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/latex'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToLaTeX.');
            }
            if (pagesCount !== undefined && null !== pagesCount) {
                localVarQueryParameters['pagesCount'] = objectSerializer_1.ObjectSerializer.serialize(pagesCount, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToMobiXml(name, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/mobixml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToMobiXml.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToPdfA(name, type, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/pdfa'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToPdfA.');
            }
            if (type === null || type === undefined) {
                throw new Error('Required parameter type was null or undefined when calling getPdfInStorageToPdfA.');
            }
            if (type !== undefined && null !== type) {
                localVarQueryParameters['type'] = objectSerializer_1.ObjectSerializer.serialize(type, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToPptx(name, separateImages, slidesAsImages, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/pptx'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToPptx.');
            }
            if (separateImages !== undefined && null !== separateImages) {
                localVarQueryParameters['separateImages'] = objectSerializer_1.ObjectSerializer.serialize(separateImages, "boolean");
            }
            if (slidesAsImages !== undefined && null !== slidesAsImages) {
                localVarQueryParameters['slidesAsImages'] = objectSerializer_1.ObjectSerializer.serialize(slidesAsImages, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToSvg(name, compressOutputToZipArchive, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/svg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToSvg.');
            }
            if (compressOutputToZipArchive !== undefined && null !== compressOutputToZipArchive) {
                localVarQueryParameters['compressOutputToZipArchive'] = objectSerializer_1.ObjectSerializer.serialize(compressOutputToZipArchive, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToTiff(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/tiff'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToTiff.');
            }
            if (brightness !== undefined && null !== brightness) {
                localVarQueryParameters['brightness'] = objectSerializer_1.ObjectSerializer.serialize(brightness, "number");
            }
            if (compression !== undefined && null !== compression) {
                localVarQueryParameters['compression'] = objectSerializer_1.ObjectSerializer.serialize(compression, "string");
            }
            if (colorDepth !== undefined && null !== colorDepth) {
                localVarQueryParameters['colorDepth'] = objectSerializer_1.ObjectSerializer.serialize(colorDepth, "string");
            }
            if (leftMargin !== undefined && null !== leftMargin) {
                localVarQueryParameters['leftMargin'] = objectSerializer_1.ObjectSerializer.serialize(leftMargin, "number");
            }
            if (rightMargin !== undefined && null !== rightMargin) {
                localVarQueryParameters['rightMargin'] = objectSerializer_1.ObjectSerializer.serialize(rightMargin, "number");
            }
            if (topMargin !== undefined && null !== topMargin) {
                localVarQueryParameters['topMargin'] = objectSerializer_1.ObjectSerializer.serialize(topMargin, "number");
            }
            if (bottomMargin !== undefined && null !== bottomMargin) {
                localVarQueryParameters['bottomMargin'] = objectSerializer_1.ObjectSerializer.serialize(bottomMargin, "number");
            }
            if (orientation !== undefined && null !== orientation) {
                localVarQueryParameters['orientation'] = objectSerializer_1.ObjectSerializer.serialize(orientation, "string");
            }
            if (skipBlankPages !== undefined && null !== skipBlankPages) {
                localVarQueryParameters['skipBlankPages'] = objectSerializer_1.ObjectSerializer.serialize(skipBlankPages, "boolean");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (xResolution !== undefined && null !== xResolution) {
                localVarQueryParameters['xResolution'] = objectSerializer_1.ObjectSerializer.serialize(xResolution, "number");
            }
            if (yResolution !== undefined && null !== yResolution) {
                localVarQueryParameters['yResolution'] = objectSerializer_1.ObjectSerializer.serialize(yResolution, "number");
            }
            if (pageIndex !== undefined && null !== pageIndex) {
                localVarQueryParameters['pageIndex'] = objectSerializer_1.ObjectSerializer.serialize(pageIndex, "number");
            }
            if (pageCount !== undefined && null !== pageCount) {
                localVarQueryParameters['pageCount'] = objectSerializer_1.ObjectSerializer.serialize(pageCount, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToXls(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xls'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToXls.');
            }
            if (insertBlankColumnAtFirst !== undefined && null !== insertBlankColumnAtFirst) {
                localVarQueryParameters['insertBlankColumnAtFirst'] = objectSerializer_1.ObjectSerializer.serialize(insertBlankColumnAtFirst, "boolean");
            }
            if (minimizeTheNumberOfWorksheets !== undefined && null !== minimizeTheNumberOfWorksheets) {
                localVarQueryParameters['minimizeTheNumberOfWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(minimizeTheNumberOfWorksheets, "boolean");
            }
            if (scaleFactor !== undefined && null !== scaleFactor) {
                localVarQueryParameters['scaleFactor'] = objectSerializer_1.ObjectSerializer.serialize(scaleFactor, "number");
            }
            if (uniformWorksheets !== undefined && null !== uniformWorksheets) {
                localVarQueryParameters['uniformWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(uniformWorksheets, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToXlsx(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xlsx'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToXlsx.');
            }
            if (insertBlankColumnAtFirst !== undefined && null !== insertBlankColumnAtFirst) {
                localVarQueryParameters['insertBlankColumnAtFirst'] = objectSerializer_1.ObjectSerializer.serialize(insertBlankColumnAtFirst, "boolean");
            }
            if (minimizeTheNumberOfWorksheets !== undefined && null !== minimizeTheNumberOfWorksheets) {
                localVarQueryParameters['minimizeTheNumberOfWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(minimizeTheNumberOfWorksheets, "boolean");
            }
            if (scaleFactor !== undefined && null !== scaleFactor) {
                localVarQueryParameters['scaleFactor'] = objectSerializer_1.ObjectSerializer.serialize(scaleFactor, "number");
            }
            if (uniformWorksheets !== undefined && null !== uniformWorksheets) {
                localVarQueryParameters['uniformWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(uniformWorksheets, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToXml(name, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToXml.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPdfInStorageToXps(name, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPdfInStorageToXps.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getPolyLineAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/polyline/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPolyLineAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getPolyLineAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolyLineAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPolygonAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/polygon/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPolygonAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getPolygonAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolygonAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPopupAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/popup/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getPopupAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getPopupAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PopupAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getPsInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/ps';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getPsInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getRadioButtonField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/radiobutton/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getRadioButtonField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling getRadioButtonField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RadioButtonFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getRedactionAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/redaction/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getRedactionAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getRedactionAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RedactionAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getScreenAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/screen/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getScreenAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getScreenAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ScreenAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getScreenAnnotationData(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/screen/{annotationId}/data'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getScreenAnnotationData.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getScreenAnnotationData.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getSignatureField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/signature/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getSignatureField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling getSignatureField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SignatureFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getSoundAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/sound/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getSoundAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getSoundAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SoundAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getSoundAnnotationData(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/sound/{annotationId}/data'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getSoundAnnotationData.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getSoundAnnotationData.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getSquareAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/square/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getSquareAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getSquareAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquareAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getSquigglyAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/squiggly/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getSquigglyAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getSquigglyAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquigglyAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getStampAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/stamp/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getStampAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getStampAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StampAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getStampAnnotationData(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/stamp/{annotationId}/data'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getStampAnnotationData.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getStampAnnotationData.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getStrikeOutAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/strikeout/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getStrikeOutAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getStrikeOutAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StrikeOutAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getSvgInStorageToPdf(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/svg';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getSvgInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (adjustPageSize !== undefined && null !== adjustPageSize) {
                localVarQueryParameters['adjustPageSize'] = objectSerializer_1.ObjectSerializer.serialize(adjustPageSize, "boolean");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (isLandscape !== undefined && null !== isLandscape) {
                localVarQueryParameters['isLandscape'] = objectSerializer_1.ObjectSerializer.serialize(isLandscape, "boolean");
            }
            if (marginLeft !== undefined && null !== marginLeft) {
                localVarQueryParameters['marginLeft'] = objectSerializer_1.ObjectSerializer.serialize(marginLeft, "number");
            }
            if (marginBottom !== undefined && null !== marginBottom) {
                localVarQueryParameters['marginBottom'] = objectSerializer_1.ObjectSerializer.serialize(marginBottom, "number");
            }
            if (marginRight !== undefined && null !== marginRight) {
                localVarQueryParameters['marginRight'] = objectSerializer_1.ObjectSerializer.serialize(marginRight, "number");
            }
            if (marginTop !== undefined && null !== marginTop) {
                localVarQueryParameters['marginTop'] = objectSerializer_1.ObjectSerializer.serialize(marginTop, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getTable(name, tableId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/tables/{tableId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'tableId' + '}', encodeURIComponent(String(tableId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getTable.');
            }
            if (tableId === null || tableId === undefined) {
                throw new Error('Required parameter tableId was null or undefined when calling getTable.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TableRecognizedResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getText(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getText.');
            }
            if (LLX === null || LLX === undefined) {
                throw new Error('Required parameter LLX was null or undefined when calling getText.');
            }
            if (LLY === null || LLY === undefined) {
                throw new Error('Required parameter LLY was null or undefined when calling getText.');
            }
            if (URX === null || URX === undefined) {
                throw new Error('Required parameter URX was null or undefined when calling getText.');
            }
            if (URY === null || URY === undefined) {
                throw new Error('Required parameter URY was null or undefined when calling getText.');
            }
            if (format !== undefined && null !== format) {
                localVarQueryParameters['format'] = objectSerializer_1.ObjectSerializer.serialize(format, "Array<string>");
            }
            if (regex !== undefined && null !== regex) {
                localVarQueryParameters['regex'] = objectSerializer_1.ObjectSerializer.serialize(regex, "string");
            }
            if (splitRects !== undefined && null !== splitRects) {
                localVarQueryParameters['splitRects'] = objectSerializer_1.ObjectSerializer.serialize(splitRects, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (LLX !== undefined && null !== LLX) {
                localVarQueryParameters['LLX'] = objectSerializer_1.ObjectSerializer.serialize(LLX, "number");
            }
            if (LLY !== undefined && null !== LLY) {
                localVarQueryParameters['LLY'] = objectSerializer_1.ObjectSerializer.serialize(LLY, "number");
            }
            if (URX !== undefined && null !== URX) {
                localVarQueryParameters['URX'] = objectSerializer_1.ObjectSerializer.serialize(URX, "number");
            }
            if (URY !== undefined && null !== URY) {
                localVarQueryParameters['URY'] = objectSerializer_1.ObjectSerializer.serialize(URY, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextRectsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getTextAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/text/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getTextAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getTextAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getTextBoxField(name, fieldName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/textbox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getTextBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling getTextBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getUnderlineAnnotation(name, annotationId, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/underline/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getUnderlineAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling getUnderlineAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "UnderlineAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getVerifySignature(name, signName, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/verifySignature'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getVerifySignature.');
            }
            if (signName === null || signName === undefined) {
                throw new Error('Required parameter signName was null or undefined when calling getVerifySignature.');
            }
            if (signName !== undefined && null !== signName) {
                localVarQueryParameters['signName'] = objectSerializer_1.ObjectSerializer.serialize(signName, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SignatureVerifyResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getWebInStorageToPdf(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/web';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (url === null || url === undefined) {
                throw new Error('Required parameter url was null or undefined when calling getWebInStorageToPdf.');
            }
            if (url !== undefined && null !== url) {
                localVarQueryParameters['url'] = objectSerializer_1.ObjectSerializer.serialize(url, "string");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (isLandscape !== undefined && null !== isLandscape) {
                localVarQueryParameters['isLandscape'] = objectSerializer_1.ObjectSerializer.serialize(isLandscape, "boolean");
            }
            if (marginLeft !== undefined && null !== marginLeft) {
                localVarQueryParameters['marginLeft'] = objectSerializer_1.ObjectSerializer.serialize(marginLeft, "number");
            }
            if (marginBottom !== undefined && null !== marginBottom) {
                localVarQueryParameters['marginBottom'] = objectSerializer_1.ObjectSerializer.serialize(marginBottom, "number");
            }
            if (marginRight !== undefined && null !== marginRight) {
                localVarQueryParameters['marginRight'] = objectSerializer_1.ObjectSerializer.serialize(marginRight, "number");
            }
            if (marginTop !== undefined && null !== marginTop) {
                localVarQueryParameters['marginTop'] = objectSerializer_1.ObjectSerializer.serialize(marginTop, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getWordsPerPage(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/wordCount'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getWordsPerPage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "WordCountResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    getXfaPdfInStorageToAcroForm(name, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xfatoacroform'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling getXfaPdfInStorageToAcroForm.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getXmlInStorageToPdf(srcPath, xslFilePath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/xml';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getXmlInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (xslFilePath !== undefined && null !== xslFilePath) {
                localVarQueryParameters['xslFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xslFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getXpsInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/xps';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getXpsInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    getXslFoInStorageToPdf(srcPath, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/create/xslfo';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling getXslFoInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "Buffer");
            return Promise.resolve({ body: result, response });
        });
    }
    moveFile(srcPath, destPath, srcStorageName, destStorageName, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/file/move/{srcPath}'
                .replace('{' + 'srcPath' + '}', encodeURIComponent(String(srcPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling moveFile.');
            }
            if (destPath === null || destPath === undefined) {
                throw new Error('Required parameter destPath was null or undefined when calling moveFile.');
            }
            if (destPath !== undefined && null !== destPath) {
                localVarQueryParameters['destPath'] = objectSerializer_1.ObjectSerializer.serialize(destPath, "string");
            }
            if (srcStorageName !== undefined && null !== srcStorageName) {
                localVarQueryParameters['srcStorageName'] = objectSerializer_1.ObjectSerializer.serialize(srcStorageName, "string");
            }
            if (destStorageName !== undefined && null !== destStorageName) {
                localVarQueryParameters['destStorageName'] = objectSerializer_1.ObjectSerializer.serialize(destStorageName, "string");
            }
            if (versionId !== undefined && null !== versionId) {
                localVarQueryParameters['versionId'] = objectSerializer_1.ObjectSerializer.serialize(versionId, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "");
            return Promise.resolve({ body: result, response });
        });
    }
    moveFolder(srcPath, destPath, srcStorageName, destStorageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/folder/move/{srcPath}'
                .replace('{' + 'srcPath' + '}', encodeURIComponent(String(srcPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling moveFolder.');
            }
            if (destPath === null || destPath === undefined) {
                throw new Error('Required parameter destPath was null or undefined when calling moveFolder.');
            }
            if (destPath !== undefined && null !== destPath) {
                localVarQueryParameters['destPath'] = objectSerializer_1.ObjectSerializer.serialize(destPath, "string");
            }
            if (srcStorageName !== undefined && null !== srcStorageName) {
                localVarQueryParameters['srcStorageName'] = objectSerializer_1.ObjectSerializer.serialize(srcStorageName, "string");
            }
            if (destStorageName !== undefined && null !== destStorageName) {
                localVarQueryParameters['destStorageName'] = objectSerializer_1.ObjectSerializer.serialize(destStorageName, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "");
            return Promise.resolve({ body: result, response });
        });
    }
    objectExists(path, storageName, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/exist/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling objectExists.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            if (versionId !== undefined && null !== versionId) {
                localVarQueryParameters['versionId'] = objectSerializer_1.ObjectSerializer.serialize(versionId, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ObjectExist");
            return Promise.resolve({ body: result, response });
        });
    }
    postAppendDocument(name, appendFile, startPage, endPage, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/appendDocument'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postAppendDocument.');
            }
            if (appendFile === null || appendFile === undefined) {
                throw new Error('Required parameter appendFile was null or undefined when calling postAppendDocument.');
            }
            if (appendFile !== undefined && null !== appendFile) {
                localVarQueryParameters['appendFile'] = objectSerializer_1.ObjectSerializer.serialize(appendFile, "string");
            }
            if (startPage !== undefined && null !== startPage) {
                localVarQueryParameters['startPage'] = objectSerializer_1.ObjectSerializer.serialize(startPage, "number");
            }
            if (endPage !== undefined && null !== endPage) {
                localVarQueryParameters['endPage'] = objectSerializer_1.ObjectSerializer.serialize(endPage, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postBookmark(name, bookmarkPath, bookmarks, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/bookmarks/bookmark/{bookmarkPath}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'bookmarkPath' + '}', encodeURIComponent(String(bookmarkPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postBookmark.');
            }
            if (bookmarkPath === null || bookmarkPath === undefined) {
                throw new Error('Required parameter bookmarkPath was null or undefined when calling postBookmark.');
            }
            if (bookmarks === null || bookmarks === undefined) {
                throw new Error('Required parameter bookmarks was null or undefined when calling postBookmark.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(bookmarks, "Array<Bookmark>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarksResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postChangePasswordDocumentInStorage(name, ownerPassword, newUserPassword, newOwnerPassword, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/changepassword'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postChangePasswordDocumentInStorage.');
            }
            if (ownerPassword === null || ownerPassword === undefined) {
                throw new Error('Required parameter ownerPassword was null or undefined when calling postChangePasswordDocumentInStorage.');
            }
            if (newUserPassword === null || newUserPassword === undefined) {
                throw new Error('Required parameter newUserPassword was null or undefined when calling postChangePasswordDocumentInStorage.');
            }
            if (newOwnerPassword === null || newOwnerPassword === undefined) {
                throw new Error('Required parameter newOwnerPassword was null or undefined when calling postChangePasswordDocumentInStorage.');
            }
            if (ownerPassword !== undefined && null !== ownerPassword) {
                localVarQueryParameters['ownerPassword'] = objectSerializer_1.ObjectSerializer.serialize(ownerPassword, "string");
            }
            if (newUserPassword !== undefined && null !== newUserPassword) {
                localVarQueryParameters['newUserPassword'] = objectSerializer_1.ObjectSerializer.serialize(newUserPassword, "string");
            }
            if (newOwnerPassword !== undefined && null !== newOwnerPassword) {
                localVarQueryParameters['newOwnerPassword'] = objectSerializer_1.ObjectSerializer.serialize(newOwnerPassword, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postCheckBoxFields(name, fields, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/checkbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postCheckBoxFields.');
            }
            if (fields === null || fields === undefined) {
                throw new Error('Required parameter fields was null or undefined when calling postCheckBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(fields, "Array<CheckBoxField>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postComboBoxFields(name, fields, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/combobox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postComboBoxFields.');
            }
            if (fields === null || fields === undefined) {
                throw new Error('Required parameter fields was null or undefined when calling postComboBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(fields, "Array<ComboBoxField>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postCreateDocument(name, documentConfig, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postCreateDocument.');
            }
            if (documentConfig === null || documentConfig === undefined) {
                throw new Error('Required parameter documentConfig was null or undefined when calling postCreateDocument.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(documentConfig, "DocumentConfig")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postCreateField(name, page, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postCreateField.');
            }
            if (page === null || page === undefined) {
                throw new Error('Required parameter page was null or undefined when calling postCreateField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling postCreateField.');
            }
            if (page !== undefined && null !== page) {
                localVarQueryParameters['page'] = objectSerializer_1.ObjectSerializer.serialize(page, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "Field")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postDecryptDocumentInStorage(name, password, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/decrypt'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postDecryptDocumentInStorage.');
            }
            if (password === null || password === undefined) {
                throw new Error('Required parameter password was null or undefined when calling postDecryptDocumentInStorage.');
            }
            if (password !== undefined && null !== password) {
                localVarQueryParameters['password'] = objectSerializer_1.ObjectSerializer.serialize(password, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postDocumentImageFooter(name, imageFooter, startPageNumber, endPageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/footer/image'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postDocumentImageFooter.');
            }
            if (imageFooter === null || imageFooter === undefined) {
                throw new Error('Required parameter imageFooter was null or undefined when calling postDocumentImageFooter.');
            }
            if (startPageNumber !== undefined && null !== startPageNumber) {
                localVarQueryParameters['startPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(startPageNumber, "number");
            }
            if (endPageNumber !== undefined && null !== endPageNumber) {
                localVarQueryParameters['endPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(endPageNumber, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(imageFooter, "ImageFooter")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postDocumentImageHeader(name, imageHeader, startPageNumber, endPageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/header/image'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postDocumentImageHeader.');
            }
            if (imageHeader === null || imageHeader === undefined) {
                throw new Error('Required parameter imageHeader was null or undefined when calling postDocumentImageHeader.');
            }
            if (startPageNumber !== undefined && null !== startPageNumber) {
                localVarQueryParameters['startPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(startPageNumber, "number");
            }
            if (endPageNumber !== undefined && null !== endPageNumber) {
                localVarQueryParameters['endPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(endPageNumber, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(imageHeader, "ImageHeader")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postDocumentPageNumberStamps(name, stamp, startPageNumber, endPageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/stamps/pagenumber'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postDocumentPageNumberStamps.');
            }
            if (stamp === null || stamp === undefined) {
                throw new Error('Required parameter stamp was null or undefined when calling postDocumentPageNumberStamps.');
            }
            if (startPageNumber !== undefined && null !== startPageNumber) {
                localVarQueryParameters['startPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(startPageNumber, "number");
            }
            if (endPageNumber !== undefined && null !== endPageNumber) {
                localVarQueryParameters['endPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(endPageNumber, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(stamp, "PageNumberStamp")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postDocumentTextFooter(name, textFooter, startPageNumber, endPageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/footer/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postDocumentTextFooter.');
            }
            if (textFooter === null || textFooter === undefined) {
                throw new Error('Required parameter textFooter was null or undefined when calling postDocumentTextFooter.');
            }
            if (startPageNumber !== undefined && null !== startPageNumber) {
                localVarQueryParameters['startPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(startPageNumber, "number");
            }
            if (endPageNumber !== undefined && null !== endPageNumber) {
                localVarQueryParameters['endPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(endPageNumber, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(textFooter, "TextFooter")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postDocumentTextHeader(name, textHeader, startPageNumber, endPageNumber, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/header/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postDocumentTextHeader.');
            }
            if (textHeader === null || textHeader === undefined) {
                throw new Error('Required parameter textHeader was null or undefined when calling postDocumentTextHeader.');
            }
            if (startPageNumber !== undefined && null !== startPageNumber) {
                localVarQueryParameters['startPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(startPageNumber, "number");
            }
            if (endPageNumber !== undefined && null !== endPageNumber) {
                localVarQueryParameters['endPageNumber'] = objectSerializer_1.ObjectSerializer.serialize(endPageNumber, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(textHeader, "TextHeader")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postDocumentTextReplace(name, textReplace, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/text/replace'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postDocumentTextReplace.');
            }
            if (textReplace === null || textReplace === undefined) {
                throw new Error('Required parameter textReplace was null or undefined when calling postDocumentTextReplace.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(textReplace, "TextReplaceListRequest")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextReplaceResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postEncryptDocumentInStorage(name, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/encrypt'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postEncryptDocumentInStorage.');
            }
            if (userPassword === null || userPassword === undefined) {
                throw new Error('Required parameter userPassword was null or undefined when calling postEncryptDocumentInStorage.');
            }
            if (ownerPassword === null || ownerPassword === undefined) {
                throw new Error('Required parameter ownerPassword was null or undefined when calling postEncryptDocumentInStorage.');
            }
            if (cryptoAlgorithm === null || cryptoAlgorithm === undefined) {
                throw new Error('Required parameter cryptoAlgorithm was null or undefined when calling postEncryptDocumentInStorage.');
            }
            if (userPassword !== undefined && null !== userPassword) {
                localVarQueryParameters['userPassword'] = objectSerializer_1.ObjectSerializer.serialize(userPassword, "string");
            }
            if (ownerPassword !== undefined && null !== ownerPassword) {
                localVarQueryParameters['ownerPassword'] = objectSerializer_1.ObjectSerializer.serialize(ownerPassword, "string");
            }
            if (cryptoAlgorithm !== undefined && null !== cryptoAlgorithm) {
                localVarQueryParameters['cryptoAlgorithm'] = objectSerializer_1.ObjectSerializer.serialize(cryptoAlgorithm, "string");
            }
            if (permissionsFlags !== undefined && null !== permissionsFlags) {
                localVarQueryParameters['permissionsFlags'] = objectSerializer_1.ObjectSerializer.serialize(permissionsFlags, "Array<PermissionsFlags>");
            }
            if (usePdf20 !== undefined && null !== usePdf20) {
                localVarQueryParameters['usePdf20'] = objectSerializer_1.ObjectSerializer.serialize(usePdf20, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postFlattenDocument(name, updateAppearances, callEvents, hideButtons, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/flatten'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postFlattenDocument.');
            }
            if (updateAppearances !== undefined && null !== updateAppearances) {
                localVarQueryParameters['updateAppearances'] = objectSerializer_1.ObjectSerializer.serialize(updateAppearances, "boolean");
            }
            if (callEvents !== undefined && null !== callEvents) {
                localVarQueryParameters['callEvents'] = objectSerializer_1.ObjectSerializer.serialize(callEvents, "boolean");
            }
            if (hideButtons !== undefined && null !== hideButtons) {
                localVarQueryParameters['hideButtons'] = objectSerializer_1.ObjectSerializer.serialize(hideButtons, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postImportFieldsFromFdf(name, storage, folder, fdfData) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/fdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postImportFieldsFromFdf.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (fdfData !== undefined) {
                localVarFormParams['fdfData'] = fdfData;
                fileData = fdfData;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postImportFieldsFromXfdf(name, storage, folder, xfdfData) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/xfdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postImportFieldsFromXfdf.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (xfdfData !== undefined) {
                localVarFormParams['xfdfData'] = xfdfData;
                fileData = xfdfData;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postImportFieldsFromXml(name, storage, folder, xmlData) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postImportFieldsFromXml.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (xmlData !== undefined) {
                localVarFormParams['xmlData'] = xmlData;
                fileData = xmlData;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postInsertImage(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/images'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postInsertImage.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postInsertImage.');
            }
            if (llx === null || llx === undefined) {
                throw new Error('Required parameter llx was null or undefined when calling postInsertImage.');
            }
            if (lly === null || lly === undefined) {
                throw new Error('Required parameter lly was null or undefined when calling postInsertImage.');
            }
            if (urx === null || urx === undefined) {
                throw new Error('Required parameter urx was null or undefined when calling postInsertImage.');
            }
            if (ury === null || ury === undefined) {
                throw new Error('Required parameter ury was null or undefined when calling postInsertImage.');
            }
            if (llx !== undefined && null !== llx) {
                localVarQueryParameters['llx'] = objectSerializer_1.ObjectSerializer.serialize(llx, "number");
            }
            if (lly !== undefined && null !== lly) {
                localVarQueryParameters['lly'] = objectSerializer_1.ObjectSerializer.serialize(lly, "number");
            }
            if (urx !== undefined && null !== urx) {
                localVarQueryParameters['urx'] = objectSerializer_1.ObjectSerializer.serialize(urx, "number");
            }
            if (ury !== undefined && null !== ury) {
                localVarQueryParameters['ury'] = objectSerializer_1.ObjectSerializer.serialize(ury, "number");
            }
            if (imageFilePath !== undefined && null !== imageFilePath) {
                localVarQueryParameters['imageFilePath'] = objectSerializer_1.ObjectSerializer.serialize(imageFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (image !== undefined) {
                localVarFormParams['image'] = image;
                fileData = image;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postListBoxFields(name, fields, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/listbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postListBoxFields.');
            }
            if (fields === null || fields === undefined) {
                throw new Error('Required parameter fields was null or undefined when calling postListBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(fields, "Array<ListBoxField>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postMovePage(name, pageNumber, newIndex, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/movePage'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postMovePage.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postMovePage.');
            }
            if (newIndex === null || newIndex === undefined) {
                throw new Error('Required parameter newIndex was null or undefined when calling postMovePage.');
            }
            if (newIndex !== undefined && null !== newIndex) {
                localVarQueryParameters['newIndex'] = objectSerializer_1.ObjectSerializer.serialize(newIndex, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postOptimizeDocument(name, options, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/optimize'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postOptimizeDocument.');
            }
            if (options === null || options === undefined) {
                throw new Error('Required parameter options was null or undefined when calling postOptimizeDocument.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(options, "OptimizeOptions")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageCaretAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/caret'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageCaretAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageCaretAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageCaretAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<CaretAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageCertify(name, pageNumber, sign, docMdpAccessPermissionType, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/certify'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageCertify.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageCertify.');
            }
            if (sign === null || sign === undefined) {
                throw new Error('Required parameter sign was null or undefined when calling postPageCertify.');
            }
            if (docMdpAccessPermissionType === null || docMdpAccessPermissionType === undefined) {
                throw new Error('Required parameter docMdpAccessPermissionType was null or undefined when calling postPageCertify.');
            }
            if (docMdpAccessPermissionType !== undefined && null !== docMdpAccessPermissionType) {
                localVarQueryParameters['docMdpAccessPermissionType'] = objectSerializer_1.ObjectSerializer.serialize(docMdpAccessPermissionType, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(sign, "Signature")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageCircleAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/circle'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageCircleAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageCircleAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageCircleAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<CircleAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageFileAttachmentAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/fileattachment'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageFileAttachmentAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageFileAttachmentAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageFileAttachmentAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<FileAttachmentAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageFreeTextAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/freetext'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageFreeTextAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageFreeTextAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageFreeTextAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<FreeTextAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageHighlightAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/highlight'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageHighlightAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageHighlightAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageHighlightAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<HighlightAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageImageStamps(name, pageNumber, stamps, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/stamps/image'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageImageStamps.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageImageStamps.');
            }
            if (stamps === null || stamps === undefined) {
                throw new Error('Required parameter stamps was null or undefined when calling postPageImageStamps.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(stamps, "Array<ImageStamp>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageInkAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/ink'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageInkAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageInkAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageInkAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<InkAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageLineAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/line'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageLineAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageLineAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageLineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<LineAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageLinkAnnotations(name, pageNumber, links, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/links'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageLinkAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageLinkAnnotations.');
            }
            if (links === null || links === undefined) {
                throw new Error('Required parameter links was null or undefined when calling postPageLinkAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(links, "Array<LinkAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageMovieAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/movie'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageMovieAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageMovieAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageMovieAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<MovieAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPagePdfPageStamps(name, pageNumber, stamps, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/stamps/pdfpage'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPagePdfPageStamps.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPagePdfPageStamps.');
            }
            if (stamps === null || stamps === undefined) {
                throw new Error('Required parameter stamps was null or undefined when calling postPagePdfPageStamps.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(stamps, "Array<PdfPageStamp>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPagePolyLineAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/polyline'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPagePolyLineAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPagePolyLineAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPagePolyLineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<PolyLineAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPagePolygonAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/polygon'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPagePolygonAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPagePolygonAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPagePolygonAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<PolygonAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageRedactionAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/redaction'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageRedactionAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageRedactionAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageRedactionAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<RedactionAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageScreenAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/screen'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageScreenAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageScreenAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageScreenAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<ScreenAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageSoundAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/sound'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageSoundAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageSoundAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageSoundAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<SoundAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageSquareAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/square'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageSquareAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageSquareAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageSquareAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<SquareAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageSquigglyAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/squiggly'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageSquigglyAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageSquigglyAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageSquigglyAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<SquigglyAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageStampAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/stamp'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageStampAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageStampAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageStampAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<StampAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageStrikeOutAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/strikeout'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageStrikeOutAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageStrikeOutAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageStrikeOutAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<StrikeOutAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageTables(name, pageNumber, tables, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/tables'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageTables.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageTables.');
            }
            if (tables === null || tables === undefined) {
                throw new Error('Required parameter tables was null or undefined when calling postPageTables.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(tables, "Array<Table>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageTextAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageTextAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageTextAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageTextAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<TextAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageTextReplace(name, pageNumber, textReplaceListRequest, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/text/replace'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageTextReplace.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageTextReplace.');
            }
            if (textReplaceListRequest === null || textReplaceListRequest === undefined) {
                throw new Error('Required parameter textReplaceListRequest was null or undefined when calling postPageTextReplace.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(textReplaceListRequest, "TextReplaceListRequest")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextReplaceResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageTextStamps(name, pageNumber, stamps, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/stamps/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageTextStamps.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageTextStamps.');
            }
            if (stamps === null || stamps === undefined) {
                throw new Error('Required parameter stamps was null or undefined when calling postPageTextStamps.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(stamps, "Array<TextStamp>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPageUnderlineAnnotations(name, pageNumber, annotations, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/annotations/underline'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPageUnderlineAnnotations.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postPageUnderlineAnnotations.');
            }
            if (annotations === null || annotations === undefined) {
                throw new Error('Required parameter annotations was null or undefined when calling postPageUnderlineAnnotations.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotations, "Array<UnderlineAnnotation>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postPopupAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/{annotationId}/popup'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postPopupAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling postPopupAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling postPopupAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "PopupAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postRadioButtonFields(name, fields, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/radiobutton'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postRadioButtonFields.');
            }
            if (fields === null || fields === undefined) {
                throw new Error('Required parameter fields was null or undefined when calling postRadioButtonFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(fields, "Array<RadioButtonField>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postSignDocument(name, sign, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/sign'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postSignDocument.');
            }
            if (sign === null || sign === undefined) {
                throw new Error('Required parameter sign was null or undefined when calling postSignDocument.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(sign, "Signature")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postSignPage(name, pageNumber, sign, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/sign'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postSignPage.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling postSignPage.');
            }
            if (sign === null || sign === undefined) {
                throw new Error('Required parameter sign was null or undefined when calling postSignPage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(sign, "Signature")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postSignatureField(name, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/signature'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postSignatureField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling postSignatureField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "SignatureField")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postSplitDocument(name, format, from, to, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/split'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postSplitDocument.');
            }
            if (format !== undefined && null !== format) {
                localVarQueryParameters['format'] = objectSerializer_1.ObjectSerializer.serialize(format, "string");
            }
            if (from !== undefined && null !== from) {
                localVarQueryParameters['from'] = objectSerializer_1.ObjectSerializer.serialize(from, "number");
            }
            if (to !== undefined && null !== to) {
                localVarQueryParameters['to'] = objectSerializer_1.ObjectSerializer.serialize(to, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SplitResultResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    postTextBoxFields(name, fields, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/textbox'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling postTextBoxFields.');
            }
            if (fields === null || fields === undefined) {
                throw new Error('Required parameter fields was null or undefined when calling postTextBoxFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(fields, "Array<TextBoxField>")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putAddNewPage(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putAddNewPage.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPagesResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putAddText(name, pageNumber, paragraph, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/text'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putAddText.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putAddText.');
            }
            if (paragraph === null || paragraph === undefined) {
                throw new Error('Required parameter paragraph was null or undefined when calling putAddText.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(paragraph, "Paragraph")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putAnnotationsFlatten(name, startPage, endPage, annotationTypes, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/flatten'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putAnnotationsFlatten.');
            }
            if (startPage !== undefined && null !== startPage) {
                localVarQueryParameters['startPage'] = objectSerializer_1.ObjectSerializer.serialize(startPage, "number");
            }
            if (endPage !== undefined && null !== endPage) {
                localVarQueryParameters['endPage'] = objectSerializer_1.ObjectSerializer.serialize(endPage, "number");
            }
            if (annotationTypes !== undefined && null !== annotationTypes) {
                localVarQueryParameters['annotationTypes'] = objectSerializer_1.ObjectSerializer.serialize(annotationTypes, "Array<AnnotationType>");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putBookmark(name, bookmarkPath, bookmark, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/bookmarks/bookmark/{bookmarkPath}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'bookmarkPath' + '}', encodeURIComponent(String(bookmarkPath)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putBookmark.');
            }
            if (bookmarkPath === null || bookmarkPath === undefined) {
                throw new Error('Required parameter bookmarkPath was null or undefined when calling putBookmark.');
            }
            if (bookmark === null || bookmark === undefined) {
                throw new Error('Required parameter bookmark was null or undefined when calling putBookmark.');
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(bookmark, "Bookmark")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "BookmarkResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putCaretAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/caret/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putCaretAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putCaretAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putCaretAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "CaretAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CaretAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putChangePasswordDocument(outPath, ownerPassword, newUserPassword, newOwnerPassword, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/changepassword';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putChangePasswordDocument.');
            }
            if (ownerPassword === null || ownerPassword === undefined) {
                throw new Error('Required parameter ownerPassword was null or undefined when calling putChangePasswordDocument.');
            }
            if (newUserPassword === null || newUserPassword === undefined) {
                throw new Error('Required parameter newUserPassword was null or undefined when calling putChangePasswordDocument.');
            }
            if (newOwnerPassword === null || newOwnerPassword === undefined) {
                throw new Error('Required parameter newOwnerPassword was null or undefined when calling putChangePasswordDocument.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (ownerPassword !== undefined && null !== ownerPassword) {
                localVarQueryParameters['ownerPassword'] = objectSerializer_1.ObjectSerializer.serialize(ownerPassword, "string");
            }
            if (newUserPassword !== undefined && null !== newUserPassword) {
                localVarQueryParameters['newUserPassword'] = objectSerializer_1.ObjectSerializer.serialize(newUserPassword, "string");
            }
            if (newOwnerPassword !== undefined && null !== newOwnerPassword) {
                localVarQueryParameters['newOwnerPassword'] = objectSerializer_1.ObjectSerializer.serialize(newOwnerPassword, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putCheckBoxField(name, fieldName, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/checkbox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putCheckBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling putCheckBoxField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling putCheckBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "CheckBoxField")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CheckBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putCircleAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/circle/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putCircleAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putCircleAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putCircleAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "CircleAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "CircleAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putComboBoxField(name, fieldName, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/combobox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putComboBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling putComboBoxField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling putComboBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "ComboBoxField")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ComboBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putCreateDocument(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putCreateDocument.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putDecryptDocument(outPath, password, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/decrypt';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putDecryptDocument.');
            }
            if (password === null || password === undefined) {
                throw new Error('Required parameter password was null or undefined when calling putDecryptDocument.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (password !== undefined && null !== password) {
                localVarQueryParameters['password'] = objectSerializer_1.ObjectSerializer.serialize(password, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putDocumentDisplayProperties(name, displayProperties, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/displayproperties'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putDocumentDisplayProperties.');
            }
            if (displayProperties === null || displayProperties === undefined) {
                throw new Error('Required parameter displayProperties was null or undefined when calling putDocumentDisplayProperties.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(displayProperties, "DisplayProperties")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DisplayPropertiesResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putEncryptDocument(outPath, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/encrypt';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putEncryptDocument.');
            }
            if (userPassword === null || userPassword === undefined) {
                throw new Error('Required parameter userPassword was null or undefined when calling putEncryptDocument.');
            }
            if (ownerPassword === null || ownerPassword === undefined) {
                throw new Error('Required parameter ownerPassword was null or undefined when calling putEncryptDocument.');
            }
            if (cryptoAlgorithm === null || cryptoAlgorithm === undefined) {
                throw new Error('Required parameter cryptoAlgorithm was null or undefined when calling putEncryptDocument.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (userPassword !== undefined && null !== userPassword) {
                localVarQueryParameters['userPassword'] = objectSerializer_1.ObjectSerializer.serialize(userPassword, "string");
            }
            if (ownerPassword !== undefined && null !== ownerPassword) {
                localVarQueryParameters['ownerPassword'] = objectSerializer_1.ObjectSerializer.serialize(ownerPassword, "string");
            }
            if (cryptoAlgorithm !== undefined && null !== cryptoAlgorithm) {
                localVarQueryParameters['cryptoAlgorithm'] = objectSerializer_1.ObjectSerializer.serialize(cryptoAlgorithm, "string");
            }
            if (permissionsFlags !== undefined && null !== permissionsFlags) {
                localVarQueryParameters['permissionsFlags'] = objectSerializer_1.ObjectSerializer.serialize(permissionsFlags, "Array<PermissionsFlags>");
            }
            if (usePdf20 !== undefined && null !== usePdf20) {
                localVarQueryParameters['usePdf20'] = objectSerializer_1.ObjectSerializer.serialize(usePdf20, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putEpubInStorageToPdf(name, srcPath, storage, dstFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/epub'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putEpubInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putEpubInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putExportFieldsFromPdfToFdfInStorage(name, fdfOutputFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/export/fdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putExportFieldsFromPdfToFdfInStorage.');
            }
            if (fdfOutputFilePath === null || fdfOutputFilePath === undefined) {
                throw new Error('Required parameter fdfOutputFilePath was null or undefined when calling putExportFieldsFromPdfToFdfInStorage.');
            }
            if (fdfOutputFilePath !== undefined && null !== fdfOutputFilePath) {
                localVarQueryParameters['fdfOutputFilePath'] = objectSerializer_1.ObjectSerializer.serialize(fdfOutputFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putExportFieldsFromPdfToXfdfInStorage(name, xfdfOutputFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/export/xfdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putExportFieldsFromPdfToXfdfInStorage.');
            }
            if (xfdfOutputFilePath === null || xfdfOutputFilePath === undefined) {
                throw new Error('Required parameter xfdfOutputFilePath was null or undefined when calling putExportFieldsFromPdfToXfdfInStorage.');
            }
            if (xfdfOutputFilePath !== undefined && null !== xfdfOutputFilePath) {
                localVarQueryParameters['xfdfOutputFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xfdfOutputFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putExportFieldsFromPdfToXmlInStorage(name, xmlOutputFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/export/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putExportFieldsFromPdfToXmlInStorage.');
            }
            if (xmlOutputFilePath === null || xmlOutputFilePath === undefined) {
                throw new Error('Required parameter xmlOutputFilePath was null or undefined when calling putExportFieldsFromPdfToXmlInStorage.');
            }
            if (xmlOutputFilePath !== undefined && null !== xmlOutputFilePath) {
                localVarQueryParameters['xmlOutputFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xmlOutputFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putFieldsFlatten(name, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/flatten'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putFieldsFlatten.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putFileAttachmentAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/fileattachment/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putFileAttachmentAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putFileAttachmentAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putFileAttachmentAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "FileAttachmentAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FileAttachmentAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putFileAttachmentAnnotationDataExtract(name, annotationId, outFolder, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/fileattachment/{annotationId}/data/extract'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putFileAttachmentAnnotationDataExtract.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putFileAttachmentAnnotationDataExtract.');
            }
            if (outFolder !== undefined && null !== outFolder) {
                localVarQueryParameters['outFolder'] = objectSerializer_1.ObjectSerializer.serialize(outFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putFreeTextAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/freetext/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putFreeTextAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putFreeTextAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putFreeTextAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "FreeTextAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FreeTextAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putHighlightAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/highlight/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putHighlightAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putHighlightAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putHighlightAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "HighlightAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "HighlightAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putHtmlInStorageToPdf(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/html'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putHtmlInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putHtmlInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (htmlFileName !== undefined && null !== htmlFileName) {
                localVarQueryParameters['htmlFileName'] = objectSerializer_1.ObjectSerializer.serialize(htmlFileName, "string");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (isLandscape !== undefined && null !== isLandscape) {
                localVarQueryParameters['isLandscape'] = objectSerializer_1.ObjectSerializer.serialize(isLandscape, "boolean");
            }
            if (marginLeft !== undefined && null !== marginLeft) {
                localVarQueryParameters['marginLeft'] = objectSerializer_1.ObjectSerializer.serialize(marginLeft, "number");
            }
            if (marginBottom !== undefined && null !== marginBottom) {
                localVarQueryParameters['marginBottom'] = objectSerializer_1.ObjectSerializer.serialize(marginBottom, "number");
            }
            if (marginRight !== undefined && null !== marginRight) {
                localVarQueryParameters['marginRight'] = objectSerializer_1.ObjectSerializer.serialize(marginRight, "number");
            }
            if (marginTop !== undefined && null !== marginTop) {
                localVarQueryParameters['marginTop'] = objectSerializer_1.ObjectSerializer.serialize(marginTop, "number");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImageExtractAsGif(name, imageId, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/gif'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImageExtractAsGif.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling putImageExtractAsGif.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImageExtractAsJpeg(name, imageId, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/jpeg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImageExtractAsJpeg.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling putImageExtractAsJpeg.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImageExtractAsPng(name, imageId, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/png'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImageExtractAsPng.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling putImageExtractAsPng.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImageExtractAsTiff(name, imageId, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}/extract/tiff'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImageExtractAsTiff.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling putImageExtractAsTiff.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImageInStorageToPdf(name, imageTemplates, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/images'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImageInStorageToPdf.');
            }
            if (imageTemplates === null || imageTemplates === undefined) {
                throw new Error('Required parameter imageTemplates was null or undefined when calling putImageInStorageToPdf.');
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(imageTemplates, "ImageTemplatesRequest")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImagesExtractAsGif(name, pageNumber, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/images/extract/gif'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImagesExtractAsGif.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putImagesExtractAsGif.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImagesExtractAsJpeg(name, pageNumber, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/images/extract/jpeg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImagesExtractAsJpeg.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putImagesExtractAsJpeg.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImagesExtractAsPng(name, pageNumber, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/images/extract/png'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImagesExtractAsPng.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putImagesExtractAsPng.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImagesExtractAsTiff(name, pageNumber, width, height, storage, folder, destFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/images/extract/tiff'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImagesExtractAsTiff.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putImagesExtractAsTiff.');
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (destFolder !== undefined && null !== destFolder) {
                localVarQueryParameters['destFolder'] = objectSerializer_1.ObjectSerializer.serialize(destFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImportFieldsFromFdfInStorage(name, fdfFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/fdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImportFieldsFromFdfInStorage.');
            }
            if (fdfFilePath === null || fdfFilePath === undefined) {
                throw new Error('Required parameter fdfFilePath was null or undefined when calling putImportFieldsFromFdfInStorage.');
            }
            if (fdfFilePath !== undefined && null !== fdfFilePath) {
                localVarQueryParameters['fdfFilePath'] = objectSerializer_1.ObjectSerializer.serialize(fdfFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImportFieldsFromXfdfInStorage(name, xfdfFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/xfdf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImportFieldsFromXfdfInStorage.');
            }
            if (xfdfFilePath === null || xfdfFilePath === undefined) {
                throw new Error('Required parameter xfdfFilePath was null or undefined when calling putImportFieldsFromXfdfInStorage.');
            }
            if (xfdfFilePath !== undefined && null !== xfdfFilePath) {
                localVarQueryParameters['xfdfFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xfdfFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putImportFieldsFromXmlInStorage(name, xmlFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/import/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putImportFieldsFromXmlInStorage.');
            }
            if (xmlFilePath === null || xmlFilePath === undefined) {
                throw new Error('Required parameter xmlFilePath was null or undefined when calling putImportFieldsFromXmlInStorage.');
            }
            if (xmlFilePath !== undefined && null !== xmlFilePath) {
                localVarQueryParameters['xmlFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xmlFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putInkAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/ink/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putInkAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putInkAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putInkAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "InkAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "InkAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putLaTeXInStorageToPdf(name, srcPath, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/latex'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putLaTeXInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putLaTeXInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putLineAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/line/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putLineAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putLineAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putLineAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "LineAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LineAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putLinkAnnotation(name, linkId, link, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/links/{linkId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putLinkAnnotation.');
            }
            if (linkId === null || linkId === undefined) {
                throw new Error('Required parameter linkId was null or undefined when calling putLinkAnnotation.');
            }
            if (link === null || link === undefined) {
                throw new Error('Required parameter link was null or undefined when calling putLinkAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(link, "LinkAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "LinkAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putListBoxField(name, fieldName, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/listbox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putListBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling putListBoxField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling putListBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "ListBoxField")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ListBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putMarkdownInStorageToPdf(name, srcPath, storage, dstFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/markdown'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putMarkdownInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putMarkdownInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putMergeDocuments(name, mergeDocuments, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/merge'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putMergeDocuments.');
            }
            if (mergeDocuments === null || mergeDocuments === undefined) {
                throw new Error('Required parameter mergeDocuments was null or undefined when calling putMergeDocuments.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(mergeDocuments, "MergeDocuments")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putMhtInStorageToPdf(name, srcPath, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/mht'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putMhtInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putMhtInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putMovieAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/movie/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putMovieAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putMovieAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putMovieAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "MovieAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "MovieAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPageAddStamp(name, pageNumber, stamp, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/stamp'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPageAddStamp.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putPageAddStamp.');
            }
            if (stamp === null || stamp === undefined) {
                throw new Error('Required parameter stamp was null or undefined when calling putPageAddStamp.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(stamp, "Stamp")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPageConvertToBmp(name, pageNumber, outPath, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/bmp'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPageConvertToBmp.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putPageConvertToBmp.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPageConvertToBmp.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPageConvertToEmf(name, pageNumber, outPath, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/emf'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPageConvertToEmf.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putPageConvertToEmf.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPageConvertToEmf.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPageConvertToGif(name, pageNumber, outPath, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/gif'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPageConvertToGif.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putPageConvertToGif.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPageConvertToGif.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPageConvertToJpeg(name, pageNumber, outPath, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/jpeg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPageConvertToJpeg.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putPageConvertToJpeg.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPageConvertToJpeg.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPageConvertToPng(name, pageNumber, outPath, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/png'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPageConvertToPng.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putPageConvertToPng.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPageConvertToPng.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPageConvertToTiff(name, pageNumber, outPath, width, height, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/pages/{pageNumber}/convert/tiff'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'pageNumber' + '}', encodeURIComponent(String(pageNumber)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPageConvertToTiff.');
            }
            if (pageNumber === null || pageNumber === undefined) {
                throw new Error('Required parameter pageNumber was null or undefined when calling putPageConvertToTiff.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPageConvertToTiff.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPclInStorageToPdf(name, srcPath, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/pcl'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPclInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putPclInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfAInStorageToPdf(name, srcPath, dstFolder, dontOptimize, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/pdfa'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfAInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putPdfAInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (dontOptimize !== undefined && null !== dontOptimize) {
                localVarQueryParameters['dontOptimize'] = objectSerializer_1.ObjectSerializer.serialize(dontOptimize, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToDoc(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/doc';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToDoc.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (addReturnToLineEnd !== undefined && null !== addReturnToLineEnd) {
                localVarQueryParameters['addReturnToLineEnd'] = objectSerializer_1.ObjectSerializer.serialize(addReturnToLineEnd, "boolean");
            }
            if (format !== undefined && null !== format) {
                localVarQueryParameters['format'] = objectSerializer_1.ObjectSerializer.serialize(format, "string");
            }
            if (imageResolutionX !== undefined && null !== imageResolutionX) {
                localVarQueryParameters['imageResolutionX'] = objectSerializer_1.ObjectSerializer.serialize(imageResolutionX, "number");
            }
            if (imageResolutionY !== undefined && null !== imageResolutionY) {
                localVarQueryParameters['imageResolutionY'] = objectSerializer_1.ObjectSerializer.serialize(imageResolutionY, "number");
            }
            if (maxDistanceBetweenTextLines !== undefined && null !== maxDistanceBetweenTextLines) {
                localVarQueryParameters['maxDistanceBetweenTextLines'] = objectSerializer_1.ObjectSerializer.serialize(maxDistanceBetweenTextLines, "number");
            }
            if (mode !== undefined && null !== mode) {
                localVarQueryParameters['mode'] = objectSerializer_1.ObjectSerializer.serialize(mode, "string");
            }
            if (recognizeBullets !== undefined && null !== recognizeBullets) {
                localVarQueryParameters['recognizeBullets'] = objectSerializer_1.ObjectSerializer.serialize(recognizeBullets, "boolean");
            }
            if (relativeHorizontalProximity !== undefined && null !== relativeHorizontalProximity) {
                localVarQueryParameters['relativeHorizontalProximity'] = objectSerializer_1.ObjectSerializer.serialize(relativeHorizontalProximity, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToEpub(outPath, contentRecognitionMode, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/epub';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToEpub.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (contentRecognitionMode !== undefined && null !== contentRecognitionMode) {
                localVarQueryParameters['contentRecognitionMode'] = objectSerializer_1.ObjectSerializer.serialize(contentRecognitionMode, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToHtml(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, flowLayoutParagraphFullWidth, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/html';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToHtml.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (additionalMarginWidthInPoints !== undefined && null !== additionalMarginWidthInPoints) {
                localVarQueryParameters['additionalMarginWidthInPoints'] = objectSerializer_1.ObjectSerializer.serialize(additionalMarginWidthInPoints, "number");
            }
            if (compressSvgGraphicsIfAny !== undefined && null !== compressSvgGraphicsIfAny) {
                localVarQueryParameters['compressSvgGraphicsIfAny'] = objectSerializer_1.ObjectSerializer.serialize(compressSvgGraphicsIfAny, "boolean");
            }
            if (convertMarkedContentToLayers !== undefined && null !== convertMarkedContentToLayers) {
                localVarQueryParameters['convertMarkedContentToLayers'] = objectSerializer_1.ObjectSerializer.serialize(convertMarkedContentToLayers, "boolean");
            }
            if (defaultFontName !== undefined && null !== defaultFontName) {
                localVarQueryParameters['defaultFontName'] = objectSerializer_1.ObjectSerializer.serialize(defaultFontName, "string");
            }
            if (documentType !== undefined && null !== documentType) {
                localVarQueryParameters['documentType'] = objectSerializer_1.ObjectSerializer.serialize(documentType, "string");
            }
            if (fixedLayout !== undefined && null !== fixedLayout) {
                localVarQueryParameters['fixedLayout'] = objectSerializer_1.ObjectSerializer.serialize(fixedLayout, "boolean");
            }
            if (imageResolution !== undefined && null !== imageResolution) {
                localVarQueryParameters['imageResolution'] = objectSerializer_1.ObjectSerializer.serialize(imageResolution, "number");
            }
            if (minimalLineWidth !== undefined && null !== minimalLineWidth) {
                localVarQueryParameters['minimalLineWidth'] = objectSerializer_1.ObjectSerializer.serialize(minimalLineWidth, "number");
            }
            if (preventGlyphsGrouping !== undefined && null !== preventGlyphsGrouping) {
                localVarQueryParameters['preventGlyphsGrouping'] = objectSerializer_1.ObjectSerializer.serialize(preventGlyphsGrouping, "boolean");
            }
            if (splitCssIntoPages !== undefined && null !== splitCssIntoPages) {
                localVarQueryParameters['splitCssIntoPages'] = objectSerializer_1.ObjectSerializer.serialize(splitCssIntoPages, "boolean");
            }
            if (splitIntoPages !== undefined && null !== splitIntoPages) {
                localVarQueryParameters['splitIntoPages'] = objectSerializer_1.ObjectSerializer.serialize(splitIntoPages, "boolean");
            }
            if (useZOrder !== undefined && null !== useZOrder) {
                localVarQueryParameters['useZOrder'] = objectSerializer_1.ObjectSerializer.serialize(useZOrder, "boolean");
            }
            if (antialiasingProcessing !== undefined && null !== antialiasingProcessing) {
                localVarQueryParameters['antialiasingProcessing'] = objectSerializer_1.ObjectSerializer.serialize(antialiasingProcessing, "string");
            }
            if (cssClassNamesPrefix !== undefined && null !== cssClassNamesPrefix) {
                localVarQueryParameters['cssClassNamesPrefix'] = objectSerializer_1.ObjectSerializer.serialize(cssClassNamesPrefix, "string");
            }
            if (explicitListOfSavedPages !== undefined && null !== explicitListOfSavedPages) {
                localVarQueryParameters['explicitListOfSavedPages'] = objectSerializer_1.ObjectSerializer.serialize(explicitListOfSavedPages, "Array<number>");
            }
            if (fontEncodingStrategy !== undefined && null !== fontEncodingStrategy) {
                localVarQueryParameters['fontEncodingStrategy'] = objectSerializer_1.ObjectSerializer.serialize(fontEncodingStrategy, "string");
            }
            if (fontSavingMode !== undefined && null !== fontSavingMode) {
                localVarQueryParameters['fontSavingMode'] = objectSerializer_1.ObjectSerializer.serialize(fontSavingMode, "string");
            }
            if (htmlMarkupGenerationMode !== undefined && null !== htmlMarkupGenerationMode) {
                localVarQueryParameters['htmlMarkupGenerationMode'] = objectSerializer_1.ObjectSerializer.serialize(htmlMarkupGenerationMode, "string");
            }
            if (lettersPositioningMethod !== undefined && null !== lettersPositioningMethod) {
                localVarQueryParameters['lettersPositioningMethod'] = objectSerializer_1.ObjectSerializer.serialize(lettersPositioningMethod, "string");
            }
            if (pagesFlowTypeDependsOnViewersScreenSize !== undefined && null !== pagesFlowTypeDependsOnViewersScreenSize) {
                localVarQueryParameters['pagesFlowTypeDependsOnViewersScreenSize'] = objectSerializer_1.ObjectSerializer.serialize(pagesFlowTypeDependsOnViewersScreenSize, "boolean");
            }
            if (partsEmbeddingMode !== undefined && null !== partsEmbeddingMode) {
                localVarQueryParameters['partsEmbeddingMode'] = objectSerializer_1.ObjectSerializer.serialize(partsEmbeddingMode, "string");
            }
            if (rasterImagesSavingMode !== undefined && null !== rasterImagesSavingMode) {
                localVarQueryParameters['rasterImagesSavingMode'] = objectSerializer_1.ObjectSerializer.serialize(rasterImagesSavingMode, "string");
            }
            if (removeEmptyAreasOnTopAndBottom !== undefined && null !== removeEmptyAreasOnTopAndBottom) {
                localVarQueryParameters['removeEmptyAreasOnTopAndBottom'] = objectSerializer_1.ObjectSerializer.serialize(removeEmptyAreasOnTopAndBottom, "boolean");
            }
            if (saveShadowedTextsAsTransparentTexts !== undefined && null !== saveShadowedTextsAsTransparentTexts) {
                localVarQueryParameters['saveShadowedTextsAsTransparentTexts'] = objectSerializer_1.ObjectSerializer.serialize(saveShadowedTextsAsTransparentTexts, "boolean");
            }
            if (saveTransparentTexts !== undefined && null !== saveTransparentTexts) {
                localVarQueryParameters['saveTransparentTexts'] = objectSerializer_1.ObjectSerializer.serialize(saveTransparentTexts, "boolean");
            }
            if (specialFolderForAllImages !== undefined && null !== specialFolderForAllImages) {
                localVarQueryParameters['specialFolderForAllImages'] = objectSerializer_1.ObjectSerializer.serialize(specialFolderForAllImages, "string");
            }
            if (specialFolderForSvgImages !== undefined && null !== specialFolderForSvgImages) {
                localVarQueryParameters['specialFolderForSvgImages'] = objectSerializer_1.ObjectSerializer.serialize(specialFolderForSvgImages, "string");
            }
            if (trySaveTextUnderliningAndStrikeoutingInCss !== undefined && null !== trySaveTextUnderliningAndStrikeoutingInCss) {
                localVarQueryParameters['trySaveTextUnderliningAndStrikeoutingInCss'] = objectSerializer_1.ObjectSerializer.serialize(trySaveTextUnderliningAndStrikeoutingInCss, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (flowLayoutParagraphFullWidth !== undefined && null !== flowLayoutParagraphFullWidth) {
                localVarQueryParameters['flowLayoutParagraphFullWidth'] = objectSerializer_1.ObjectSerializer.serialize(flowLayoutParagraphFullWidth, "boolean");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToLaTeX(outPath, pagesCount, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/latex';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToLaTeX.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (pagesCount !== undefined && null !== pagesCount) {
                localVarQueryParameters['pagesCount'] = objectSerializer_1.ObjectSerializer.serialize(pagesCount, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToMobiXml(outPath, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/mobixml';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToMobiXml.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToPdfA(outPath, type, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/pdfa';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToPdfA.');
            }
            if (type === null || type === undefined) {
                throw new Error('Required parameter type was null or undefined when calling putPdfInRequestToPdfA.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (type !== undefined && null !== type) {
                localVarQueryParameters['type'] = objectSerializer_1.ObjectSerializer.serialize(type, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToPptx(outPath, separateImages, slidesAsImages, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/pptx';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToPptx.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (separateImages !== undefined && null !== separateImages) {
                localVarQueryParameters['separateImages'] = objectSerializer_1.ObjectSerializer.serialize(separateImages, "boolean");
            }
            if (slidesAsImages !== undefined && null !== slidesAsImages) {
                localVarQueryParameters['slidesAsImages'] = objectSerializer_1.ObjectSerializer.serialize(slidesAsImages, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToSvg(outPath, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/svg';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToSvg.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToTiff(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/tiff';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToTiff.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (brightness !== undefined && null !== brightness) {
                localVarQueryParameters['brightness'] = objectSerializer_1.ObjectSerializer.serialize(brightness, "number");
            }
            if (compression !== undefined && null !== compression) {
                localVarQueryParameters['compression'] = objectSerializer_1.ObjectSerializer.serialize(compression, "string");
            }
            if (colorDepth !== undefined && null !== colorDepth) {
                localVarQueryParameters['colorDepth'] = objectSerializer_1.ObjectSerializer.serialize(colorDepth, "string");
            }
            if (leftMargin !== undefined && null !== leftMargin) {
                localVarQueryParameters['leftMargin'] = objectSerializer_1.ObjectSerializer.serialize(leftMargin, "number");
            }
            if (rightMargin !== undefined && null !== rightMargin) {
                localVarQueryParameters['rightMargin'] = objectSerializer_1.ObjectSerializer.serialize(rightMargin, "number");
            }
            if (topMargin !== undefined && null !== topMargin) {
                localVarQueryParameters['topMargin'] = objectSerializer_1.ObjectSerializer.serialize(topMargin, "number");
            }
            if (bottomMargin !== undefined && null !== bottomMargin) {
                localVarQueryParameters['bottomMargin'] = objectSerializer_1.ObjectSerializer.serialize(bottomMargin, "number");
            }
            if (orientation !== undefined && null !== orientation) {
                localVarQueryParameters['orientation'] = objectSerializer_1.ObjectSerializer.serialize(orientation, "string");
            }
            if (skipBlankPages !== undefined && null !== skipBlankPages) {
                localVarQueryParameters['skipBlankPages'] = objectSerializer_1.ObjectSerializer.serialize(skipBlankPages, "boolean");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (xResolution !== undefined && null !== xResolution) {
                localVarQueryParameters['xResolution'] = objectSerializer_1.ObjectSerializer.serialize(xResolution, "number");
            }
            if (yResolution !== undefined && null !== yResolution) {
                localVarQueryParameters['yResolution'] = objectSerializer_1.ObjectSerializer.serialize(yResolution, "number");
            }
            if (pageIndex !== undefined && null !== pageIndex) {
                localVarQueryParameters['pageIndex'] = objectSerializer_1.ObjectSerializer.serialize(pageIndex, "number");
            }
            if (pageCount !== undefined && null !== pageCount) {
                localVarQueryParameters['pageCount'] = objectSerializer_1.ObjectSerializer.serialize(pageCount, "number");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToXls(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/xls';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToXls.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (insertBlankColumnAtFirst !== undefined && null !== insertBlankColumnAtFirst) {
                localVarQueryParameters['insertBlankColumnAtFirst'] = objectSerializer_1.ObjectSerializer.serialize(insertBlankColumnAtFirst, "boolean");
            }
            if (minimizeTheNumberOfWorksheets !== undefined && null !== minimizeTheNumberOfWorksheets) {
                localVarQueryParameters['minimizeTheNumberOfWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(minimizeTheNumberOfWorksheets, "boolean");
            }
            if (scaleFactor !== undefined && null !== scaleFactor) {
                localVarQueryParameters['scaleFactor'] = objectSerializer_1.ObjectSerializer.serialize(scaleFactor, "number");
            }
            if (uniformWorksheets !== undefined && null !== uniformWorksheets) {
                localVarQueryParameters['uniformWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(uniformWorksheets, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToXlsx(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/xlsx';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToXlsx.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (insertBlankColumnAtFirst !== undefined && null !== insertBlankColumnAtFirst) {
                localVarQueryParameters['insertBlankColumnAtFirst'] = objectSerializer_1.ObjectSerializer.serialize(insertBlankColumnAtFirst, "boolean");
            }
            if (minimizeTheNumberOfWorksheets !== undefined && null !== minimizeTheNumberOfWorksheets) {
                localVarQueryParameters['minimizeTheNumberOfWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(minimizeTheNumberOfWorksheets, "boolean");
            }
            if (scaleFactor !== undefined && null !== scaleFactor) {
                localVarQueryParameters['scaleFactor'] = objectSerializer_1.ObjectSerializer.serialize(scaleFactor, "number");
            }
            if (uniformWorksheets !== undefined && null !== uniformWorksheets) {
                localVarQueryParameters['uniformWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(uniformWorksheets, "boolean");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToXml(outPath, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/xml';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToXml.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInRequestToXps(outPath, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/xps';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInRequestToXps.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToDoc(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/doc'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToDoc.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToDoc.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (addReturnToLineEnd !== undefined && null !== addReturnToLineEnd) {
                localVarQueryParameters['addReturnToLineEnd'] = objectSerializer_1.ObjectSerializer.serialize(addReturnToLineEnd, "boolean");
            }
            if (format !== undefined && null !== format) {
                localVarQueryParameters['format'] = objectSerializer_1.ObjectSerializer.serialize(format, "string");
            }
            if (imageResolutionX !== undefined && null !== imageResolutionX) {
                localVarQueryParameters['imageResolutionX'] = objectSerializer_1.ObjectSerializer.serialize(imageResolutionX, "number");
            }
            if (imageResolutionY !== undefined && null !== imageResolutionY) {
                localVarQueryParameters['imageResolutionY'] = objectSerializer_1.ObjectSerializer.serialize(imageResolutionY, "number");
            }
            if (maxDistanceBetweenTextLines !== undefined && null !== maxDistanceBetweenTextLines) {
                localVarQueryParameters['maxDistanceBetweenTextLines'] = objectSerializer_1.ObjectSerializer.serialize(maxDistanceBetweenTextLines, "number");
            }
            if (mode !== undefined && null !== mode) {
                localVarQueryParameters['mode'] = objectSerializer_1.ObjectSerializer.serialize(mode, "string");
            }
            if (recognizeBullets !== undefined && null !== recognizeBullets) {
                localVarQueryParameters['recognizeBullets'] = objectSerializer_1.ObjectSerializer.serialize(recognizeBullets, "boolean");
            }
            if (relativeHorizontalProximity !== undefined && null !== relativeHorizontalProximity) {
                localVarQueryParameters['relativeHorizontalProximity'] = objectSerializer_1.ObjectSerializer.serialize(relativeHorizontalProximity, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToEpub(name, outPath, contentRecognitionMode, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/epub'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToEpub.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToEpub.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (contentRecognitionMode !== undefined && null !== contentRecognitionMode) {
                localVarQueryParameters['contentRecognitionMode'] = objectSerializer_1.ObjectSerializer.serialize(contentRecognitionMode, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToHtml(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/html'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToHtml.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToHtml.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (additionalMarginWidthInPoints !== undefined && null !== additionalMarginWidthInPoints) {
                localVarQueryParameters['additionalMarginWidthInPoints'] = objectSerializer_1.ObjectSerializer.serialize(additionalMarginWidthInPoints, "number");
            }
            if (compressSvgGraphicsIfAny !== undefined && null !== compressSvgGraphicsIfAny) {
                localVarQueryParameters['compressSvgGraphicsIfAny'] = objectSerializer_1.ObjectSerializer.serialize(compressSvgGraphicsIfAny, "boolean");
            }
            if (convertMarkedContentToLayers !== undefined && null !== convertMarkedContentToLayers) {
                localVarQueryParameters['convertMarkedContentToLayers'] = objectSerializer_1.ObjectSerializer.serialize(convertMarkedContentToLayers, "boolean");
            }
            if (defaultFontName !== undefined && null !== defaultFontName) {
                localVarQueryParameters['defaultFontName'] = objectSerializer_1.ObjectSerializer.serialize(defaultFontName, "string");
            }
            if (documentType !== undefined && null !== documentType) {
                localVarQueryParameters['documentType'] = objectSerializer_1.ObjectSerializer.serialize(documentType, "string");
            }
            if (fixedLayout !== undefined && null !== fixedLayout) {
                localVarQueryParameters['fixedLayout'] = objectSerializer_1.ObjectSerializer.serialize(fixedLayout, "boolean");
            }
            if (imageResolution !== undefined && null !== imageResolution) {
                localVarQueryParameters['imageResolution'] = objectSerializer_1.ObjectSerializer.serialize(imageResolution, "number");
            }
            if (minimalLineWidth !== undefined && null !== minimalLineWidth) {
                localVarQueryParameters['minimalLineWidth'] = objectSerializer_1.ObjectSerializer.serialize(minimalLineWidth, "number");
            }
            if (preventGlyphsGrouping !== undefined && null !== preventGlyphsGrouping) {
                localVarQueryParameters['preventGlyphsGrouping'] = objectSerializer_1.ObjectSerializer.serialize(preventGlyphsGrouping, "boolean");
            }
            if (splitCssIntoPages !== undefined && null !== splitCssIntoPages) {
                localVarQueryParameters['splitCssIntoPages'] = objectSerializer_1.ObjectSerializer.serialize(splitCssIntoPages, "boolean");
            }
            if (splitIntoPages !== undefined && null !== splitIntoPages) {
                localVarQueryParameters['splitIntoPages'] = objectSerializer_1.ObjectSerializer.serialize(splitIntoPages, "boolean");
            }
            if (useZOrder !== undefined && null !== useZOrder) {
                localVarQueryParameters['useZOrder'] = objectSerializer_1.ObjectSerializer.serialize(useZOrder, "boolean");
            }
            if (antialiasingProcessing !== undefined && null !== antialiasingProcessing) {
                localVarQueryParameters['antialiasingProcessing'] = objectSerializer_1.ObjectSerializer.serialize(antialiasingProcessing, "string");
            }
            if (cssClassNamesPrefix !== undefined && null !== cssClassNamesPrefix) {
                localVarQueryParameters['cssClassNamesPrefix'] = objectSerializer_1.ObjectSerializer.serialize(cssClassNamesPrefix, "string");
            }
            if (explicitListOfSavedPages !== undefined && null !== explicitListOfSavedPages) {
                localVarQueryParameters['explicitListOfSavedPages'] = objectSerializer_1.ObjectSerializer.serialize(explicitListOfSavedPages, "Array<number>");
            }
            if (fontEncodingStrategy !== undefined && null !== fontEncodingStrategy) {
                localVarQueryParameters['fontEncodingStrategy'] = objectSerializer_1.ObjectSerializer.serialize(fontEncodingStrategy, "string");
            }
            if (fontSavingMode !== undefined && null !== fontSavingMode) {
                localVarQueryParameters['fontSavingMode'] = objectSerializer_1.ObjectSerializer.serialize(fontSavingMode, "string");
            }
            if (htmlMarkupGenerationMode !== undefined && null !== htmlMarkupGenerationMode) {
                localVarQueryParameters['htmlMarkupGenerationMode'] = objectSerializer_1.ObjectSerializer.serialize(htmlMarkupGenerationMode, "string");
            }
            if (lettersPositioningMethod !== undefined && null !== lettersPositioningMethod) {
                localVarQueryParameters['lettersPositioningMethod'] = objectSerializer_1.ObjectSerializer.serialize(lettersPositioningMethod, "string");
            }
            if (pagesFlowTypeDependsOnViewersScreenSize !== undefined && null !== pagesFlowTypeDependsOnViewersScreenSize) {
                localVarQueryParameters['pagesFlowTypeDependsOnViewersScreenSize'] = objectSerializer_1.ObjectSerializer.serialize(pagesFlowTypeDependsOnViewersScreenSize, "boolean");
            }
            if (partsEmbeddingMode !== undefined && null !== partsEmbeddingMode) {
                localVarQueryParameters['partsEmbeddingMode'] = objectSerializer_1.ObjectSerializer.serialize(partsEmbeddingMode, "string");
            }
            if (rasterImagesSavingMode !== undefined && null !== rasterImagesSavingMode) {
                localVarQueryParameters['rasterImagesSavingMode'] = objectSerializer_1.ObjectSerializer.serialize(rasterImagesSavingMode, "string");
            }
            if (removeEmptyAreasOnTopAndBottom !== undefined && null !== removeEmptyAreasOnTopAndBottom) {
                localVarQueryParameters['removeEmptyAreasOnTopAndBottom'] = objectSerializer_1.ObjectSerializer.serialize(removeEmptyAreasOnTopAndBottom, "boolean");
            }
            if (saveShadowedTextsAsTransparentTexts !== undefined && null !== saveShadowedTextsAsTransparentTexts) {
                localVarQueryParameters['saveShadowedTextsAsTransparentTexts'] = objectSerializer_1.ObjectSerializer.serialize(saveShadowedTextsAsTransparentTexts, "boolean");
            }
            if (saveTransparentTexts !== undefined && null !== saveTransparentTexts) {
                localVarQueryParameters['saveTransparentTexts'] = objectSerializer_1.ObjectSerializer.serialize(saveTransparentTexts, "boolean");
            }
            if (specialFolderForAllImages !== undefined && null !== specialFolderForAllImages) {
                localVarQueryParameters['specialFolderForAllImages'] = objectSerializer_1.ObjectSerializer.serialize(specialFolderForAllImages, "string");
            }
            if (specialFolderForSvgImages !== undefined && null !== specialFolderForSvgImages) {
                localVarQueryParameters['specialFolderForSvgImages'] = objectSerializer_1.ObjectSerializer.serialize(specialFolderForSvgImages, "string");
            }
            if (trySaveTextUnderliningAndStrikeoutingInCss !== undefined && null !== trySaveTextUnderliningAndStrikeoutingInCss) {
                localVarQueryParameters['trySaveTextUnderliningAndStrikeoutingInCss'] = objectSerializer_1.ObjectSerializer.serialize(trySaveTextUnderliningAndStrikeoutingInCss, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (flowLayoutParagraphFullWidth !== undefined && null !== flowLayoutParagraphFullWidth) {
                localVarQueryParameters['flowLayoutParagraphFullWidth'] = objectSerializer_1.ObjectSerializer.serialize(flowLayoutParagraphFullWidth, "boolean");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToLaTeX(name, outPath, pagesCount, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/latex'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToLaTeX.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToLaTeX.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (pagesCount !== undefined && null !== pagesCount) {
                localVarQueryParameters['pagesCount'] = objectSerializer_1.ObjectSerializer.serialize(pagesCount, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToMobiXml(name, outPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/mobixml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToMobiXml.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToMobiXml.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToPdfA(name, outPath, type, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/pdfa'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToPdfA.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToPdfA.');
            }
            if (type === null || type === undefined) {
                throw new Error('Required parameter type was null or undefined when calling putPdfInStorageToPdfA.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (type !== undefined && null !== type) {
                localVarQueryParameters['type'] = objectSerializer_1.ObjectSerializer.serialize(type, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToPptx(name, outPath, separateImages, slidesAsImages, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/pptx'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToPptx.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToPptx.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (separateImages !== undefined && null !== separateImages) {
                localVarQueryParameters['separateImages'] = objectSerializer_1.ObjectSerializer.serialize(separateImages, "boolean");
            }
            if (slidesAsImages !== undefined && null !== slidesAsImages) {
                localVarQueryParameters['slidesAsImages'] = objectSerializer_1.ObjectSerializer.serialize(slidesAsImages, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToSvg(name, outPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/svg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToSvg.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToSvg.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToTiff(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/tiff'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToTiff.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToTiff.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (brightness !== undefined && null !== brightness) {
                localVarQueryParameters['brightness'] = objectSerializer_1.ObjectSerializer.serialize(brightness, "number");
            }
            if (compression !== undefined && null !== compression) {
                localVarQueryParameters['compression'] = objectSerializer_1.ObjectSerializer.serialize(compression, "string");
            }
            if (colorDepth !== undefined && null !== colorDepth) {
                localVarQueryParameters['colorDepth'] = objectSerializer_1.ObjectSerializer.serialize(colorDepth, "string");
            }
            if (leftMargin !== undefined && null !== leftMargin) {
                localVarQueryParameters['leftMargin'] = objectSerializer_1.ObjectSerializer.serialize(leftMargin, "number");
            }
            if (rightMargin !== undefined && null !== rightMargin) {
                localVarQueryParameters['rightMargin'] = objectSerializer_1.ObjectSerializer.serialize(rightMargin, "number");
            }
            if (topMargin !== undefined && null !== topMargin) {
                localVarQueryParameters['topMargin'] = objectSerializer_1.ObjectSerializer.serialize(topMargin, "number");
            }
            if (bottomMargin !== undefined && null !== bottomMargin) {
                localVarQueryParameters['bottomMargin'] = objectSerializer_1.ObjectSerializer.serialize(bottomMargin, "number");
            }
            if (orientation !== undefined && null !== orientation) {
                localVarQueryParameters['orientation'] = objectSerializer_1.ObjectSerializer.serialize(orientation, "string");
            }
            if (skipBlankPages !== undefined && null !== skipBlankPages) {
                localVarQueryParameters['skipBlankPages'] = objectSerializer_1.ObjectSerializer.serialize(skipBlankPages, "boolean");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (xResolution !== undefined && null !== xResolution) {
                localVarQueryParameters['xResolution'] = objectSerializer_1.ObjectSerializer.serialize(xResolution, "number");
            }
            if (yResolution !== undefined && null !== yResolution) {
                localVarQueryParameters['yResolution'] = objectSerializer_1.ObjectSerializer.serialize(yResolution, "number");
            }
            if (pageIndex !== undefined && null !== pageIndex) {
                localVarQueryParameters['pageIndex'] = objectSerializer_1.ObjectSerializer.serialize(pageIndex, "number");
            }
            if (pageCount !== undefined && null !== pageCount) {
                localVarQueryParameters['pageCount'] = objectSerializer_1.ObjectSerializer.serialize(pageCount, "number");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToXls(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xls'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToXls.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToXls.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (insertBlankColumnAtFirst !== undefined && null !== insertBlankColumnAtFirst) {
                localVarQueryParameters['insertBlankColumnAtFirst'] = objectSerializer_1.ObjectSerializer.serialize(insertBlankColumnAtFirst, "boolean");
            }
            if (minimizeTheNumberOfWorksheets !== undefined && null !== minimizeTheNumberOfWorksheets) {
                localVarQueryParameters['minimizeTheNumberOfWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(minimizeTheNumberOfWorksheets, "boolean");
            }
            if (scaleFactor !== undefined && null !== scaleFactor) {
                localVarQueryParameters['scaleFactor'] = objectSerializer_1.ObjectSerializer.serialize(scaleFactor, "number");
            }
            if (uniformWorksheets !== undefined && null !== uniformWorksheets) {
                localVarQueryParameters['uniformWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(uniformWorksheets, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToXlsx(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xlsx'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToXlsx.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToXlsx.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (insertBlankColumnAtFirst !== undefined && null !== insertBlankColumnAtFirst) {
                localVarQueryParameters['insertBlankColumnAtFirst'] = objectSerializer_1.ObjectSerializer.serialize(insertBlankColumnAtFirst, "boolean");
            }
            if (minimizeTheNumberOfWorksheets !== undefined && null !== minimizeTheNumberOfWorksheets) {
                localVarQueryParameters['minimizeTheNumberOfWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(minimizeTheNumberOfWorksheets, "boolean");
            }
            if (scaleFactor !== undefined && null !== scaleFactor) {
                localVarQueryParameters['scaleFactor'] = objectSerializer_1.ObjectSerializer.serialize(scaleFactor, "number");
            }
            if (uniformWorksheets !== undefined && null !== uniformWorksheets) {
                localVarQueryParameters['uniformWorksheets'] = objectSerializer_1.ObjectSerializer.serialize(uniformWorksheets, "boolean");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToXml(name, outPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToXml.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToXml.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPdfInStorageToXps(name, outPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPdfInStorageToXps.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putPdfInStorageToXps.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPolyLineAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/polyline/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPolyLineAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putPolyLineAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putPolyLineAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "PolyLineAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolyLineAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPolygonAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/polygon/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPolygonAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putPolygonAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putPolygonAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "PolygonAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PolygonAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPopupAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/popup/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPopupAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putPopupAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putPopupAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "PopupAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "PopupAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPrivileges(name, privileges, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/privileges'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPrivileges.');
            }
            if (privileges === null || privileges === undefined) {
                throw new Error('Required parameter privileges was null or undefined when calling putPrivileges.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(privileges, "DocumentPrivilege")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putPsInStorageToPdf(name, srcPath, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/ps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putPsInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putPsInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putRadioButtonField(name, fieldName, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/radiobutton/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putRadioButtonField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling putRadioButtonField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling putRadioButtonField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "RadioButtonField")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RadioButtonFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putRedactionAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/redaction/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putRedactionAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putRedactionAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putRedactionAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "RedactionAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "RedactionAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putReplaceImage(name, imageId, imageFilePath, storage, folder, image) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/images/{imageId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'imageId' + '}', encodeURIComponent(String(imageId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putReplaceImage.');
            }
            if (imageId === null || imageId === undefined) {
                throw new Error('Required parameter imageId was null or undefined when calling putReplaceImage.');
            }
            if (imageFilePath !== undefined && null !== imageFilePath) {
                localVarQueryParameters['imageFilePath'] = objectSerializer_1.ObjectSerializer.serialize(imageFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (image !== undefined) {
                localVarFormParams['image'] = image;
                fileData = image;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ImageResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putScreenAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/screen/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putScreenAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putScreenAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putScreenAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "ScreenAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "ScreenAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putScreenAnnotationDataExtract(name, annotationId, outFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/screen/{annotationId}/data/extract'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putScreenAnnotationDataExtract.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putScreenAnnotationDataExtract.');
            }
            if (outFilePath === null || outFilePath === undefined) {
                throw new Error('Required parameter outFilePath was null or undefined when calling putScreenAnnotationDataExtract.');
            }
            if (outFilePath !== undefined && null !== outFilePath) {
                localVarQueryParameters['outFilePath'] = objectSerializer_1.ObjectSerializer.serialize(outFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSearchableDocument(name, storage, folder, lang) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/ocr'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSearchableDocument.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (lang !== undefined && null !== lang) {
                localVarQueryParameters['lang'] = objectSerializer_1.ObjectSerializer.serialize(lang, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSetProperty(name, propertyName, value, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/documentproperties/{propertyName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'propertyName' + '}', encodeURIComponent(String(propertyName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSetProperty.');
            }
            if (propertyName === null || propertyName === undefined) {
                throw new Error('Required parameter propertyName was null or undefined when calling putSetProperty.');
            }
            if (value === null || value === undefined) {
                throw new Error('Required parameter value was null or undefined when calling putSetProperty.');
            }
            if (value !== undefined && null !== value) {
                localVarQueryParameters['value'] = objectSerializer_1.ObjectSerializer.serialize(value, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "DocumentPropertyResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSignatureField(name, fieldName, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/signature/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSignatureField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling putSignatureField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling putSignatureField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "SignatureField")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SignatureFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSoundAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/sound/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSoundAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putSoundAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putSoundAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "SoundAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SoundAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSoundAnnotationDataExtract(name, annotationId, outFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/sound/{annotationId}/data/extract'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSoundAnnotationDataExtract.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putSoundAnnotationDataExtract.');
            }
            if (outFilePath === null || outFilePath === undefined) {
                throw new Error('Required parameter outFilePath was null or undefined when calling putSoundAnnotationDataExtract.');
            }
            if (outFilePath !== undefined && null !== outFilePath) {
                localVarQueryParameters['outFilePath'] = objectSerializer_1.ObjectSerializer.serialize(outFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSquareAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/square/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSquareAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putSquareAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putSquareAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "SquareAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquareAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSquigglyAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/squiggly/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSquigglyAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putSquigglyAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putSquigglyAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "SquigglyAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "SquigglyAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putStampAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/stamp/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putStampAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putStampAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putStampAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "StampAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StampAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putStampAnnotationDataExtract(name, annotationId, outFilePath, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/stamp/{annotationId}/data/extract'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putStampAnnotationDataExtract.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putStampAnnotationDataExtract.');
            }
            if (outFilePath === null || outFilePath === undefined) {
                throw new Error('Required parameter outFilePath was null or undefined when calling putStampAnnotationDataExtract.');
            }
            if (outFilePath !== undefined && null !== outFilePath) {
                localVarQueryParameters['outFilePath'] = objectSerializer_1.ObjectSerializer.serialize(outFilePath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putStrikeOutAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/strikeout/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putStrikeOutAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putStrikeOutAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putStrikeOutAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "StrikeOutAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StrikeOutAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putSvgInStorageToPdf(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/svg'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putSvgInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putSvgInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (adjustPageSize !== undefined && null !== adjustPageSize) {
                localVarQueryParameters['adjustPageSize'] = objectSerializer_1.ObjectSerializer.serialize(adjustPageSize, "boolean");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (isLandscape !== undefined && null !== isLandscape) {
                localVarQueryParameters['isLandscape'] = objectSerializer_1.ObjectSerializer.serialize(isLandscape, "boolean");
            }
            if (marginLeft !== undefined && null !== marginLeft) {
                localVarQueryParameters['marginLeft'] = objectSerializer_1.ObjectSerializer.serialize(marginLeft, "number");
            }
            if (marginBottom !== undefined && null !== marginBottom) {
                localVarQueryParameters['marginBottom'] = objectSerializer_1.ObjectSerializer.serialize(marginBottom, "number");
            }
            if (marginRight !== undefined && null !== marginRight) {
                localVarQueryParameters['marginRight'] = objectSerializer_1.ObjectSerializer.serialize(marginRight, "number");
            }
            if (marginTop !== undefined && null !== marginTop) {
                localVarQueryParameters['marginTop'] = objectSerializer_1.ObjectSerializer.serialize(marginTop, "number");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putTable(name, tableId, table, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/tables/{tableId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'tableId' + '}', encodeURIComponent(String(tableId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putTable.');
            }
            if (tableId === null || tableId === undefined) {
                throw new Error('Required parameter tableId was null or undefined when calling putTable.');
            }
            if (table === null || table === undefined) {
                throw new Error('Required parameter table was null or undefined when calling putTable.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(table, "Table")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putTextAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/text/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putTextAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putTextAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putTextAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "TextAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putTextBoxField(name, fieldName, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/textbox/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putTextBoxField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling putTextBoxField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling putTextBoxField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "TextBoxField")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "TextBoxFieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putUnderlineAnnotation(name, annotationId, annotation, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/annotations/underline/{annotationId}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'annotationId' + '}', encodeURIComponent(String(annotationId)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putUnderlineAnnotation.');
            }
            if (annotationId === null || annotationId === undefined) {
                throw new Error('Required parameter annotationId was null or undefined when calling putUnderlineAnnotation.');
            }
            if (annotation === null || annotation === undefined) {
                throw new Error('Required parameter annotation was null or undefined when calling putUnderlineAnnotation.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(annotation, "UnderlineAnnotation")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "UnderlineAnnotationResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putUpdateField(name, fieldName, field, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields/{fieldName}'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'))
                .replace('{' + 'fieldName' + '}', encodeURIComponent(String(fieldName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putUpdateField.');
            }
            if (fieldName === null || fieldName === undefined) {
                throw new Error('Required parameter fieldName was null or undefined when calling putUpdateField.');
            }
            if (field === null || field === undefined) {
                throw new Error('Required parameter field was null or undefined when calling putUpdateField.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(field, "Field")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putUpdateFields(name, fields, storage, folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/fields'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putUpdateFields.');
            }
            if (fields === null || fields === undefined) {
                throw new Error('Required parameter fields was null or undefined when calling putUpdateFields.');
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: objectSerializer_1.ObjectSerializer.serialize(fields, "Fields")
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FieldsResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putWebInStorageToPdf(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/web'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putWebInStorageToPdf.');
            }
            if (url === null || url === undefined) {
                throw new Error('Required parameter url was null or undefined when calling putWebInStorageToPdf.');
            }
            if (url !== undefined && null !== url) {
                localVarQueryParameters['url'] = objectSerializer_1.ObjectSerializer.serialize(url, "string");
            }
            if (height !== undefined && null !== height) {
                localVarQueryParameters['height'] = objectSerializer_1.ObjectSerializer.serialize(height, "number");
            }
            if (width !== undefined && null !== width) {
                localVarQueryParameters['width'] = objectSerializer_1.ObjectSerializer.serialize(width, "number");
            }
            if (isLandscape !== undefined && null !== isLandscape) {
                localVarQueryParameters['isLandscape'] = objectSerializer_1.ObjectSerializer.serialize(isLandscape, "boolean");
            }
            if (marginLeft !== undefined && null !== marginLeft) {
                localVarQueryParameters['marginLeft'] = objectSerializer_1.ObjectSerializer.serialize(marginLeft, "number");
            }
            if (marginBottom !== undefined && null !== marginBottom) {
                localVarQueryParameters['marginBottom'] = objectSerializer_1.ObjectSerializer.serialize(marginBottom, "number");
            }
            if (marginRight !== undefined && null !== marginRight) {
                localVarQueryParameters['marginRight'] = objectSerializer_1.ObjectSerializer.serialize(marginRight, "number");
            }
            if (marginTop !== undefined && null !== marginTop) {
                localVarQueryParameters['marginTop'] = objectSerializer_1.ObjectSerializer.serialize(marginTop, "number");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putXfaPdfInRequestToAcroForm(outPath, storage, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/convert/xfatoacroform';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putXfaPdfInRequestToAcroForm.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putXfaPdfInStorageToAcroForm(name, outPath, folder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/convert/xfatoacroform'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putXfaPdfInStorageToAcroForm.');
            }
            if (outPath === null || outPath === undefined) {
                throw new Error('Required parameter outPath was null or undefined when calling putXfaPdfInStorageToAcroForm.');
            }
            if (outPath !== undefined && null !== outPath) {
                localVarQueryParameters['outPath'] = objectSerializer_1.ObjectSerializer.serialize(outPath, "string");
            }
            if (folder !== undefined && null !== folder) {
                localVarQueryParameters['folder'] = objectSerializer_1.ObjectSerializer.serialize(folder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putXmlInStorageToPdf(name, srcPath, xslFilePath, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/xml'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putXmlInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putXmlInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (xslFilePath !== undefined && null !== xslFilePath) {
                localVarQueryParameters['xslFilePath'] = objectSerializer_1.ObjectSerializer.serialize(xslFilePath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putXpsInStorageToPdf(name, srcPath, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/xps'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putXpsInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putXpsInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    putXslFoInStorageToPdf(name, srcPath, dstFolder, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/{name}/create/xslfo'
                .replace('{' + 'name' + '}', encodeURIComponent(String(name)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (name === null || name === undefined) {
                throw new Error('Required parameter name was null or undefined when calling putXslFoInStorageToPdf.');
            }
            if (srcPath === null || srcPath === undefined) {
                throw new Error('Required parameter srcPath was null or undefined when calling putXslFoInStorageToPdf.');
            }
            if (srcPath !== undefined && null !== srcPath) {
                localVarQueryParameters['srcPath'] = objectSerializer_1.ObjectSerializer.serialize(srcPath, "string");
            }
            if (dstFolder !== undefined && null !== dstFolder) {
                localVarQueryParameters['dstFolder'] = objectSerializer_1.ObjectSerializer.serialize(dstFolder, "string");
            }
            if (storage !== undefined && null !== storage) {
                localVarQueryParameters['storage'] = objectSerializer_1.ObjectSerializer.serialize(storage, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "AsposeResponse");
            return Promise.resolve({ body: result, response });
        });
    }
    storageExists(storageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/{storageName}/exist'
                .replace('{' + 'storageName' + '}', encodeURIComponent(String(storageName)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (storageName === null || storageName === undefined) {
                throw new Error('Required parameter storageName was null or undefined when calling storageExists.');
            }
            let localVarUseFormData = false;
            let fileData = null;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "StorageExist");
            return Promise.resolve({ body: result, response });
        });
    }
    uploadFile(path, file, storageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/pdf/storage/file/{path}'
                .replace('{' + 'path' + '}', encodeURIComponent(String(path)).replace('%2F', '/'));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            if (path === null || path === undefined) {
                throw new Error('Required parameter path was null or undefined when calling uploadFile.');
            }
            if (file === null || file === undefined) {
                throw new Error('Required parameter file was null or undefined when calling uploadFile.');
            }
            if (storageName !== undefined && null !== storageName) {
                localVarQueryParameters['storageName'] = objectSerializer_1.ObjectSerializer.serialize(storageName, "string");
            }
            let localVarUseFormData = false;
            let fileData = null;
            if (file !== undefined) {
                localVarFormParams['File'] = file;
                fileData = file;
            }
            localVarUseFormData = true;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            const response = yield requestHelper_1.invokeApiMethod(localVarRequestOptions, this.configuration, false, fileData);
            const result = objectSerializer_1.ObjectSerializer.deserialize(response.body, "FilesUploadResult");
            return Promise.resolve({ body: result, response });
        });
    }
}
exports.PdfApi = PdfApi;
//# sourceMappingURL=api.js.map