/// <reference types="node" />
import { AnnotationType } from "../models/annotationType";
import { AsposeResponse } from "../models/asposeResponse";
import { DiscUsage } from "../models/discUsage";
import { DocumentConfig } from "../models/documentConfig";
import { DocumentPrivilege } from "../models/documentPrivilege";
import { FileVersions } from "../models/fileVersions";
import { FilesList } from "../models/filesList";
import { FilesUploadResult } from "../models/filesUploadResult";
import { ImageTemplatesRequest } from "../models/imageTemplatesRequest";
import { MergeDocuments } from "../models/mergeDocuments";
import { ObjectExist } from "../models/objectExist";
import { OptimizeOptions } from "../models/optimizeOptions";
import { Paragraph } from "../models/paragraph";
import { PermissionsFlags } from "../models/permissionsFlags";
import { Signature } from "../models/signature";
import { Stamp } from "../models/stamp";
import { StorageExist } from "../models/storageExist";
import { TextReplaceListRequest } from "../models/textReplaceListRequest";
import { AnnotationsInfoResponse } from "../models/annotationsInfoResponse";
import { AttachmentResponse } from "../models/attachmentResponse";
import { AttachmentsResponse } from "../models/attachmentsResponse";
import { Bookmark } from "../models/bookmark";
import { BookmarkResponse } from "../models/bookmarkResponse";
import { BookmarksResponse } from "../models/bookmarksResponse";
import { CaretAnnotationResponse } from "../models/caretAnnotationResponse";
import { CaretAnnotationsResponse } from "../models/caretAnnotationsResponse";
import { CheckBoxFieldResponse } from "../models/checkBoxFieldResponse";
import { CheckBoxFieldsResponse } from "../models/checkBoxFieldsResponse";
import { CircleAnnotationResponse } from "../models/circleAnnotationResponse";
import { CircleAnnotationsResponse } from "../models/circleAnnotationsResponse";
import { ComboBoxFieldResponse } from "../models/comboBoxFieldResponse";
import { ComboBoxFieldsResponse } from "../models/comboBoxFieldsResponse";
import { DisplayProperties } from "../models/displayProperties";
import { DisplayPropertiesResponse } from "../models/displayPropertiesResponse";
import { DocumentPageResponse } from "../models/documentPageResponse";
import { DocumentPagesResponse } from "../models/documentPagesResponse";
import { DocumentPropertiesResponse } from "../models/documentPropertiesResponse";
import { DocumentPropertyResponse } from "../models/documentPropertyResponse";
import { DocumentResponse } from "../models/documentResponse";
import { Field } from "../models/field";
import { FieldResponse } from "../models/fieldResponse";
import { Fields } from "../models/fields";
import { FieldsResponse } from "../models/fieldsResponse";
import { FileAttachmentAnnotationResponse } from "../models/fileAttachmentAnnotationResponse";
import { FileAttachmentAnnotationsResponse } from "../models/fileAttachmentAnnotationsResponse";
import { FreeTextAnnotationResponse } from "../models/freeTextAnnotationResponse";
import { FreeTextAnnotationsResponse } from "../models/freeTextAnnotationsResponse";
import { HighlightAnnotationResponse } from "../models/highlightAnnotationResponse";
import { HighlightAnnotationsResponse } from "../models/highlightAnnotationsResponse";
import { ImageResponse } from "../models/imageResponse";
import { ImagesResponse } from "../models/imagesResponse";
import { InkAnnotationResponse } from "../models/inkAnnotationResponse";
import { InkAnnotationsResponse } from "../models/inkAnnotationsResponse";
import { LineAnnotationResponse } from "../models/lineAnnotationResponse";
import { LineAnnotationsResponse } from "../models/lineAnnotationsResponse";
import { LinkAnnotation } from "../models/linkAnnotation";
import { LinkAnnotationResponse } from "../models/linkAnnotationResponse";
import { LinkAnnotationsResponse } from "../models/linkAnnotationsResponse";
import { ListBoxFieldResponse } from "../models/listBoxFieldResponse";
import { ListBoxFieldsResponse } from "../models/listBoxFieldsResponse";
import { MovieAnnotationResponse } from "../models/movieAnnotationResponse";
import { MovieAnnotationsResponse } from "../models/movieAnnotationsResponse";
import { PolyLineAnnotationResponse } from "../models/polyLineAnnotationResponse";
import { PolyLineAnnotationsResponse } from "../models/polyLineAnnotationsResponse";
import { PolygonAnnotationResponse } from "../models/polygonAnnotationResponse";
import { PolygonAnnotationsResponse } from "../models/polygonAnnotationsResponse";
import { PopupAnnotationResponse } from "../models/popupAnnotationResponse";
import { PopupAnnotationsResponse } from "../models/popupAnnotationsResponse";
import { RadioButtonFieldResponse } from "../models/radioButtonFieldResponse";
import { RadioButtonFieldsResponse } from "../models/radioButtonFieldsResponse";
import { RedactionAnnotationResponse } from "../models/redactionAnnotationResponse";
import { RedactionAnnotationsResponse } from "../models/redactionAnnotationsResponse";
import { ScreenAnnotationResponse } from "../models/screenAnnotationResponse";
import { ScreenAnnotationsResponse } from "../models/screenAnnotationsResponse";
import { SignatureFieldResponse } from "../models/signatureFieldResponse";
import { SignatureFieldsResponse } from "../models/signatureFieldsResponse";
import { SignatureVerifyResponse } from "../models/signatureVerifyResponse";
import { SoundAnnotationResponse } from "../models/soundAnnotationResponse";
import { SoundAnnotationsResponse } from "../models/soundAnnotationsResponse";
import { SplitResultResponse } from "../models/splitResultResponse";
import { SquareAnnotationResponse } from "../models/squareAnnotationResponse";
import { SquareAnnotationsResponse } from "../models/squareAnnotationsResponse";
import { SquigglyAnnotationResponse } from "../models/squigglyAnnotationResponse";
import { SquigglyAnnotationsResponse } from "../models/squigglyAnnotationsResponse";
import { StampAnnotationResponse } from "../models/stampAnnotationResponse";
import { StampAnnotationsResponse } from "../models/stampAnnotationsResponse";
import { StampsInfoResponse } from "../models/stampsInfoResponse";
import { StrikeOutAnnotationResponse } from "../models/strikeOutAnnotationResponse";
import { StrikeOutAnnotationsResponse } from "../models/strikeOutAnnotationsResponse";
import { Table } from "../models/table";
import { TableRecognizedResponse } from "../models/tableRecognizedResponse";
import { TablesRecognizedResponse } from "../models/tablesRecognizedResponse";
import { TextAnnotationResponse } from "../models/textAnnotationResponse";
import { TextAnnotationsResponse } from "../models/textAnnotationsResponse";
import { TextBoxFieldResponse } from "../models/textBoxFieldResponse";
import { TextBoxFieldsResponse } from "../models/textBoxFieldsResponse";
import { TextRectsResponse } from "../models/textRectsResponse";
import { TextReplaceResponse } from "../models/textReplaceResponse";
import { UnderlineAnnotationResponse } from "../models/underlineAnnotationResponse";
import { UnderlineAnnotationsResponse } from "../models/underlineAnnotationsResponse";
import { WordCountResponse } from "../models/wordCountResponse";
import { CheckBoxField } from "../models/checkBoxField";
import { ImageFooter } from "../models/imageFooter";
import { ImageHeader } from "../models/imageHeader";
import { ImageStamp } from "../models/imageStamp";
import { MovieAnnotation } from "../models/movieAnnotation";
import { PageNumberStamp } from "../models/pageNumberStamp";
import { PdfPageStamp } from "../models/pdfPageStamp";
import { PopupAnnotation } from "../models/popupAnnotation";
import { RedactionAnnotation } from "../models/redactionAnnotation";
import { ScreenAnnotation } from "../models/screenAnnotation";
import { SignatureField } from "../models/signatureField";
import { TextBoxField } from "../models/textBoxField";
import { TextFooter } from "../models/textFooter";
import { TextHeader } from "../models/textHeader";
import { TextStamp } from "../models/textStamp";
import { CaretAnnotation } from "../models/caretAnnotation";
import { ComboBoxField } from "../models/comboBoxField";
import { FileAttachmentAnnotation } from "../models/fileAttachmentAnnotation";
import { FreeTextAnnotation } from "../models/freeTextAnnotation";
import { HighlightAnnotation } from "../models/highlightAnnotation";
import { InkAnnotation } from "../models/inkAnnotation";
import { LineAnnotation } from "../models/lineAnnotation";
import { ListBoxField } from "../models/listBoxField";
import { RadioButtonField } from "../models/radioButtonField";
import { SoundAnnotation } from "../models/soundAnnotation";
import { SquigglyAnnotation } from "../models/squigglyAnnotation";
import { StampAnnotation } from "../models/stampAnnotation";
import { StrikeOutAnnotation } from "../models/strikeOutAnnotation";
import { TextAnnotation } from "../models/textAnnotation";
import { UnderlineAnnotation } from "../models/underlineAnnotation";
import { CircleAnnotation } from "../models/circleAnnotation";
import { PolyLineAnnotation } from "../models/polyLineAnnotation";
import { PolygonAnnotation } from "../models/polygonAnnotation";
import { SquareAnnotation } from "../models/squareAnnotation";
import { Configuration } from "../configuration";
import http = require('http');
export declare class PdfApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    configuration: Configuration;
    constructor(appSID: string, appKey: string, baseUrl?: string);
    useQuerystring: boolean;
    basePath: string;
    copyFile(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string, versionId?: string): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    copyFolder(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    createFolder(path: string, storageName?: string): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteBookmark(name: string, bookmarkPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteDocumentAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteDocumentBookmarks(name: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteDocumentLinkAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteDocumentStamps(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteDocumentTables(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteFile(path: string, storageName?: string, versionId?: string): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteFolder(path: string, storageName?: string, recursive?: boolean): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteImage(name: string, imageId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteLinkAnnotation(name: string, linkId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deletePage(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deletePageAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deletePageLinkAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deletePageStamps(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deletePageTables(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteProperties(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteProperty(name: string, propertyName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteStamp(name: string, stampId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    deleteTable(name: string, tableId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    downloadFile(path: string, storageName?: string, versionId?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getBookmark(name: string, bookmarkPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: BookmarkResponse;
    }>;
    getBookmarks(name: string, bookmarkPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: BookmarksResponse;
    }>;
    getCaretAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CaretAnnotationResponse;
    }>;
    getCheckBoxField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CheckBoxFieldResponse;
    }>;
    getCircleAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CircleAnnotationResponse;
    }>;
    getComboBoxField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ComboBoxFieldResponse;
    }>;
    getDiscUsage(storageName?: string): Promise<{
        response: http.IncomingMessage;
        body: DiscUsage;
    }>;
    getDocument(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentResponse;
    }>;
    getDocumentAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AnnotationsInfoResponse;
    }>;
    getDocumentAttachmentByIndex(name: string, attachmentIndex: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AttachmentResponse;
    }>;
    getDocumentAttachments(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AttachmentsResponse;
    }>;
    getDocumentBookmarks(name: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: BookmarksResponse;
    }>;
    getDocumentCaretAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CaretAnnotationsResponse;
    }>;
    getDocumentCheckBoxFields(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CheckBoxFieldsResponse;
    }>;
    getDocumentCircleAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CircleAnnotationsResponse;
    }>;
    getDocumentComboBoxFields(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ComboBoxFieldsResponse;
    }>;
    getDocumentDisplayProperties(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DisplayPropertiesResponse;
    }>;
    getDocumentFileAttachmentAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FileAttachmentAnnotationsResponse;
    }>;
    getDocumentFreeTextAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FreeTextAnnotationsResponse;
    }>;
    getDocumentHighlightAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: HighlightAnnotationsResponse;
    }>;
    getDocumentInkAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: InkAnnotationsResponse;
    }>;
    getDocumentLineAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LineAnnotationsResponse;
    }>;
    getDocumentListBoxFields(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ListBoxFieldsResponse;
    }>;
    getDocumentMovieAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: MovieAnnotationsResponse;
    }>;
    getDocumentPolyLineAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolyLineAnnotationsResponse;
    }>;
    getDocumentPolygonAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolygonAnnotationsResponse;
    }>;
    getDocumentPopupAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PopupAnnotationsResponse;
    }>;
    getDocumentPopupAnnotationsByParent(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PopupAnnotationsResponse;
    }>;
    getDocumentProperties(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentPropertiesResponse;
    }>;
    getDocumentProperty(name: string, propertyName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentPropertyResponse;
    }>;
    getDocumentRadioButtonFields(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RadioButtonFieldsResponse;
    }>;
    getDocumentRedactionAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RedactionAnnotationsResponse;
    }>;
    getDocumentScreenAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ScreenAnnotationsResponse;
    }>;
    getDocumentSignatureFields(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SignatureFieldsResponse;
    }>;
    getDocumentSoundAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SoundAnnotationsResponse;
    }>;
    getDocumentSquareAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquareAnnotationsResponse;
    }>;
    getDocumentSquigglyAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquigglyAnnotationsResponse;
    }>;
    getDocumentStampAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StampAnnotationsResponse;
    }>;
    getDocumentStamps(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StampsInfoResponse;
    }>;
    getDocumentStrikeOutAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StrikeOutAnnotationsResponse;
    }>;
    getDocumentTables(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TablesRecognizedResponse;
    }>;
    getDocumentTextAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextAnnotationsResponse;
    }>;
    getDocumentTextBoxFields(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextBoxFieldsResponse;
    }>;
    getDocumentUnderlineAnnotations(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: UnderlineAnnotationsResponse;
    }>;
    getDownloadDocumentAttachmentByIndex(name: string, attachmentIndex: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getEpubInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getExportFieldsFromPdfToFdfInStorage(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getExportFieldsFromPdfToXfdfInStorage(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getExportFieldsFromPdfToXmlInStorage(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FieldResponse;
    }>;
    getFields(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FieldsResponse;
    }>;
    getFileAttachmentAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FileAttachmentAnnotationResponse;
    }>;
    getFileAttachmentAnnotationData(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getFileVersions(path: string, storageName?: string): Promise<{
        response: http.IncomingMessage;
        body: FileVersions;
    }>;
    getFilesList(path: string, storageName?: string): Promise<{
        response: http.IncomingMessage;
        body: FilesList;
    }>;
    getFreeTextAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FreeTextAnnotationResponse;
    }>;
    getHighlightAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: HighlightAnnotationResponse;
    }>;
    getHtmlInStorageToPdf(srcPath: string, htmlFileName?: string, height?: number, width?: number, isLandscape?: boolean, marginLeft?: number, marginBottom?: number, marginRight?: number, marginTop?: number, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getImage(name: string, imageId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ImageResponse;
    }>;
    getImageExtractAsGif(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getImageExtractAsJpeg(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getImageExtractAsPng(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getImageExtractAsTiff(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getImages(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ImagesResponse;
    }>;
    getImportFieldsFromFdfInStorage(name: string, fdfFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getImportFieldsFromXfdfInStorage(name: string, xfdfFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getImportFieldsFromXmlInStorage(name: string, xmlFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getInkAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: InkAnnotationResponse;
    }>;
    getLaTeXInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getLineAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LineAnnotationResponse;
    }>;
    getLinkAnnotation(name: string, linkId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LinkAnnotationResponse;
    }>;
    getListBoxField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ListBoxFieldResponse;
    }>;
    getMarkdownInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getMhtInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getMovieAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: MovieAnnotationResponse;
    }>;
    getPage(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentPageResponse;
    }>;
    getPageAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AnnotationsInfoResponse;
    }>;
    getPageCaretAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CaretAnnotationsResponse;
    }>;
    getPageCheckBoxFields(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CheckBoxFieldsResponse;
    }>;
    getPageCircleAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CircleAnnotationsResponse;
    }>;
    getPageComboBoxFields(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ComboBoxFieldsResponse;
    }>;
    getPageConvertToBmp(name: string, pageNumber: number, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPageConvertToEmf(name: string, pageNumber: number, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPageConvertToGif(name: string, pageNumber: number, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPageConvertToJpeg(name: string, pageNumber: number, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPageConvertToPng(name: string, pageNumber: number, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPageConvertToTiff(name: string, pageNumber: number, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPageFileAttachmentAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FileAttachmentAnnotationsResponse;
    }>;
    getPageFreeTextAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FreeTextAnnotationsResponse;
    }>;
    getPageHighlightAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: HighlightAnnotationsResponse;
    }>;
    getPageInkAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: InkAnnotationsResponse;
    }>;
    getPageLineAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LineAnnotationsResponse;
    }>;
    getPageLinkAnnotation(name: string, pageNumber: number, linkId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LinkAnnotationResponse;
    }>;
    getPageLinkAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LinkAnnotationsResponse;
    }>;
    getPageListBoxFields(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ListBoxFieldsResponse;
    }>;
    getPageMovieAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: MovieAnnotationsResponse;
    }>;
    getPagePolyLineAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolyLineAnnotationsResponse;
    }>;
    getPagePolygonAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolygonAnnotationsResponse;
    }>;
    getPagePopupAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PopupAnnotationsResponse;
    }>;
    getPageRadioButtonFields(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RadioButtonFieldsResponse;
    }>;
    getPageRedactionAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RedactionAnnotationsResponse;
    }>;
    getPageScreenAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ScreenAnnotationsResponse;
    }>;
    getPageSignatureFields(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SignatureFieldsResponse;
    }>;
    getPageSoundAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SoundAnnotationsResponse;
    }>;
    getPageSquareAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquareAnnotationsResponse;
    }>;
    getPageSquigglyAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquigglyAnnotationsResponse;
    }>;
    getPageStampAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StampAnnotationsResponse;
    }>;
    getPageStamps(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StampsInfoResponse;
    }>;
    getPageStrikeOutAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StrikeOutAnnotationsResponse;
    }>;
    getPageTables(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TablesRecognizedResponse;
    }>;
    getPageText(name: string, pageNumber: number, LLX: number, LLY: number, URX: number, URY: number, format?: Array<string>, regex?: string, splitRects?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: TextRectsResponse;
    }>;
    getPageTextAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextAnnotationsResponse;
    }>;
    getPageTextBoxFields(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextBoxFieldsResponse;
    }>;
    getPageUnderlineAnnotations(name: string, pageNumber: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: UnderlineAnnotationsResponse;
    }>;
    getPages(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentPagesResponse;
    }>;
    getPclInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfAInStorageToPdf(srcPath: string, dontOptimize?: boolean, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToDoc(name: string, addReturnToLineEnd?: boolean, format?: string, imageResolutionX?: number, imageResolutionY?: number, maxDistanceBetweenTextLines?: number, mode?: string, recognizeBullets?: boolean, relativeHorizontalProximity?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToEpub(name: string, contentRecognitionMode?: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToHtml(name: string, additionalMarginWidthInPoints?: number, compressSvgGraphicsIfAny?: boolean, convertMarkedContentToLayers?: boolean, defaultFontName?: string, documentType?: string, fixedLayout?: boolean, imageResolution?: number, minimalLineWidth?: number, preventGlyphsGrouping?: boolean, splitCssIntoPages?: boolean, splitIntoPages?: boolean, useZOrder?: boolean, antialiasingProcessing?: string, cssClassNamesPrefix?: string, explicitListOfSavedPages?: Array<number>, fontEncodingStrategy?: string, fontSavingMode?: string, htmlMarkupGenerationMode?: string, lettersPositioningMethod?: string, pagesFlowTypeDependsOnViewersScreenSize?: boolean, partsEmbeddingMode?: string, rasterImagesSavingMode?: string, removeEmptyAreasOnTopAndBottom?: boolean, saveShadowedTextsAsTransparentTexts?: boolean, saveTransparentTexts?: boolean, specialFolderForAllImages?: string, specialFolderForSvgImages?: string, trySaveTextUnderliningAndStrikeoutingInCss?: boolean, folder?: string, storage?: string, flowLayoutParagraphFullWidth?: boolean): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToLaTeX(name: string, pagesCount?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToMobiXml(name: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToPdfA(name: string, type: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToPptx(name: string, separateImages?: boolean, slidesAsImages?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToSvg(name: string, compressOutputToZipArchive?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToTiff(name: string, brightness?: number, compression?: string, colorDepth?: string, leftMargin?: number, rightMargin?: number, topMargin?: number, bottomMargin?: number, orientation?: string, skipBlankPages?: boolean, width?: number, height?: number, xResolution?: number, yResolution?: number, pageIndex?: number, pageCount?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToXls(name: string, insertBlankColumnAtFirst?: boolean, minimizeTheNumberOfWorksheets?: boolean, scaleFactor?: number, uniformWorksheets?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToXlsx(name: string, insertBlankColumnAtFirst?: boolean, minimizeTheNumberOfWorksheets?: boolean, scaleFactor?: number, uniformWorksheets?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToXml(name: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPdfInStorageToXps(name: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getPolyLineAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolyLineAnnotationResponse;
    }>;
    getPolygonAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolygonAnnotationResponse;
    }>;
    getPopupAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PopupAnnotationResponse;
    }>;
    getPsInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getRadioButtonField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RadioButtonFieldResponse;
    }>;
    getRedactionAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RedactionAnnotationResponse;
    }>;
    getScreenAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ScreenAnnotationResponse;
    }>;
    getScreenAnnotationData(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getSignatureField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SignatureFieldResponse;
    }>;
    getSoundAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SoundAnnotationResponse;
    }>;
    getSoundAnnotationData(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getSquareAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquareAnnotationResponse;
    }>;
    getSquigglyAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquigglyAnnotationResponse;
    }>;
    getStampAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StampAnnotationResponse;
    }>;
    getStampAnnotationData(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getStrikeOutAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StrikeOutAnnotationResponse;
    }>;
    getSvgInStorageToPdf(srcPath: string, adjustPageSize?: boolean, height?: number, width?: number, isLandscape?: boolean, marginLeft?: number, marginBottom?: number, marginRight?: number, marginTop?: number, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getTable(name: string, tableId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TableRecognizedResponse;
    }>;
    getText(name: string, LLX: number, LLY: number, URX: number, URY: number, format?: Array<string>, regex?: string, splitRects?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: TextRectsResponse;
    }>;
    getTextAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextAnnotationResponse;
    }>;
    getTextBoxField(name: string, fieldName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextBoxFieldResponse;
    }>;
    getUnderlineAnnotation(name: string, annotationId: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: UnderlineAnnotationResponse;
    }>;
    getVerifySignature(name: string, signName: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SignatureVerifyResponse;
    }>;
    getWebInStorageToPdf(url: string, height?: number, width?: number, isLandscape?: boolean, marginLeft?: number, marginBottom?: number, marginRight?: number, marginTop?: number, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getWordsPerPage(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: WordCountResponse;
    }>;
    getXfaPdfInStorageToAcroForm(name: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getXmlInStorageToPdf(srcPath: string, xslFilePath?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getXpsInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getXslFoInStorageToPdf(srcPath: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    moveFile(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string, versionId?: string): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    moveFolder(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    objectExists(path: string, storageName?: string, versionId?: string): Promise<{
        response: http.IncomingMessage;
        body: ObjectExist;
    }>;
    postAppendDocument(name: string, appendFile: string, startPage?: number, endPage?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentResponse;
    }>;
    postBookmark(name: string, bookmarkPath: string, bookmarks: Array<Bookmark>, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: BookmarksResponse;
    }>;
    postChangePasswordDocumentInStorage(name: string, ownerPassword: string, newUserPassword: string, newOwnerPassword: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postCheckBoxFields(name: string, fields: Array<CheckBoxField>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postComboBoxFields(name: string, fields: Array<ComboBoxField>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postCreateDocument(name: string, documentConfig: DocumentConfig, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentResponse;
    }>;
    postCreateField(name: string, page: number, field: Field, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postDecryptDocumentInStorage(name: string, password: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postDocumentImageFooter(name: string, imageFooter: ImageFooter, startPageNumber?: number, endPageNumber?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postDocumentImageHeader(name: string, imageHeader: ImageHeader, startPageNumber?: number, endPageNumber?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postDocumentPageNumberStamps(name: string, stamp: PageNumberStamp, startPageNumber?: number, endPageNumber?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postDocumentTextFooter(name: string, textFooter: TextFooter, startPageNumber?: number, endPageNumber?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postDocumentTextHeader(name: string, textHeader: TextHeader, startPageNumber?: number, endPageNumber?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postDocumentTextReplace(name: string, textReplace: TextReplaceListRequest, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextReplaceResponse;
    }>;
    postEncryptDocumentInStorage(name: string, userPassword: string, ownerPassword: string, cryptoAlgorithm: string, permissionsFlags?: Array<PermissionsFlags>, usePdf20?: boolean, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postFlattenDocument(name: string, updateAppearances?: boolean, callEvents?: boolean, hideButtons?: boolean, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postImportFieldsFromFdf(name: string, storage?: string, folder?: string, fdfData?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postImportFieldsFromXfdf(name: string, storage?: string, folder?: string, xfdfData?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postImportFieldsFromXml(name: string, storage?: string, folder?: string, xmlData?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postInsertImage(name: string, pageNumber: number, llx: number, lly: number, urx: number, ury: number, imageFilePath?: string, storage?: string, folder?: string, image?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postListBoxFields(name: string, fields: Array<ListBoxField>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postMovePage(name: string, pageNumber: number, newIndex: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postOptimizeDocument(name: string, options: OptimizeOptions, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageCaretAnnotations(name: string, pageNumber: number, annotations: Array<CaretAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageCertify(name: string, pageNumber: number, sign: Signature, docMdpAccessPermissionType: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageCircleAnnotations(name: string, pageNumber: number, annotations: Array<CircleAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageFileAttachmentAnnotations(name: string, pageNumber: number, annotations: Array<FileAttachmentAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageFreeTextAnnotations(name: string, pageNumber: number, annotations: Array<FreeTextAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageHighlightAnnotations(name: string, pageNumber: number, annotations: Array<HighlightAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageImageStamps(name: string, pageNumber: number, stamps: Array<ImageStamp>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageInkAnnotations(name: string, pageNumber: number, annotations: Array<InkAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageLineAnnotations(name: string, pageNumber: number, annotations: Array<LineAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageLinkAnnotations(name: string, pageNumber: number, links: Array<LinkAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageMovieAnnotations(name: string, pageNumber: number, annotations: Array<MovieAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPagePdfPageStamps(name: string, pageNumber: number, stamps: Array<PdfPageStamp>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPagePolyLineAnnotations(name: string, pageNumber: number, annotations: Array<PolyLineAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPagePolygonAnnotations(name: string, pageNumber: number, annotations: Array<PolygonAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageRedactionAnnotations(name: string, pageNumber: number, annotations: Array<RedactionAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageScreenAnnotations(name: string, pageNumber: number, annotations: Array<ScreenAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageSoundAnnotations(name: string, pageNumber: number, annotations: Array<SoundAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageSquareAnnotations(name: string, pageNumber: number, annotations: Array<SquareAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageSquigglyAnnotations(name: string, pageNumber: number, annotations: Array<SquigglyAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageStampAnnotations(name: string, pageNumber: number, annotations: Array<StampAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageStrikeOutAnnotations(name: string, pageNumber: number, annotations: Array<StrikeOutAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageTables(name: string, pageNumber: number, tables: Array<Table>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageTextAnnotations(name: string, pageNumber: number, annotations: Array<TextAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageTextReplace(name: string, pageNumber: number, textReplaceListRequest: TextReplaceListRequest, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextReplaceResponse;
    }>;
    postPageTextStamps(name: string, pageNumber: number, stamps: Array<TextStamp>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPageUnderlineAnnotations(name: string, pageNumber: number, annotations: Array<UnderlineAnnotation>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postPopupAnnotation(name: string, annotationId: string, annotation: PopupAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postRadioButtonFields(name: string, fields: Array<RadioButtonField>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postSignDocument(name: string, sign: Signature, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postSignPage(name: string, pageNumber: number, sign: Signature, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postSignatureField(name: string, field: SignatureField, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    postSplitDocument(name: string, format?: string, from?: number, to?: number, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SplitResultResponse;
    }>;
    postTextBoxFields(name: string, fields: Array<TextBoxField>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putAddNewPage(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentPagesResponse;
    }>;
    putAddText(name: string, pageNumber: number, paragraph: Paragraph, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putAnnotationsFlatten(name: string, startPage?: number, endPage?: number, annotationTypes?: Array<AnnotationType>, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putBookmark(name: string, bookmarkPath: string, bookmark: Bookmark, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: BookmarkResponse;
    }>;
    putCaretAnnotation(name: string, annotationId: string, annotation: CaretAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CaretAnnotationResponse;
    }>;
    putChangePasswordDocument(outPath: string, ownerPassword: string, newUserPassword: string, newOwnerPassword: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putCheckBoxField(name: string, fieldName: string, field: CheckBoxField, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CheckBoxFieldResponse;
    }>;
    putCircleAnnotation(name: string, annotationId: string, annotation: CircleAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: CircleAnnotationResponse;
    }>;
    putComboBoxField(name: string, fieldName: string, field: ComboBoxField, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ComboBoxFieldResponse;
    }>;
    putCreateDocument(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentResponse;
    }>;
    putDecryptDocument(outPath: string, password: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putDocumentDisplayProperties(name: string, displayProperties: DisplayProperties, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DisplayPropertiesResponse;
    }>;
    putEncryptDocument(outPath: string, userPassword: string, ownerPassword: string, cryptoAlgorithm: string, permissionsFlags?: Array<PermissionsFlags>, usePdf20?: boolean, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putEpubInStorageToPdf(name: string, srcPath: string, storage?: string, dstFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putExportFieldsFromPdfToFdfInStorage(name: string, fdfOutputFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putExportFieldsFromPdfToXfdfInStorage(name: string, xfdfOutputFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putExportFieldsFromPdfToXmlInStorage(name: string, xmlOutputFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putFieldsFlatten(name: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putFileAttachmentAnnotation(name: string, annotationId: string, annotation: FileAttachmentAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FileAttachmentAnnotationResponse;
    }>;
    putFileAttachmentAnnotationDataExtract(name: string, annotationId: string, outFolder?: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putFreeTextAnnotation(name: string, annotationId: string, annotation: FreeTextAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FreeTextAnnotationResponse;
    }>;
    putHighlightAnnotation(name: string, annotationId: string, annotation: HighlightAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: HighlightAnnotationResponse;
    }>;
    putHtmlInStorageToPdf(name: string, srcPath: string, htmlFileName?: string, height?: number, width?: number, isLandscape?: boolean, marginLeft?: number, marginBottom?: number, marginRight?: number, marginTop?: number, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImageExtractAsGif(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImageExtractAsJpeg(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImageExtractAsPng(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImageExtractAsTiff(name: string, imageId: string, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImageInStorageToPdf(name: string, imageTemplates: ImageTemplatesRequest, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImagesExtractAsGif(name: string, pageNumber: number, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImagesExtractAsJpeg(name: string, pageNumber: number, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImagesExtractAsPng(name: string, pageNumber: number, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImagesExtractAsTiff(name: string, pageNumber: number, width?: number, height?: number, storage?: string, folder?: string, destFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImportFieldsFromFdfInStorage(name: string, fdfFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImportFieldsFromXfdfInStorage(name: string, xfdfFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putImportFieldsFromXmlInStorage(name: string, xmlFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putInkAnnotation(name: string, annotationId: string, annotation: InkAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: InkAnnotationResponse;
    }>;
    putLaTeXInStorageToPdf(name: string, srcPath: string, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putLineAnnotation(name: string, annotationId: string, annotation: LineAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LineAnnotationResponse;
    }>;
    putLinkAnnotation(name: string, linkId: string, link: LinkAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: LinkAnnotationResponse;
    }>;
    putListBoxField(name: string, fieldName: string, field: ListBoxField, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ListBoxFieldResponse;
    }>;
    putMarkdownInStorageToPdf(name: string, srcPath: string, storage?: string, dstFolder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putMergeDocuments(name: string, mergeDocuments: MergeDocuments, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentResponse;
    }>;
    putMhtInStorageToPdf(name: string, srcPath: string, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putMovieAnnotation(name: string, annotationId: string, annotation: MovieAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: MovieAnnotationResponse;
    }>;
    putPageAddStamp(name: string, pageNumber: number, stamp: Stamp, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPageConvertToBmp(name: string, pageNumber: number, outPath: string, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPageConvertToEmf(name: string, pageNumber: number, outPath: string, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPageConvertToGif(name: string, pageNumber: number, outPath: string, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPageConvertToJpeg(name: string, pageNumber: number, outPath: string, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPageConvertToPng(name: string, pageNumber: number, outPath: string, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPageConvertToTiff(name: string, pageNumber: number, outPath: string, width?: number, height?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPclInStorageToPdf(name: string, srcPath: string, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfAInStorageToPdf(name: string, srcPath: string, dstFolder?: string, dontOptimize?: boolean, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToDoc(outPath: string, addReturnToLineEnd?: boolean, format?: string, imageResolutionX?: number, imageResolutionY?: number, maxDistanceBetweenTextLines?: number, mode?: string, recognizeBullets?: boolean, relativeHorizontalProximity?: number, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToEpub(outPath: string, contentRecognitionMode?: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToHtml(outPath: string, additionalMarginWidthInPoints?: number, compressSvgGraphicsIfAny?: boolean, convertMarkedContentToLayers?: boolean, defaultFontName?: string, documentType?: string, fixedLayout?: boolean, imageResolution?: number, minimalLineWidth?: number, preventGlyphsGrouping?: boolean, splitCssIntoPages?: boolean, splitIntoPages?: boolean, useZOrder?: boolean, antialiasingProcessing?: string, cssClassNamesPrefix?: string, explicitListOfSavedPages?: Array<number>, fontEncodingStrategy?: string, fontSavingMode?: string, htmlMarkupGenerationMode?: string, lettersPositioningMethod?: string, pagesFlowTypeDependsOnViewersScreenSize?: boolean, partsEmbeddingMode?: string, rasterImagesSavingMode?: string, removeEmptyAreasOnTopAndBottom?: boolean, saveShadowedTextsAsTransparentTexts?: boolean, saveTransparentTexts?: boolean, specialFolderForAllImages?: string, specialFolderForSvgImages?: string, trySaveTextUnderliningAndStrikeoutingInCss?: boolean, storage?: string, flowLayoutParagraphFullWidth?: boolean, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToLaTeX(outPath: string, pagesCount?: number, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToMobiXml(outPath: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToPdfA(outPath: string, type: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToPptx(outPath: string, separateImages?: boolean, slidesAsImages?: boolean, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToSvg(outPath: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToTiff(outPath: string, brightness?: number, compression?: string, colorDepth?: string, leftMargin?: number, rightMargin?: number, topMargin?: number, bottomMargin?: number, orientation?: string, skipBlankPages?: boolean, width?: number, height?: number, xResolution?: number, yResolution?: number, pageIndex?: number, pageCount?: number, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToXls(outPath: string, insertBlankColumnAtFirst?: boolean, minimizeTheNumberOfWorksheets?: boolean, scaleFactor?: number, uniformWorksheets?: boolean, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToXlsx(outPath: string, insertBlankColumnAtFirst?: boolean, minimizeTheNumberOfWorksheets?: boolean, scaleFactor?: number, uniformWorksheets?: boolean, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToXml(outPath: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInRequestToXps(outPath: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToDoc(name: string, outPath: string, addReturnToLineEnd?: boolean, format?: string, imageResolutionX?: number, imageResolutionY?: number, maxDistanceBetweenTextLines?: number, mode?: string, recognizeBullets?: boolean, relativeHorizontalProximity?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToEpub(name: string, outPath: string, contentRecognitionMode?: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToHtml(name: string, outPath: string, additionalMarginWidthInPoints?: number, compressSvgGraphicsIfAny?: boolean, convertMarkedContentToLayers?: boolean, defaultFontName?: string, documentType?: string, fixedLayout?: boolean, imageResolution?: number, minimalLineWidth?: number, preventGlyphsGrouping?: boolean, splitCssIntoPages?: boolean, splitIntoPages?: boolean, useZOrder?: boolean, antialiasingProcessing?: string, cssClassNamesPrefix?: string, explicitListOfSavedPages?: Array<number>, fontEncodingStrategy?: string, fontSavingMode?: string, htmlMarkupGenerationMode?: string, lettersPositioningMethod?: string, pagesFlowTypeDependsOnViewersScreenSize?: boolean, partsEmbeddingMode?: string, rasterImagesSavingMode?: string, removeEmptyAreasOnTopAndBottom?: boolean, saveShadowedTextsAsTransparentTexts?: boolean, saveTransparentTexts?: boolean, specialFolderForAllImages?: string, specialFolderForSvgImages?: string, trySaveTextUnderliningAndStrikeoutingInCss?: boolean, folder?: string, storage?: string, flowLayoutParagraphFullWidth?: boolean): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToLaTeX(name: string, outPath: string, pagesCount?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToMobiXml(name: string, outPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToPdfA(name: string, outPath: string, type: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToPptx(name: string, outPath: string, separateImages?: boolean, slidesAsImages?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToSvg(name: string, outPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToTiff(name: string, outPath: string, brightness?: number, compression?: string, colorDepth?: string, leftMargin?: number, rightMargin?: number, topMargin?: number, bottomMargin?: number, orientation?: string, skipBlankPages?: boolean, width?: number, height?: number, xResolution?: number, yResolution?: number, pageIndex?: number, pageCount?: number, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToXls(name: string, outPath: string, insertBlankColumnAtFirst?: boolean, minimizeTheNumberOfWorksheets?: boolean, scaleFactor?: number, uniformWorksheets?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToXlsx(name: string, outPath: string, insertBlankColumnAtFirst?: boolean, minimizeTheNumberOfWorksheets?: boolean, scaleFactor?: number, uniformWorksheets?: boolean, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToXml(name: string, outPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPdfInStorageToXps(name: string, outPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPolyLineAnnotation(name: string, annotationId: string, annotation: PolyLineAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolyLineAnnotationResponse;
    }>;
    putPolygonAnnotation(name: string, annotationId: string, annotation: PolygonAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PolygonAnnotationResponse;
    }>;
    putPopupAnnotation(name: string, annotationId: string, annotation: PopupAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: PopupAnnotationResponse;
    }>;
    putPrivileges(name: string, privileges: DocumentPrivilege, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putPsInStorageToPdf(name: string, srcPath: string, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putRadioButtonField(name: string, fieldName: string, field: RadioButtonField, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RadioButtonFieldResponse;
    }>;
    putRedactionAnnotation(name: string, annotationId: string, annotation: RedactionAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: RedactionAnnotationResponse;
    }>;
    putReplaceImage(name: string, imageId: string, imageFilePath?: string, storage?: string, folder?: string, image?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: ImageResponse;
    }>;
    putScreenAnnotation(name: string, annotationId: string, annotation: ScreenAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: ScreenAnnotationResponse;
    }>;
    putScreenAnnotationDataExtract(name: string, annotationId: string, outFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putSearchableDocument(name: string, storage?: string, folder?: string, lang?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putSetProperty(name: string, propertyName: string, value: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: DocumentPropertyResponse;
    }>;
    putSignatureField(name: string, fieldName: string, field: SignatureField, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SignatureFieldResponse;
    }>;
    putSoundAnnotation(name: string, annotationId: string, annotation: SoundAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SoundAnnotationResponse;
    }>;
    putSoundAnnotationDataExtract(name: string, annotationId: string, outFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putSquareAnnotation(name: string, annotationId: string, annotation: SquareAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquareAnnotationResponse;
    }>;
    putSquigglyAnnotation(name: string, annotationId: string, annotation: SquigglyAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: SquigglyAnnotationResponse;
    }>;
    putStampAnnotation(name: string, annotationId: string, annotation: StampAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StampAnnotationResponse;
    }>;
    putStampAnnotationDataExtract(name: string, annotationId: string, outFilePath: string, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putStrikeOutAnnotation(name: string, annotationId: string, annotation: StrikeOutAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: StrikeOutAnnotationResponse;
    }>;
    putSvgInStorageToPdf(name: string, srcPath: string, adjustPageSize?: boolean, height?: number, width?: number, isLandscape?: boolean, marginLeft?: number, marginBottom?: number, marginRight?: number, marginTop?: number, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putTable(name: string, tableId: string, table: Table, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putTextAnnotation(name: string, annotationId: string, annotation: TextAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextAnnotationResponse;
    }>;
    putTextBoxField(name: string, fieldName: string, field: TextBoxField, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: TextBoxFieldResponse;
    }>;
    putUnderlineAnnotation(name: string, annotationId: string, annotation: UnderlineAnnotation, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: UnderlineAnnotationResponse;
    }>;
    putUpdateField(name: string, fieldName: string, field: Field, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FieldResponse;
    }>;
    putUpdateFields(name: string, fields: Fields, storage?: string, folder?: string): Promise<{
        response: http.IncomingMessage;
        body: FieldsResponse;
    }>;
    putWebInStorageToPdf(name: string, url: string, height?: number, width?: number, isLandscape?: boolean, marginLeft?: number, marginBottom?: number, marginRight?: number, marginTop?: number, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putXfaPdfInRequestToAcroForm(outPath: string, storage?: string, file?: Buffer): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putXfaPdfInStorageToAcroForm(name: string, outPath: string, folder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putXmlInStorageToPdf(name: string, srcPath: string, xslFilePath?: string, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putXpsInStorageToPdf(name: string, srcPath: string, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    putXslFoInStorageToPdf(name: string, srcPath: string, dstFolder?: string, storage?: string): Promise<{
        response: http.IncomingMessage;
        body: AsposeResponse;
    }>;
    storageExists(storageName: string): Promise<{
        response: http.IncomingMessage;
        body: StorageExist;
    }>;
    uploadFile(path: string, file: Buffer, storageName?: string): Promise<{
        response: http.IncomingMessage;
        body: FilesUploadResult;
    }>;
}
